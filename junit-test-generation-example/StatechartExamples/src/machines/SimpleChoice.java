/** Generated by itemis CREATE code generator. */
package machines;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class SimpleChoice implements IEventDriven {
	public enum State {
		MAIN_REGION_STATE0,
		MAIN_REGION_STATE1,
		MAIN_REGION_STATE2,
		MAIN_REGION_STATE3,
		MAIN_REGION__FINAL_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public SimpleChoice() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart SimpleChoice */
		setX(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart SimpleChoice */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart SimpleChoice */
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_);
	}
	private void clearInEvents() {
		event0 = false;
		increase = false;
		decrease = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATE0:
			main_region_State0_react(-1l);
			break;
		case MAIN_REGION_STATE1:
			main_region_State1_react(-1l);
			break;
		case MAIN_REGION_STATE2:
			main_region_State2_react(-1l);
			break;
		case MAIN_REGION_STATE3:
			main_region_State3_react(-1l);
			break;
		case MAIN_REGION__FINAL_:
			main_region__final__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATE0:
			return stateVector[0] == State.MAIN_REGION_STATE0;
		case MAIN_REGION_STATE1:
			return stateVector[0] == State.MAIN_REGION_STATE1;
		case MAIN_REGION_STATE2:
			return stateVector[0] == State.MAIN_REGION_STATE2;
		case MAIN_REGION_STATE3:
			return stateVector[0] == State.MAIN_REGION_STATE3;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		default:
			return false;
		}
	}
	
	
	private boolean event0;
	
	
	public void raiseEvent0() {
		inEventQueue.add(() -> {
			event0 = true;
		});
		runCycle();
	}
	
	private boolean increase;
	
	
	public void raiseIncrease() {
		inEventQueue.add(() -> {
			increase = true;
		});
		runCycle();
	}
	
	private boolean decrease;
	
	
	public void raiseDecrease() {
		inEventQueue.add(() -> {
			decrease = true;
		});
		runCycle();
	}
	
	private long x;
	
	public long getX() {
		return x;
	}
	
	public void setX(long value) {
		this.x = value;
	}
	
	/* Entry action for state 'State1'. */
	private void entryAction_main_region_State1() {
		/* Entry action for state 'State1'. */
		setX(1l);
	}
	
	/* Entry action for state 'State3'. */
	private void entryAction_main_region_State3() {
		/* Entry action for state 'State3'. */
		setX(-(1l));
	}
	
	/* Exit action for state 'State2'. */
	private void exitAction_main_region_State2() {
		/* Exit action for state 'State2'. */
		setX(0l);
	}
	
	/* 'default' enter sequence for state State0 */
	private void enterSequence_main_region_State0_default() {
		/* 'default' enter sequence for state State0 */
		stateVector[0] = State.MAIN_REGION_STATE0;
	}
	
	/* 'default' enter sequence for state State1 */
	private void enterSequence_main_region_State1_default() {
		/* 'default' enter sequence for state State1 */
		entryAction_main_region_State1();
		stateVector[0] = State.MAIN_REGION_STATE1;
	}
	
	/* 'default' enter sequence for state State2 */
	private void enterSequence_main_region_State2_default() {
		/* 'default' enter sequence for state State2 */
		stateVector[0] = State.MAIN_REGION_STATE2;
	}
	
	/* 'default' enter sequence for state State3 */
	private void enterSequence_main_region_State3_default() {
		/* 'default' enter sequence for state State3 */
		entryAction_main_region_State3();
		stateVector[0] = State.MAIN_REGION_STATE3;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAIN_REGION__FINAL_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state State0 */
	private void exitSequence_main_region_State0() {
		/* Default exit sequence for state State0 */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State1 */
	private void exitSequence_main_region_State1() {
		/* Default exit sequence for state State1 */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State2 */
	private void exitSequence_main_region_State2() {
		/* Default exit sequence for state State2 */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_State2();
	}
	
	/* Default exit sequence for state State3 */
	private void exitSequence_main_region_State3() {
		/* Default exit sequence for state State3 */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_STATE0:
			exitSequence_main_region_State0();
			break;
		case MAIN_REGION_STATE1:
			exitSequence_main_region_State1();
			break;
		case MAIN_REGION_STATE2:
			exitSequence_main_region_State2();
			break;
		case MAIN_REGION_STATE3:
			exitSequence_main_region_State3();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (getX()>0l) {
			enterSequence_main_region_State1_default();
		} else {
			if (getX()==0l) {
				enterSequence_main_region_State2_default();
			} else {
				enterSequence_main_region_State3_default();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		setX(0l);
		enterSequence_main_region_State0_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before;
	}
	
	private long main_region_State0_react(long transitioned_before) {
		/* The reactions of state State0. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (event0) {
				exitSequence_main_region_State0();
				react_main_region__choice_0();
				transitioned_after = 0l;
			} else {
				if (increase) {
					exitSequence_main_region_State0();
					setX(getX() + 1l);
					enterSequence_main_region_State0_default();
					react(0l);
					transitioned_after = 0l;
				} else {
					if (decrease) {
						exitSequence_main_region_State0();
						setX(getX() - 1l);
						enterSequence_main_region_State0_default();
						react(0l);
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_State1_react(long transitioned_before) {
		/* The reactions of state State1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (event0) {
				exitSequence_main_region_State1();
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_State2_react(long transitioned_before) {
		/* The reactions of state State2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (event0) {
				exitSequence_main_region_State2();
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_State3_react(long transitioned_before) {
		/* The reactions of state State3. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (event0) {
				exitSequence_main_region_State3();
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return react(transitioned_before);
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
