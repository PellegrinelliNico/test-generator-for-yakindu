/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 01 15:38:23 GMT 2023
 */

package machines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import machines.SimpleParallel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleParallel_ESTest extends SimpleParallel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setIsExecuting(true);
      simpleParallel0.raiseEva();
      boolean boolean0 = simpleParallel0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      boolean boolean0 = simpleParallel0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      long long0 = simpleParallel0.getStateConfVectorPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      long long0 = simpleParallel0.getStateConfVectorPosition();
      assertTrue(simpleParallel0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setIsExecuting(true);
      boolean boolean0 = simpleParallel0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      boolean boolean0 = simpleParallel0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      // Undeclared exception!
      try { 
        simpleParallel0.isStateActive((SimpleParallel.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("machines.SimpleParallel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R2_STATEB2;
      simpleParallel0.raiseEvb();
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R2_STATEB2;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEvb();
      assertTrue(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEva();
      simpleParallel0.raiseEv0();
      assertFalse(simpleParallel0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.triggerWithoutEvent();
      assertTrue(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      assertTrue(simpleParallel0.isActive());
      
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isFinal());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEva();
      assertTrue(simpleParallel0.isActive());
      
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      assertTrue(simpleParallel0.isActive());
      
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEva();
      simpleParallel0.raiseEvb();
      assertTrue(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R2_STATEB1;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEva();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R1_STATEA2;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R1_STATEA1;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE;
      simpleParallel0.raiseEv0();
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_END;
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEva();
      simpleParallel0.raiseEvb();
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_BEGIN;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertTrue(simpleParallel0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.$NULLSTATE$;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R2_STATEB1;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R1_STATEA2;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_ORTOGONALSTATE_R1_STATEA1;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_END;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      SimpleParallel.State simpleParallel_State0 = SimpleParallel.State.MAIN_REGION_BEGIN;
      boolean boolean0 = simpleParallel0.isStateActive(simpleParallel_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setIsExecuting(true);
      simpleParallel0.raiseEv0();
      simpleParallel0.setIsExecuting(false);
      simpleParallel0.raiseEv0();
      assertFalse(simpleParallel0.isFinal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      boolean boolean0 = simpleParallel0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      assertFalse(simpleParallel0.isActive());
      
      simpleParallel0.enter();
      boolean boolean0 = simpleParallel0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setIsExecuting(true);
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setIsExecuting(true);
      simpleParallel0.enter();
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      assertFalse(simpleParallel0.isActive());
      
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEva();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEvb();
      assertTrue(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.setStateConfVectorPosition((-1L));
      long long0 = simpleParallel0.getStateConfVectorPosition();
      assertEquals((-1L), long0);
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      boolean boolean0 = simpleParallel0.isFinal();
      assertFalse(boolean0);
      assertFalse(simpleParallel0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleParallel simpleParallel0 = new SimpleParallel();
      simpleParallel0.enter();
      simpleParallel0.raiseEv0();
      simpleParallel0.raiseEvb();
      simpleParallel0.raiseEva();
      simpleParallel0.raiseEvb();
      assertTrue(simpleParallel0.isActive());
      
      simpleParallel0.exit();
      assertFalse(simpleParallel0.isActive());
  }
}
