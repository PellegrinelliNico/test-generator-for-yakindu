/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 01 10:25:39 GMT 2023
 */

package machines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import machines.SimpleChoice;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleChoice_ESTest extends SimpleChoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setIsExecuting(true);
      simpleChoice0.raiseDecrease();
      boolean boolean0 = simpleChoice0.nextEvent();
      assertEquals(0L, simpleChoice0.getX());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.nextEvent();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setX(1812L);
      long long0 = simpleChoice0.getX();
      assertEquals(1812L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setX((-1954L));
      long long0 = simpleChoice0.getX();
      assertEquals((-1954L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setIsExecuting(true);
      boolean boolean0 = simpleChoice0.getIsExecuting();
      assertEquals(0L, simpleChoice0.getX());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      boolean boolean0 = simpleChoice0.getIsExecuting();
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      // Undeclared exception!
      try { 
        simpleChoice0.isStateActive((SimpleChoice.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("machines.SimpleChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setIsExecuting(true);
      simpleChoice0.triggerWithoutEvent();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      long long0 = simpleChoice0.getX();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseDecrease();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseDecrease();
      assertTrue(simpleChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseIncrease();
      assertTrue(simpleChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.setX(2123L);
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      assertTrue(simpleChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.triggerWithoutEvent();
      assertTrue(simpleChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.exit();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseDecrease();
      simpleChoice0.raiseEvent0();
      simpleChoice0.exit();
      assertEquals((-1L), simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      assertTrue(simpleChoice0.isActive());
      
      simpleChoice0.exit();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      assertTrue(simpleChoice0.isActive());
      
      simpleChoice0.exit();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION__FINAL_;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.setX((-2475L));
      simpleChoice0.raiseEvent0();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE3;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE2;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseIncrease();
      simpleChoice0.raiseEvent0();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE1;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE0;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.$NULLSTATE$;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION__FINAL_;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE2;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE1;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE3;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      SimpleChoice.State simpleChoice_State0 = SimpleChoice.State.MAIN_REGION_STATE0;
      boolean boolean0 = simpleChoice0.isStateActive(simpleChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      boolean boolean0 = simpleChoice0.isFinal();
      assertTrue(simpleChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      boolean boolean0 = simpleChoice0.isFinal();
      assertFalse(boolean0);
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      boolean boolean0 = simpleChoice0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      boolean boolean0 = simpleChoice0.isActive();
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setIsExecuting(true);
      simpleChoice0.exit();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      assertTrue(simpleChoice0.isActive());
      
      simpleChoice0.exit();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      assertFalse(simpleChoice0.isActive());
      
      simpleChoice0.triggerWithoutEvent();
      assertEquals(0L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseIncrease();
      simpleChoice0.raiseEvent0();
      simpleChoice0.exit();
      assertEquals(1L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.setIsExecuting(true);
      simpleChoice0.raiseEvent0();
      simpleChoice0.setIsExecuting(false);
      simpleChoice0.setX(771L);
      simpleChoice0.raiseDecrease();
      assertEquals(1L, simpleChoice0.getX());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.setIsExecuting(true);
      simpleChoice0.enter();
      assertEquals(0L, simpleChoice0.getX());
      assertFalse(simpleChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseDecrease();
      assertTrue(simpleChoice0.isFinal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleChoice simpleChoice0 = new SimpleChoice();
      simpleChoice0.enter();
      simpleChoice0.raiseDecrease();
      simpleChoice0.raiseEvent0();
      simpleChoice0.raiseEvent0();
      assertEquals((-1L), simpleChoice0.getX());
  }
}
