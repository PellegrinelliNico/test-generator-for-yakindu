/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import statechart.SimpleLight;

public class ControllerSimplified implements ICycleBased {

    private static class EvBuf {

        private boolean powerOn;

        private boolean control1;

        private boolean control2;

        private boolean dec;

        private boolean inc;
    }

    private static class ControllerEvBuf {

        private EvBuf iface = new EvBuf();
    }

    public enum State {

        MAIN_REGION_OFF, MAIN_REGION_ON, MAIN_REGION_LIGHT_1, MAIN_REGION_LIGHT_2, $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ControllerEvBuf current = new ControllerEvBuf();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public ControllerSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart Controller */
        setSL1(null);
        setSL2(null);
        isExecuting = false;
    }

    public void runCycle() {
        /* Performs a 'run to completion' step. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        swapInEvents();
        microStep();
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart Controller */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart Controller */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void swapInEvents() {
        current.iface.powerOn = powerOn;
        powerOn = false;
        current.iface.control1 = control1;
        control1 = false;
        current.iface.control2 = control2;
        control2 = false;
        current.iface.dec = dec;
        dec = false;
        current.iface.inc = inc;
        inc = false;
    }

    private void clearInEvents() {
        powerOn = false;
        control1 = false;
        control2 = false;
        dec = false;
        inc = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_OFF:
                main_region_Off_react(-1l);
                break;
            case MAIN_REGION_ON:
                main_region_On_react(-1l);
                break;
            case MAIN_REGION_LIGHT_1:
                main_region_Light_1_react(-1l);
                break;
            case MAIN_REGION_LIGHT_2:
                main_region_Light_2_react(-1l);
                break;
            default:
                break;
        }
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_OFF:
                return stateVector[0] == State.MAIN_REGION_OFF;
            case MAIN_REGION_ON:
                return stateVector[0] == State.MAIN_REGION_ON;
            case MAIN_REGION_LIGHT_1:
                return stateVector[0] == State.MAIN_REGION_LIGHT_1;
            case MAIN_REGION_LIGHT_2:
                return stateVector[0] == State.MAIN_REGION_LIGHT_2;
            default:
                return false;
        }
    }

    private boolean powerOn;

    public void raisePowerOn() {
        powerOn = true;
    }

    private boolean control1;

    public void raiseControl1() {
        control1 = true;
    }

    private boolean control2;

    public void raiseControl2() {
        control2 = true;
    }

    private boolean dec;

    public void raiseDec() {
        dec = true;
    }

    private boolean inc;

    public void raiseInc() {
        inc = true;
    }

    private SimpleLight sL1;

    private SimpleLight getSL1() {
        return sL1;
    }

    public void setSL1(SimpleLight value) {
        this.sL1 = value;
    }

    private SimpleLight sL2;

    private SimpleLight getSL2() {
        return sL2;
    }

    public void setSL2(SimpleLight value) {
        this.sL2 = value;
    }

    /* Entry action for state 'Off'. */
    private void entryAction_main_region_Off() {
        /* Entry action for state 'Off'. */
        getSL1().enter();
        getSL2().enter();
    }

    /* Entry action for state 'On'. */
    private void entryAction_main_region_On() {
        /* Entry action for state 'On'. */
        getSL1().raiseToggle();
        getSL2().raiseToggle();
    }

    /* Entry action for state 'Light 1'. */
    private void entryAction_main_region_Light_1() {
        /* Entry action for state 'Light 1'. */
        sL1.setBrightness(50l);
    }

    /* 'default' enter sequence for state Off */
    private void enterSequence_main_region_Off_default() {
        /* 'default' enter sequence for state Off */
        entryAction_main_region_Off();
        stateVector[0] = State.MAIN_REGION_OFF;
    }

    /* 'default' enter sequence for state On */
    private void enterSequence_main_region_On_default() {
        /* 'default' enter sequence for state On */
        entryAction_main_region_On();
        stateVector[0] = State.MAIN_REGION_ON;
    }

    /* 'default' enter sequence for state Light 1 */
    private void enterSequence_main_region_Light_1_default() {
        /* 'default' enter sequence for state Light 1 */
        entryAction_main_region_Light_1();
        stateVector[0] = State.MAIN_REGION_LIGHT_1;
    }

    /* 'default' enter sequence for state Light 2 */
    private void enterSequence_main_region_Light_2_default() {
        /* 'default' enter sequence for state Light 2 */
        stateVector[0] = State.MAIN_REGION_LIGHT_2;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state Off */
    private void exitSequence_main_region_Off() {
        /* Default exit sequence for state Off */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state On */
    private void exitSequence_main_region_On() {
        /* Default exit sequence for state On */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state Light 1 */
    private void exitSequence_main_region_Light_1() {
        /* Default exit sequence for state Light 1 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state Light 2 */
    private void exitSequence_main_region_Light_2() {
        /* Default exit sequence for state Light 2 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_OFF:
                exitSequence_main_region_Off();
                break;
            case MAIN_REGION_ON:
                exitSequence_main_region_On();
                break;
            case MAIN_REGION_LIGHT_1:
                exitSequence_main_region_Light_1();
                break;
            case MAIN_REGION_LIGHT_2:
                exitSequence_main_region_Light_2();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_Off_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_Off_react(long transitioned_before) {
        /* The reactions of state Off. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.powerOn) {
                exitSequence_main_region_Off();
                enterSequence_main_region_On_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_On_react(long transitioned_before) {
        /* The reactions of state On. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.control2) {
                exitSequence_main_region_On();
                enterSequence_main_region_Light_2_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (current.iface.control1) {
                    exitSequence_main_region_On();
                    enterSequence_main_region_Light_1_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Light_1_react(long transitioned_before) {
        /* The reactions of state Light 1. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.inc) {
                exitSequence_main_region_Light_1();
                getSL1().raiseInc();
                enterSequence_main_region_Light_1_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (current.iface.dec) {
                    exitSequence_main_region_Light_1();
                    getSL1().raiseDec();
                    enterSequence_main_region_Light_1_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Light_2_react(long transitioned_before) {
        /* The reactions of state Light 2. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.inc) {
                exitSequence_main_region_Light_2();
                getSL2().raiseInc();
                enterSequence_main_region_Light_2_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (current.iface.dec) {
                    exitSequence_main_region_Light_2();
                    getSL2().raiseDec();
                    enterSequence_main_region_Light_2_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }
}
