testclass AeasyChoiceTest for statechart easyChoice {
	@Test
	operation test00 () {
	}

	@Test
	operation test01 () {
	    enter
	    triggerWithoutEvent
	    assert is_active
	}

	@Test
	operation test02 () {
	    enter
	    raise prepare
	    raise start
	    raise end
	    raise start
	    assert is_active
	}

	@Test
	operation test03 () {
	    enter
	    raise prepare
	    raise prepare
	    raise prepare
	    raise start
	    raise end
	    assert is_active
	}

	@Test
	operation test04 () {
	    enter
	    raise prepare
	    raise prepare
	    raise start
	    raise end
	    assert is_active
	}

	@Test
	operation test05 () {
	    enter
	    raise prepare
	    raise start
	    raise start
	    assert is_active
	}

	@Test
	operation test06 () {
	    enter
	    raise start
	    assert is_active
	}

	@Test
	operation test07 () {
	    exit
	    assert !is_active
	}

	@Test
	operation test08 () {
	    enter
	    raise prepare
	    raise start
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test09 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test10 () {
	    enter
	    raise prepare
	    raise start
	    raise end
	    assert is_active
	    assert active (easyChoice.main_region._final_)
	}

	@Test
	operation test11 () {
	    enter
	    raise prepare
	    raise prepare
	    raise prepare
	    raise start
	    assert is_active
	    assert active (easyChoice.main_region.A_lot_of_times)
	}

	@Test
	operation test12 () {
	    enter
	    raise prepare
	    raise prepare
	    raise start
	    assert is_active
	    assert active (easyChoice.main_region.TwoTimes)
	}

	@Test
	operation test13 () {
	    enter
	    raise prepare
	    raise start
	    assert is_active
	    assert active (easyChoice.main_region.OneTime)
	}

	@Test
	operation test14 () {
	    enter
	    assert is_active
	    assert active (easyChoice.main_region.Start)
	}

	@Test
	operation test15 () {
	}

	@Test
	operation test16 () {
	    assert !active (easyChoice.main_region._final_)
	}

	@Test
	operation test17 () {
	    assert !active (easyChoice.main_region.A_lot_of_times)
	}

	@Test
	operation test18 () {
	    assert !active (easyChoice.main_region.OneTime)
	}

	@Test
	operation test19 () {
	    assert !active (easyChoice.main_region.TwoTimes)
	}

	@Test
	operation test20 () {
	    assert !active (easyChoice.main_region.Start)
	}

	@Test
	operation test21 () {
	    enter
	    raise prepare
	    raise prepare
	    raise prepare
	    raise start
	    raise start
	    assert is_active
	}

	@Test
	operation test22 () {
	    enter
	    raise prepare
	    raise prepare
	    raise start
	    raise start
	    assert is_active
	}

	@Test
	operation test23 () {
	    enter
	    raise prepare
	    raise start
	    raise end
	    assert is_active
	    assert is_final
	}

	@Test
	operation test24 () {
	    assert !is_final
	}

	@Test
	operation test25 () {
	    enter
	    assert is_active
	}

	@Test
	operation test26 () {
	    assert !is_active
	}

	@Test
	operation test27 () {
	    enter
	    raise prepare
	    raise prepare
	    raise start
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test28 () {
	    triggerWithoutEvent
	    assert !is_final
	}

	@Test
	operation test29 () {
	    enter
	    raise prepare
	    raise prepare
	    raise prepare
	    raise start
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test30 () {
	    enter
	    raise prepare
	    raise start
	    raise end
	    assert is_active
	    exit
	    assert !is_active
	}

}