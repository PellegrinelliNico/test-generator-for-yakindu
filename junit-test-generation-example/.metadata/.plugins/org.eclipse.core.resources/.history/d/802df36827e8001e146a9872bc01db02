/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 08:35:20 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.HistorySimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HistorySimplified_ESTest extends HistorySimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.runCycle();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.exit();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
      
      historySimplified0.exit();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseDeep_continue();
      historySimplified0.runCycle();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
      
      historySimplified0.exit();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseShallow_continue();
      historySimplified0.raiseNext();
      historySimplified0.runCycle();
      historySimplified0.enter();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseShallow_continue();
      historySimplified0.runCycle();
      historySimplified0.enter();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseShallow_continue();
      historySimplified0.raiseNext();
      historySimplified0.enter();
      historySimplified0.runCycle();
      historySimplified0.runCycle();
      historySimplified0.raiseDeep_continue();
      historySimplified0.enter();
      historySimplified0.runCycle();
      assertTrue(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseDeep_continue();
      historySimplified0.runCycle();
      historySimplified0.enter();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.enter();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertTrue(historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q2;
      historySimplified0.raiseShallow_continue();
      historySimplified0.runCycle();
      historySimplified0.enter();
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertTrue(historySimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseShallow_continue();
      historySimplified0.runCycle();
      historySimplified0.enter();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertTrue(historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q2;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q2_R2_Q2B;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q2_R2_Q2A;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q3;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.$NULLSTATE$;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q1;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      boolean boolean0 = historySimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.enter();
      boolean boolean0 = historySimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      boolean boolean0 = historySimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseStart();
      assertFalse(historySimplified0.isActive());
      
      historySimplified0.runCycle();
      historySimplified0.enter();
      assertTrue(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseDeep_continue();
      assertFalse(historySimplified0.isActive());
      
      historySimplified0.runCycle();
      historySimplified0.enter();
      HistorySimplified.State historySimplified_State0 = HistorySimplified.State.MAIN_REGION_ANSWERING_QUESTIONS_R1_Q1;
      boolean boolean0 = historySimplified0.isStateActive(historySimplified_State0);
      assertTrue(historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raiseNext();
      historySimplified0.enter();
      historySimplified0.raiseStart();
      historySimplified0.runCycle();
      historySimplified0.exit();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.raisePause();
      assertFalse(historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HistorySimplified historySimplified0 = new HistorySimplified();
      historySimplified0.enter();
      historySimplified0.raiseNext();
      historySimplified0.raiseShallow_continue();
      historySimplified0.runCycle();
      boolean boolean0 = historySimplified0.isFinal();
      assertTrue(historySimplified0.isActive());
      assertTrue(boolean0);
  }
}
