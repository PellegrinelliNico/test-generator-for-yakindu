/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 14 15:57:36 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.OperationsSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationsSimplified_ESTest extends OperationsSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      // Undeclared exception!
      try { 
        operationsSimplified0.isStateActive((OperationsSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.OperationsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      OperationsSimplified.I operationsSimplified_I0 = new OperationsSimplified.I(operationsSimplified0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      OperationsSimplified.State operationsSimplified_State0 = OperationsSimplified.State.$NULLSTATE$;
      boolean boolean0 = operationsSimplified0.isStateActive(operationsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      OperationsSimplified.State operationsSimplified_State0 = OperationsSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = operationsSimplified0.isStateActive(operationsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      OperationsSimplified.State operationsSimplified_State0 = OperationsSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = operationsSimplified0.isStateActive(operationsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      boolean boolean0 = operationsSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      // Undeclared exception!
      try { 
        operationsSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      boolean boolean0 = operationsSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      OperationsSimplified.I operationsSimplified_I0 = operationsSimplified0.i();
      // Undeclared exception!
      try { 
        operationsSimplified_I0.raiseB();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      operationsSimplified0.exit();
      assertFalse(operationsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      // Undeclared exception!
      try { 
        operationsSimplified0.raiseA();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperationsSimplified operationsSimplified0 = new OperationsSimplified();
      // Undeclared exception!
      try { 
        operationsSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationsSimplified", e);
      }
  }
}
