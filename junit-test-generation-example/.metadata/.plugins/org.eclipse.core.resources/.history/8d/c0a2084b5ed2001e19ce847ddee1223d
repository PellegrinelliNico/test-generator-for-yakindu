/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 23 14:41:33 GMT 2024
 */

package machines2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import machines2.SimpleSeriesSimplified;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleSeriesSimplified_ESTest extends SimpleSeriesSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      // Undeclared exception!
      try { 
        simpleSeriesSimplified0.isStateActive((SimpleSeriesSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("machines2.SimpleSeriesSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      simpleSeriesSimplified0.raiseEvent2();
      assertTrue(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent1();
      simpleSeriesSimplified0.raiseEvent3();
      assertTrue(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent3();
      assertTrue(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.exit();
      assertFalse(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      assertTrue(simpleSeriesSimplified0.isActive());
      
      simpleSeriesSimplified0.exit();
      assertFalse(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent1();
      assertTrue(simpleSeriesSimplified0.isActive());
      
      simpleSeriesSimplified0.exit();
      assertFalse(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      assertTrue(simpleSeriesSimplified0.isActive());
      
      simpleSeriesSimplified0.exit();
      assertFalse(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      simpleSeriesSimplified0.raiseEvent3();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertTrue(simpleSeriesSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertTrue(simpleSeriesSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent1();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertTrue(simpleSeriesSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertTrue(simpleSeriesSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.$NULLSTATE$;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      SimpleSeriesSimplified.State simpleSeriesSimplified_State0 = SimpleSeriesSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = simpleSeriesSimplified0.isStateActive(simpleSeriesSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      simpleSeriesSimplified0.raiseEvent3();
      boolean boolean0 = simpleSeriesSimplified0.isFinal();
      assertTrue(simpleSeriesSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      boolean boolean0 = simpleSeriesSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      boolean boolean0 = simpleSeriesSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      boolean boolean0 = simpleSeriesSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      simpleSeriesSimplified0.raiseEvent3();
      assertTrue(simpleSeriesSimplified0.isActive());
      
      simpleSeriesSimplified0.exit();
      assertFalse(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.triggerWithoutEvent();
      assertFalse(simpleSeriesSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      assertFalse(simpleSeriesSimplified0.isActive());
      
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent1();
      simpleSeriesSimplified0.raiseEvent2();
      assertTrue(simpleSeriesSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleSeriesSimplified simpleSeriesSimplified0 = new SimpleSeriesSimplified();
      simpleSeriesSimplified0.enter();
      simpleSeriesSimplified0.raiseEvent2();
      simpleSeriesSimplified0.raiseEvent3();
      simpleSeriesSimplified0.raiseEvent2();
      assertTrue(simpleSeriesSimplified0.isFinal());
  }
}
