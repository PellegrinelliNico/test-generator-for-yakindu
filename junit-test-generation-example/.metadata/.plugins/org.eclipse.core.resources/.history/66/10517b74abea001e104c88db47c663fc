/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TemporalEventsSimplified implements ITimed, IEventDriven {

    public enum State {

        MAIN_REGION_STATEA, MAIN_REGION_STATEB, MAIN_REGION__FINAL_, MAIN_REGION_ERR, $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[4];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public TemporalEventsSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart TemporalEvents */
        setTime(0l);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (this.operationCallback == null) {
            throw new IllegalStateException("Operation callback must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart TemporalEvents */
        /* 'default' enter sequence for region main region */
        /* Default react sequence for initial entry  */
        /* 'default' enter sequence for state StateA */
        /* Entry action for state 'StateA'. */
        timerService.setTimer(this, 0, (2l * 1000l), false);
        setTime(0l);
        stateVector[0] = State.MAIN_REGION_STATEA;
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart TemporalEvents */
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                /* Default exit sequence for state StateA */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'StateA'. */
                timerService.unsetTimer(this, 0);
                break;
            case MAIN_REGION_STATEB:
                /* Default exit sequence for state StateB */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'StateB'. */
                timerService.unsetTimer(this, 1);
                break;
            case MAIN_REGION__FINAL_:
                /* Default exit sequence for final state. */
                stateVector[0] = State.$NULLSTATE$;
                break;
            case MAIN_REGION_ERR:
                /* Default exit sequence for state ERR */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'ERR'. */
                timerService.unsetTimer(this, 2);
                timerService.unsetTimer(this, 3);
                break;
            default:
                break;
        }
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return (stateVector[0] == State.MAIN_REGION__FINAL_);
    }

    private void clearInEvents() {
        stop = false;
        check = false;
        next = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
        timeEvents[2] = false;
        timeEvents[3] = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                main_region_StateA_react(-1l);
                break;
            case MAIN_REGION_STATEB:
                main_region_StateB_react(-1l);
                break;
            case MAIN_REGION__FINAL_:
                main_region__final__react(-1l);
                break;
            case MAIN_REGION_ERR:
                main_region_ERR_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (this.operationCallback == null) {
            throw new IllegalStateException("Operation callback must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_STATEA:
                return stateVector[0] == State.MAIN_REGION_STATEA;
            case MAIN_REGION_STATEB:
                return stateVector[0] == State.MAIN_REGION_STATEB;
            case MAIN_REGION__FINAL_:
                return stateVector[0] == State.MAIN_REGION__FINAL_;
            case MAIN_REGION_ERR:
                return stateVector[0] == State.MAIN_REGION_ERR;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    public interface OperationCallback {

        public long setTime(long t);
    }

    private OperationCallback operationCallback;

    public void setOperationCallback(OperationCallback operationCallback) {
        this.operationCallback = operationCallback;
    }

    private boolean stop;

    public void raiseStop() {
        inEventQueue.add(() -> {
            stop = true;
        });
        runCycle();
    }

    private boolean check;

    public void raiseCheck() {
        inEventQueue.add(() -> {
            check = true;
        });
        runCycle();
    }

    private boolean next;

    public void raiseNext() {
        inEventQueue.add(() -> {
            next = true;
        });
        runCycle();
    }

    private boolean message;

    private String messageValue;

    private void raiseMessage(String value) {
        messageValue = value;
        message = true;
        messageObservable.next(value);
    }

    private Observable<String> messageObservable = new Observable<String>();

    private Observable<String> getMessage() {
        return messageObservable;
    }

    private long time;

    private long getTime() {
        return time;
    }

    private void setTime(long value) {
        this.time = value;
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_StateA_react(long transitioned_before) {
        /* The reactions of state StateA. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[0]) {
                /* Default exit sequence for state StateA */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'StateA'. */
                timerService.unsetTimer(this, 0);
                setTime(operationCallback.setTime(2l));
                timeEvents[0] = false;
                /* 'default' enter sequence for state StateB */
                /* Entry action for state 'StateB'. */
                timerService.setTimer(this, 1, (1l * 1000l), true);
                stateVector[0] = State.MAIN_REGION_STATEB;
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateB_react(long transitioned_before) {
        /* The reactions of state StateB. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (stop) {
                /* Default exit sequence for state StateB */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'StateB'. */
                timerService.unsetTimer(this, 1);
                /* Default enter sequence for final state */
                stateVector[0] = State.MAIN_REGION__FINAL_;
                transitioned_after = 0l;
            } else {
                if (((check) && (getTime() >= 10l))) {
                    /* Default exit sequence for state StateB */
                    stateVector[0] = State.$NULLSTATE$;
                    /* Exit action for state 'StateB'. */
                    timerService.unsetTimer(this, 1);
                    raiseMessage("WARN");
                    /* 'default' enter sequence for state StateB */
                    /* Entry action for state 'StateB'. */
                    timerService.setTimer(this, 1, (1l * 1000l), true);
                    stateVector[0] = State.MAIN_REGION_STATEB;
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (next) {
                        /* Default exit sequence for state StateB */
                        stateVector[0] = State.$NULLSTATE$;
                        /* Exit action for state 'StateB'. */
                        timerService.unsetTimer(this, 1);
                        /* 'default' enter sequence for state ERR */
                        /* Entry action for state 'ERR'. */
                        timerService.setTimer(this, 2, (5l * 1000l), false);
                        timerService.setTimer(this, 3, 500l, true);
                        stateVector[0] = State.MAIN_REGION_ERR;
                        react(0l);
                        transitioned_after = 0l;
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (timeEvents[1]) {
                time++;
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region__final__react(long transitioned_before) {
        /* The reactions of state null. */
        return react(transitioned_before);
    }

    private long main_region_ERR_react(long transitioned_before) {
        /* The reactions of state ERR. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[2]) {
                /* Default exit sequence for state ERR */
                stateVector[0] = State.$NULLSTATE$;
                /* Exit action for state 'ERR'. */
                timerService.unsetTimer(this, 2);
                timerService.unsetTimer(this, 3);
                timeEvents[2] = false;
                /* Default enter sequence for final state */
                stateVector[0] = State.MAIN_REGION__FINAL_;
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (timeEvents[3]) {
                raiseMessage("ERROR");
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
