/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 11 15:16:40 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.EasyChoice;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EasyChoice_ESTest extends EasyChoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.setValue((-1832L));
      easyChoice0.raiseStart();
      assertTrue(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setIsExecuting(true);
      easyChoice0.raiseEnd();
      boolean boolean0 = easyChoice0.nextEvent();
      assertTrue(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.nextEvent();
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setValue(461L);
      long long0 = easyChoice0.getValue();
      assertEquals(461L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setValue((-1081L));
      long long0 = easyChoice0.getValue();
      assertEquals((-1081L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setIsExecuting(true);
      boolean boolean0 = easyChoice0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      boolean boolean0 = easyChoice0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      // Undeclared exception!
      try { 
        easyChoice0.isStateActive((EasyChoice.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.EasyChoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.setIsExecuting(true);
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raiseEnd();
      easyChoice0.raiseEnd();
      easyChoice0.setIsExecuting(false);
      easyChoice0.triggerWithoutEvent();
      assertTrue(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.setIsExecuting(true);
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raiseEnd();
      easyChoice0.setIsExecuting(false);
      easyChoice0.triggerWithoutEvent();
      assertEquals(20L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      long long0 = easyChoice0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raisePrepare();
      assertTrue(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raiseStart();
      assertTrue(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raiseStart();
      assertTrue(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.exit();
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.setValue(3721L);
      easyChoice0.raiseStart();
      easyChoice0.exit();
      assertEquals(3721L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.setValue(20L);
      easyChoice0.raiseStart();
      easyChoice0.exit();
      assertEquals(20L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.exit();
      assertEquals(10L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      assertTrue(easyChoice0.isActive());
      
      easyChoice0.exit();
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raiseEnd();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION__FINAL_;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertTrue(easyChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_A_LOT_OF_TIMES;
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertTrue(easyChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_TWOTIMES;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertTrue(easyChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_ONETIME;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertTrue(easyChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_START;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertTrue(easyChoice0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.$NULLSTATE$;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertEquals(0L, easyChoice0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION__FINAL_;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_A_LOT_OF_TIMES;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_ONETIME;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_TWOTIMES;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      EasyChoice.State easyChoice_State0 = EasyChoice.State.MAIN_REGION_START;
      boolean boolean0 = easyChoice0.isStateActive(easyChoice_State0);
      assertEquals(0L, easyChoice0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setIsExecuting(true);
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.setIsExecuting(false);
      assertFalse(easyChoice0.isActive());
      
      easyChoice0.triggerWithoutEvent();
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      boolean boolean0 = easyChoice0.isFinal();
      assertFalse(boolean0);
      assertFalse(easyChoice0.isActive());
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      assertFalse(easyChoice0.isActive());
      
      easyChoice0.enter();
      boolean boolean0 = easyChoice0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      boolean boolean0 = easyChoice0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setIsExecuting(true);
      easyChoice0.exit();
      assertFalse(easyChoice0.isActive());
      assertEquals(0L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setValue(1L);
      easyChoice0.enter();
      easyChoice0.raiseStart();
      easyChoice0.raiseEnd();
      assertTrue(easyChoice0.isFinal());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raiseEnd();
      easyChoice0.exit();
      assertEquals(10L, easyChoice0.getValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.setIsExecuting(true);
      easyChoice0.enter();
      assertEquals(0L, easyChoice0.getValue());
      assertFalse(easyChoice0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EasyChoice easyChoice0 = new EasyChoice();
      easyChoice0.enter();
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raisePrepare();
      easyChoice0.raiseStart();
      easyChoice0.raisePrepare();
      assertEquals(30L, easyChoice0.getValue());
  }
}
