/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 14 15:56:27 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Operations;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Operations_ESTest extends Operations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = new Operations.I(operations0);
      operations0.i = operations_I0;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.setIsExecuting(true);
      operations_I0.raiseB();
      boolean boolean0 = operations0.nextEvent();
      assertEquals(0L, operations0.getVal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.nextEvent();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.i = null;
      operations0.i();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.setVal(3415L);
      long long0 = operations0.getVal();
      assertEquals(3415L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.setIsExecuting(true);
      boolean boolean0 = operations0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Operations operations0 = new Operations();
      boolean boolean0 = operations0.getIsExecuting();
      assertEquals(0L, operations0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.i = null;
      // Undeclared exception!
      try { 
        operations0.triggerWithoutEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Operations$I", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Operations operations0 = new Operations();
      // Undeclared exception!
      try { 
        operations0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.Operations", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.i = null;
      // Undeclared exception!
      try { 
        operations0.raiseA();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Operations$I", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Operations operations0 = new Operations();
      // Undeclared exception!
      try { 
        operations0.isStateActive((Operations.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Operations", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.i = null;
      // Undeclared exception!
      try { 
        operations0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Operations$I", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Operations operations0 = new Operations();
      assertEquals(0L, operations0.getVal());
      
      operations0.setVal((-1L));
      long long0 = operations0.getVal();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(operations_I_OperationCallback0).op2();
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.enter();
      operations0.raiseA();
      operations_I0.raiseB();
      assertTrue(operations0.isActive());
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(16L).when(operations_I_OperationCallback0).op2();
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.setIsExecuting(true);
      operations_I0.raiseB();
      operations0.setIsExecuting(false);
      operations0.enter();
      operations0.raiseA();
      assertTrue(operations0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.exit();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(16L).when(operations_I_OperationCallback0).op2();
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.enter();
      operations0.raiseA();
      Operations.State operations_State0 = Operations.State.MAIN_REGION_STATEB;
      boolean boolean0 = operations0.isStateActive(operations_State0);
      assertTrue(operations0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = new Operations.I(operations0);
      operations0.i = operations_I0;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.enter();
      Operations.State operations_State0 = Operations.State.MAIN_REGION_STATEA;
      boolean boolean0 = operations0.isStateActive(operations_State0);
      assertTrue(operations0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.State operations_State0 = Operations.State.MAIN_REGION_STATEB;
      boolean boolean0 = operations0.isStateActive(operations_State0);
      assertFalse(boolean0);
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.State operations_State0 = Operations.State.$NULLSTATE$;
      boolean boolean0 = operations0.isStateActive(operations_State0);
      assertEquals(0L, operations0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.State operations_State0 = Operations.State.MAIN_REGION_STATEA;
      boolean boolean0 = operations0.isStateActive(operations_State0);
      assertEquals(0L, operations0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.setIsExecuting(true);
      operations_I0.raiseB();
      operations0.setIsExecuting(false);
      operations0.raiseA();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.i.setOperationCallback(operations_I_OperationCallback0);
      // Undeclared exception!
      try { 
        operations0.raiseA();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Operations", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(operations_I_OperationCallback0).op2();
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.enter();
      operations0.raiseA();
      operations0.raiseA();
      assertTrue(operations0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.setOperationCallback(operations_OperationCallback0);
      Operations.I operations_I0 = operations0.i;
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      operations0.enter();
      boolean boolean0 = operations0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Operations operations0 = new Operations();
      boolean boolean0 = operations0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.i.setOperationCallback(operations_I_OperationCallback0);
      operations0.setOperationCallback(operations_OperationCallback0);
      operations0.setIsExecuting(true);
      operations0.enter();
      assertFalse(operations0.isActive());
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Operations operations0 = new Operations();
      // Undeclared exception!
      try { 
        operations0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.Operations", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(operations_I_OperationCallback0).op2();
      operations0.i.setOperationCallback(operations_I_OperationCallback0);
      operations0.setOperationCallback(operations_OperationCallback0);
      operations0.enter();
      operations0.raiseA();
      assertTrue(operations0.isActive());
      
      operations0.exit();
      assertFalse(operations0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Operations operations0 = new Operations();
      boolean boolean0 = operations0.isFinal();
      assertFalse(boolean0);
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.i.setOperationCallback(operations_I_OperationCallback0);
      operations0.setOperationCallback(operations_OperationCallback0);
      operations0.enter();
      assertTrue(operations0.isActive());
      
      operations0.exit();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.OperationCallback operations_OperationCallback0 = mock(Operations.OperationCallback.class, new ViolatedAssumptionAnswer());
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations0.i.setOperationCallback(operations_I_OperationCallback0);
      operations0.setOperationCallback(operations_OperationCallback0);
      assertFalse(operations0.isActive());
      
      operations0.triggerWithoutEvent();
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Operations operations0 = new Operations();
      long long0 = operations0.getVal();
      assertFalse(operations0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Operations operations0 = new Operations();
      operations0.setIsExecuting(true);
      operations0.exit();
      assertFalse(operations0.isActive());
      assertEquals(0L, operations0.getVal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Operations operations0 = new Operations();
      Operations.I operations_I0 = operations0.i();
      Operations.I.OperationCallback operations_I_OperationCallback0 = mock(Operations.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operations_I0.setOperationCallback(operations_I_OperationCallback0);
      // Undeclared exception!
      try { 
        operations0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Operations", e);
      }
  }
}
