/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class EasyChoiceSimplified implements ICycleBased {

    private static class EvBuf {

        private boolean end;

        private boolean start;

        private boolean prepare;
    }

    private static class EasyChoiceEvBuf {

        private EvBuf iface = new EvBuf();
    }

    public enum State {

        MAIN_REGION_START,
        MAIN_REGION_ONETIME,
        MAIN_REGION_TWOTIMES,
        MAIN_REGION_A_LOT_OF_TIMES,
        MAIN_REGION__FINAL_,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private EasyChoiceEvBuf current = new EasyChoiceEvBuf();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    private boolean stateConfVectorChanged;

    private boolean getStateConfVectorChanged() {
        return stateConfVectorChanged;
    }

    private void setStateConfVectorChanged(boolean value) {
        this.stateConfVectorChanged = value;
    }

    public EasyChoiceSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart EasyChoice */
        setValue(0l);
        isExecuting = false;
    }

    public void runCycle() {
        /* Performs a 'run to completion' step. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        swapInEvents();
        do {
            stateConfVectorChanged = false;
            microStep();
        } while (getStateConfVectorChanged());
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart EasyChoice */
        enterSequence_main_region_default();
        do {
            stateConfVectorChanged = false;
            microStep();
        } while (getStateConfVectorChanged());
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart EasyChoice */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return (stateVector[0] == State.MAIN_REGION__FINAL_);
    }

    private void swapInEvents() {
        current.iface.end = end;
        end = false;
        current.iface.start = start;
        start = false;
        current.iface.prepare = prepare;
        prepare = false;
    }

    private void clearInEvents() {
        end = false;
        start = false;
        prepare = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_START:
                main_region_Start_react(-1l);
                break;
            case MAIN_REGION_ONETIME:
                main_region_OneTime_react(-1l);
                break;
            case MAIN_REGION_TWOTIMES:
                main_region_TwoTimes_react(-1l);
                break;
            case MAIN_REGION_A_LOT_OF_TIMES:
                main_region_A_lot_of_times_react(-1l);
                break;
            case MAIN_REGION__FINAL_:
                main_region__final__react(-1l);
                break;
            default:
                break;
        }
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_START:
                return stateVector[0] == State.MAIN_REGION_START;
            case MAIN_REGION_ONETIME:
                return stateVector[0] == State.MAIN_REGION_ONETIME;
            case MAIN_REGION_TWOTIMES:
                return stateVector[0] == State.MAIN_REGION_TWOTIMES;
            case MAIN_REGION_A_LOT_OF_TIMES:
                return stateVector[0] == State.MAIN_REGION_A_LOT_OF_TIMES;
            case MAIN_REGION__FINAL_:
                return stateVector[0] == State.MAIN_REGION__FINAL_;
            default:
                return false;
        }
    }

    private boolean end;

    public void raiseEnd() {
        end = true;
    }

    private boolean start;

    public void raiseStart() {
        start = true;
    }

    private boolean prepare;

    public void raisePrepare() {
        prepare = true;
    }

    private long value;

    private long getValue() {
        return value;
    }

    private void setValue(long value) {
        this.value = value;
    }

    /* 'default' enter sequence for state Start */
    private void enterSequence_main_region_Start_default() {
        /* 'default' enter sequence for state Start */
        stateVector[0] = State.MAIN_REGION_START;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state OneTime */
    private void enterSequence_main_region_OneTime_default() {
        /* 'default' enter sequence for state OneTime */
        stateVector[0] = State.MAIN_REGION_ONETIME;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state TwoTimes */
    private void enterSequence_main_region_TwoTimes_default() {
        /* 'default' enter sequence for state TwoTimes */
        stateVector[0] = State.MAIN_REGION_TWOTIMES;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state A lot of times */
    private void enterSequence_main_region_A_lot_of_times_default() {
        /* 'default' enter sequence for state A lot of times */
        stateVector[0] = State.MAIN_REGION_A_LOT_OF_TIMES;
        stateConfVectorChanged = true;
    }

    /* Default enter sequence for final state */
    private void enterSequence_main_region__final__default() {
        /* Default enter sequence for final state */
        stateVector[0] = State.MAIN_REGION__FINAL_;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state Start */
    private void exitSequence_main_region_Start() {
        /* Default exit sequence for state Start */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state OneTime */
    private void exitSequence_main_region_OneTime() {
        /* Default exit sequence for state OneTime */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state TwoTimes */
    private void exitSequence_main_region_TwoTimes() {
        /* Default exit sequence for state TwoTimes */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state A lot of times */
    private void exitSequence_main_region_A_lot_of_times() {
        /* Default exit sequence for state A lot of times */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for final state. */
    private void exitSequence_main_region__final_() {
        /* Default exit sequence for final state. */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_START:
                exitSequence_main_region_Start();
                break;
            case MAIN_REGION_ONETIME:
                exitSequence_main_region_OneTime();
                break;
            case MAIN_REGION_TWOTIMES:
                exitSequence_main_region_TwoTimes();
                break;
            case MAIN_REGION_A_LOT_OF_TIMES:
                exitSequence_main_region_A_lot_of_times();
                break;
            case MAIN_REGION__FINAL_:
                exitSequence_main_region__final_();
                break;
            default:
                break;
        }
    }

    /* The reactions of state null. */
    private void react_main_region__choice_0() {
        /* The reactions of state null. */
        if (getValue() == 10l) {
            enterSequence_main_region_OneTime_default();
        } else {
            if (getValue() == 20l) {
                enterSequence_main_region_TwoTimes_default();
            } else {
                enterSequence_main_region_A_lot_of_times_default();
            }
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_Start_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_Start_react(long transitioned_before) {
        /* The reactions of state Start. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((current.iface.start) && (getValue() > 0l))) {
                exitSequence_main_region_Start();
                react_main_region__choice_0();
                transitioned_after = 0l;
            } else {
                if (current.iface.prepare) {
                    exitSequence_main_region_Start();
                    setValue(getValue() + 10l);
                    enterSequence_main_region_Start_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_OneTime_react(long transitioned_before) {
        /* The reactions of state OneTime. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.end) {
                exitSequence_main_region_OneTime();
                enterSequence_main_region__final__default();
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_TwoTimes_react(long transitioned_before) {
        /* The reactions of state TwoTimes. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.end) {
                exitSequence_main_region_TwoTimes();
                enterSequence_main_region__final__default();
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_A_lot_of_times_react(long transitioned_before) {
        /* The reactions of state A lot of times. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.end) {
                exitSequence_main_region_A_lot_of_times();
                enterSequence_main_region__final__default();
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region__final__react(long transitioned_before) {
        /* The reactions of state null. */
        return react(transitioned_before);
    }
}
