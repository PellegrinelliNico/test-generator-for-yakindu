/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 21 16:15:15 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.ControllerSimplified;
import statechart.SimpleLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControllerSimplified_ESTest extends ControllerSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      // Undeclared exception!
      try { 
        controllerSimplified0.isStateActive((ControllerSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      SimpleLight simpleLight0 = controllerSimplified0.getSL1();
      assertNull(simpleLight0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      ControllerSimplified.State controllerSimplified_State0 = ControllerSimplified.State.$NULLSTATE$;
      boolean boolean0 = controllerSimplified0.isStateActive(controllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      ControllerSimplified.State controllerSimplified_State0 = ControllerSimplified.State.MAIN_REGION_LIGHT_2;
      boolean boolean0 = controllerSimplified0.isStateActive(controllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      ControllerSimplified.State controllerSimplified_State0 = ControllerSimplified.State.MAIN_REGION_LIGHT_1;
      boolean boolean0 = controllerSimplified0.isStateActive(controllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      ControllerSimplified.State controllerSimplified_State0 = ControllerSimplified.State.MAIN_REGION_ON;
      boolean boolean0 = controllerSimplified0.isStateActive(controllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      ControllerSimplified.State controllerSimplified_State0 = ControllerSimplified.State.MAIN_REGION_OFF;
      boolean boolean0 = controllerSimplified0.isStateActive(controllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      boolean boolean0 = controllerSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.exit();
      assertFalse(controllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.raiseDec();
      assertFalse(controllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.raiseControl2();
      assertFalse(controllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.triggerWithoutEvent();
      assertFalse(controllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.raiseInc();
      assertFalse(controllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.raiseControl1();
      assertFalse(controllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.raisePowerOn();
      assertFalse(controllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      // Undeclared exception!
      try { 
        controllerSimplified0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      controllerSimplified0.getSL2();
      assertFalse(controllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ControllerSimplified controllerSimplified0 = new ControllerSimplified();
      boolean boolean0 = controllerSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(controllerSimplified0.isActive());
  }
}
