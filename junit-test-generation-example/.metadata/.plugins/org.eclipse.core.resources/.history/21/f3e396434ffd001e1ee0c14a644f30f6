/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 18 06:42:03 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.VirtualTimer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TemporalEvents2Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TemporalEvents2Simplified_ESTest extends TemporalEvents2Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.raiseTimeEvent(0);
      assertFalse(temporalEvents2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer(1000L);
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      ITimerService iTimerService0 = temporalEvents2Simplified0.getTimerService();
      assertSame(iTimerService0, virtualTimer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.isStateActive((TemporalEvents2Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TemporalEvents2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      temporalEvents2Simplified0.enter();
      temporalEvents2Simplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TemporalEvents2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.exit();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEO;
      temporalEvents2Simplified0.enter();
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertTrue(temporalEvents2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATED;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEO;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.$NULLSTATE$;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      temporalEvents2Simplified0.enter();
      boolean boolean0 = temporalEvents2Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      boolean boolean0 = temporalEvents2Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.raiseC();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.raiseTimeEvent((-3011));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3011
         //
         verifyException("statechart.TemporalEvents2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      temporalEvents2Simplified0.enter();
      temporalEvents2Simplified0.runCycle();
      assertTrue(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.raiseD();
      assertFalse(temporalEvents2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.raiseB();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      temporalEvents2Simplified0.runCycle();
      assertFalse(temporalEvents2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents2Simplified0.setTimerService(virtualTimer0);
      temporalEvents2Simplified0.enter();
      assertTrue(temporalEvents2Simplified0.isActive());
      
      temporalEvents2Simplified0.exit();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      boolean boolean0 = temporalEvents2Simplified0.isFinal();
      assertFalse(temporalEvents2Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.getTimerService();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.raiseA();
      assertFalse(temporalEvents2Simplified0.isActive());
  }
}
