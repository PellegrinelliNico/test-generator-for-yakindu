/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 19 15:02:12 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import com.yakindu.core.TimerService;
import statechart.TemporalEvents2Simplified;

public class TemporalEvents2Simplified_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      boolean boolean0 = temporalEvents2Simplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.enter();
      assertTrue(temporalEvents2Simplified0.isActive());
      
      temporalEvents2Simplified0.exit();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      assertFalse(temporalEvents2Simplified0.isActive());
      
      temporalEvents2Simplified0.enter();
      temporalEvents2Simplified0.triggerWithoutEvent();
      assertTrue(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.raiseTimeEvent(5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      temporalEvents2Simplified0.exit();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.triggerWithoutEvent();
      timerService0.setTimer(temporalEvents2Simplified0, 1589, 0L, false);
      temporalEvents2Simplified0.exit();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      boolean boolean0 = temporalEvents2Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.enter();
      boolean boolean0 = temporalEvents2Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.triggerWithoutEvent();
      timerService0.setTimer(temporalEvents2Simplified0, 1589, 0L, false);
      temporalEvents2Simplified0.triggerWithoutEvent();
      assertFalse(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      timerService0.setTimer(temporalEvents2Simplified0, 4, 0L, false);
      temporalEvents2Simplified0.raiseTimeEvent(5);
      assertFalse(temporalEvents2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.$NULLSTATE$;
      temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      temporalEvents2Simplified0.exit();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.triggerWithoutEvent();
      temporalEvents2Simplified0.raiseTimeEvent(5);
      temporalEvents2Simplified0.exit();
      timerService0.setTimer(temporalEvents2Simplified0, 5, 0L, false);
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.enter();
      assertTrue(temporalEvents2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEO;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATED;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      temporalEvents2Simplified0.enter();
      TemporalEvents2Simplified.State temporalEvents2Simplified_State0 = TemporalEvents2Simplified.State.MAIN_REGION_STATEO;
      boolean boolean0 = temporalEvents2Simplified0.isStateActive(temporalEvents2Simplified_State0);
      assertTrue(temporalEvents2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      timerService0.cancel();
      temporalEvents2Simplified0.setTimerService(timerService0);
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.isStateActive((TemporalEvents2Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.raiseTimeEvent((-1489));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1489
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      TimerService timerService0 = new TimerService();
      temporalEvents2Simplified0.setTimerService(timerService0);
      timerService0.setTimer(temporalEvents2Simplified0, (-19), 0L, false);
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.triggerWithoutEvent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemporalEvents2Simplified temporalEvents2Simplified0 = new TemporalEvents2Simplified();
      // Undeclared exception!
      try { 
        temporalEvents2Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
      }
  }
}
