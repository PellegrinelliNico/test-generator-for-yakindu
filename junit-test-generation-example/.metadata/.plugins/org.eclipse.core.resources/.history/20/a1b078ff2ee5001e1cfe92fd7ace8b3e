/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 15 12:43:22 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.TimerService;
import com.yakindu.core.VirtualTimer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TemporalEvents;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TemporalEvents_ESTest extends TemporalEvents_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      VirtualTimer virtualTimer0 = new VirtualTimer((-7));
      temporalEvents0.setTimerService(virtualTimer0);
      temporalEvents0.raiseTimeEvent(2);
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      temporalEvents0.setTimerService(timerService0);
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.raiseStop();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      temporalEvents0.setTimerService(timerService0);
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setIsExecuting(true);
      temporalEvents0.raiseCheck();
      boolean boolean0 = temporalEvents0.nextEvent();
      assertTrue(boolean0);
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.nextEvent();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      temporalEvents0.setTimerService(timerService0);
      temporalEvents0.getTimerService();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      assertEquals(0L, temporalEvents0.getTime());
      
      temporalEvents0.setTime(1L);
      long long0 = temporalEvents0.getTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.setIsExecuting(true);
      boolean boolean0 = temporalEvents0.getIsExecuting();
      assertEquals(0L, temporalEvents0.getTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      boolean boolean0 = temporalEvents0.getIsExecuting();
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      VirtualTimer virtualTimer0 = new VirtualTimer((-7));
      temporalEvents0.setTimerService(virtualTimer0);
      // Undeclared exception!
      try { 
        temporalEvents0.raiseTimeEvent((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.isStateActive((TemporalEvents.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      timerService0.cancel();
      temporalEvents0.setTimerService(timerService0);
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      // Undeclared exception!
      try { 
        temporalEvents0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.setTime((-443L));
      long long0 = temporalEvents0.getTime();
      assertEquals((-443L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.exit();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setTimerService(virtualTimer0);
      temporalEvents0.enter();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.MAIN_REGION_STATEA;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertTrue(temporalEvents0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.$NULLSTATE$;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertFalse(boolean0);
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.MAIN_REGION_ERR;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.MAIN_REGION__FINAL_;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.MAIN_REGION_STATEB;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TemporalEvents.State temporalEvents_State0 = TemporalEvents.State.MAIN_REGION_STATEA;
      boolean boolean0 = temporalEvents0.isStateActive(temporalEvents_State0);
      assertFalse(boolean0);
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      temporalEvents0.setTimerService(timerService0);
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setIsExecuting(true);
      temporalEvents0.triggerWithoutEvent();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer(2710L);
      temporalEvents0.setTimerService(virtualTimer0);
      // Undeclared exception!
      try { 
        temporalEvents0.raiseNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setTimerService(virtualTimer0);
      assertFalse(temporalEvents0.isActive());
      
      temporalEvents0.raiseNext();
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      boolean boolean0 = temporalEvents0.isFinal();
      assertFalse(temporalEvents0.isActive());
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setTimerService(virtualTimer0);
      assertFalse(temporalEvents0.isActive());
      
      temporalEvents0.enter();
      boolean boolean0 = temporalEvents0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      boolean boolean0 = temporalEvents0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.setIsExecuting(true);
      temporalEvents0.exit();
      assertFalse(temporalEvents0.isActive());
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      TimerService timerService0 = new TimerService();
      temporalEvents0.setTimerService(timerService0);
      temporalEvents0.setIsExecuting(true);
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.enter();
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      temporalEvents0.setTimerService(virtualTimer0);
      // Undeclared exception!
      try { 
        temporalEvents0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      long long0 = temporalEvents0.getTime();
      assertEquals(0L, long0);
      assertFalse(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.getMessage();
      assertFalse(temporalEvents0.isActive());
      assertEquals(0L, temporalEvents0.getTime());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.getTimerService();
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setTimerService(virtualTimer0);
      assertFalse(temporalEvents0.isActive());
      
      temporalEvents0.enter();
      temporalEvents0.triggerWithoutEvent();
      assertTrue(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.raiseTimeEvent((-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.raiseStop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      VirtualTimer virtualTimer0 = new VirtualTimer();
      TemporalEvents.OperationCallback temporalEvents_OperationCallback0 = mock(TemporalEvents.OperationCallback.class, new ViolatedAssumptionAnswer());
      temporalEvents0.setOperationCallback(temporalEvents_OperationCallback0);
      temporalEvents0.setTimerService(virtualTimer0);
      temporalEvents0.enter();
      assertTrue(temporalEvents0.isActive());
      
      temporalEvents0.exit();
      assertFalse(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      temporalEvents0.raiseMessage("");
      assertEquals(0L, temporalEvents0.getTime());
      assertFalse(temporalEvents0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TemporalEvents temporalEvents0 = new TemporalEvents();
      // Undeclared exception!
      try { 
        temporalEvents0.raiseCheck();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TemporalEvents", e);
      }
  }
}
