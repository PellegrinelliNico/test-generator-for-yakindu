/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 21 13:15:12 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TriggersSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriggersSimplified_ESTest extends TriggersSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      TriggersSimplified.Intf triggersSimplified_Intf0 = new TriggersSimplified.Intf(triggersSimplified0);
      triggersSimplified_Intf0.raiseEvery_oncycle();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      TriggersSimplified.Intf triggersSimplified_Intf0 = triggersSimplified0.intf();
      triggersSimplified_Intf0.raiseEvent_Name();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      TriggersSimplified.Intf triggersSimplified_Intf0 = triggersSimplified0.intf();
      triggersSimplified_Intf0.raiseB();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      TriggersSimplified.Intf triggersSimplified_Intf0 = triggersSimplified0.intf();
      triggersSimplified_Intf0.raiseA();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.triggerWithoutEvent();
      assertFalse(triggersSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.raiseTimeEvent(0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.raiseAfterX();
      assertFalse(triggersSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        triggersSimplified0.raiseTimeEvent(2333);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2333
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.isStateActive((TriggersSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.enter();
      triggersSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        triggersSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      triggersSimplified0.exit();
      assertFalse(triggersSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.enter();
      assertTrue(triggersSimplified0.isActive());
      
      triggersSimplified0.exit();
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      assertFalse(triggersSimplified0.isActive());
      
      triggersSimplified0.enter();
      triggersSimplified0.raiseEvery200ns();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      assertFalse(triggersSimplified0.isActive());
      
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEA;
      triggersSimplified0.enter();
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.$NULLSTATE$;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(triggersSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEF;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(boolean0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEE;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(boolean0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(triggersSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(boolean0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATED;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(triggersSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      TriggersSimplified.State triggersSimplified_State0 = TriggersSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = triggersSimplified0.isStateActive(triggersSimplified_State0);
      assertFalse(boolean0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      assertFalse(triggersSimplified0.isActive());
      
      triggersSimplified0.enter();
      boolean boolean0 = triggersSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      boolean boolean0 = triggersSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.raiseEvery200ns();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      boolean boolean0 = triggersSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(triggersSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.raiseAfterX();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      // Undeclared exception!
      try { 
        triggersSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TriggersSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TriggersSimplified triggersSimplified0 = new TriggersSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      triggersSimplified0.setTimerService(iTimerService0);
      triggersSimplified0.enter();
      TriggersSimplified.Intf triggersSimplified_Intf0 = new TriggersSimplified.Intf(triggersSimplified0);
      triggersSimplified_Intf0.raiseOncycle_1();
      assertTrue(triggersSimplified0.isActive());
      
      triggersSimplified0.exit();
      assertFalse(triggersSimplified0.isActive());
  }
}
