/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 08:56:57 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.OperationTestSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationTestSimplified_ESTest extends OperationTestSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      operationTestSimplified0.raiseA();
      OperationTestSimplified.OperationCallback operationTestSimplified_OperationCallback0 = mock(OperationTestSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified0.setOperationCallback(operationTestSimplified_OperationCallback0);
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(operationTestSimplified_I_OperationCallback0).op2();
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      operationTestSimplified_I0.raiseB();
      operationTestSimplified0.runCycle();
      operationTestSimplified0.enter();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperationTestSimplified.I operationTestSimplified_I0 = new OperationTestSimplified.I();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.State operationTestSimplified_State0 = OperationTestSimplified.State.MAIN_REGION_STATEB;
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(operationTestSimplified_I_OperationCallback0).op2();
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      OperationTestSimplified.OperationCallback operationTestSimplified_OperationCallback0 = mock(OperationTestSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified0.setOperationCallback(operationTestSimplified_OperationCallback0);
      operationTestSimplified0.raiseA();
      operationTestSimplified0.enter();
      operationTestSimplified0.runCycle();
      boolean boolean0 = operationTestSimplified0.isStateActive(operationTestSimplified_State0);
      assertTrue(operationTestSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.State operationTestSimplified_State0 = OperationTestSimplified.State.$NULLSTATE$;
      boolean boolean0 = operationTestSimplified0.isStateActive(operationTestSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.State operationTestSimplified_State0 = OperationTestSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = operationTestSimplified0.isStateActive(operationTestSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.State operationTestSimplified_State0 = OperationTestSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = operationTestSimplified0.isStateActive(operationTestSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.OperationCallback operationTestSimplified_OperationCallback0 = mock(OperationTestSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified0.setOperationCallback(operationTestSimplified_OperationCallback0);
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      operationTestSimplified0.enter();
      boolean boolean0 = operationTestSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      boolean boolean0 = operationTestSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      // Undeclared exception!
      try { 
        operationTestSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.OperationTestSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      // Undeclared exception!
      try { 
        operationTestSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationTestSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      // Undeclared exception!
      try { 
        operationTestSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.OperationTestSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      // Undeclared exception!
      try { 
        operationTestSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface I must be set.
         //
         verifyException("statechart.OperationTestSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
          OperationTestSimplified.OperationCallback operationTestSimplified_OperationCallback0 = mock(OperationTestSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
          operationTestSimplified0.setOperationCallback(operationTestSimplified_OperationCallback0);
          OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
          OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
          doReturn(0L, 0L, 0L, 0L, 0L).when(operationTestSimplified_I_OperationCallback0).op2();
          operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
          operationTestSimplified_I0.raiseB();
          operationTestSimplified0.enter();
          operationTestSimplified0.raiseA();
          // Undeclared exception!
          operationTestSimplified0.runCycle();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      OperationTestSimplified.I operationTestSimplified_I0 = operationTestSimplified0.i();
      OperationTestSimplified.I.OperationCallback operationTestSimplified_I_OperationCallback0 = mock(OperationTestSimplified.I.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified_I0.setOperationCallback(operationTestSimplified_I_OperationCallback0);
      OperationTestSimplified.OperationCallback operationTestSimplified_OperationCallback0 = mock(OperationTestSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operationTestSimplified0.setOperationCallback(operationTestSimplified_OperationCallback0);
      operationTestSimplified0.enter();
      assertTrue(operationTestSimplified0.isActive());
      
      operationTestSimplified0.exit();
      assertFalse(operationTestSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      boolean boolean0 = operationTestSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OperationTestSimplified operationTestSimplified0 = new OperationTestSimplified();
      operationTestSimplified0.exit();
      assertFalse(operationTestSimplified0.isFinal());
  }
}
