/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import statechart.Controller;
import statechart.SimpleLight;

public class Controller2Simplified implements ICycleBased {

    private static class EvBuf {

        private boolean myEvent;
    }

    private static class Controller2EvBuf {

        private EvBuf iface = new EvBuf();
    }

    public enum State {

        MAIN_REGION_STATEA,
        MAIN_REGION_STATEB,
        MAIN_REGION_STATEC,
        MAIN_REGION_STATED,
        MAIN_REGION_STATEE,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private Controller2EvBuf current = new Controller2EvBuf();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    private boolean stateConfVectorChanged;

    private boolean getStateConfVectorChanged() {
        return stateConfVectorChanged;
    }

    private void setStateConfVectorChanged(boolean value) {
        this.stateConfVectorChanged = value;
    }

    public Controller2Simplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart Controller2 */
        setInteger(0l);
        setReal(0.0);
        setBoolean(false);
        setString("");
        setController(null);
        setLight(null);
        isExecuting = false;
    }

    public void runCycle() {
        /* Performs a 'run to completion' step. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        swapInEvents();
        do {
            stateConfVectorChanged = false;
            microStep();
        } while (getStateConfVectorChanged());
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart Controller2 */
        enterSequence_main_region_default();
        do {
            stateConfVectorChanged = false;
            microStep();
        } while (getStateConfVectorChanged());
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart Controller2 */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void swapInEvents() {
        current.iface.myEvent = myEvent;
        myEvent = false;
    }

    private void clearInEvents() {
        myEvent = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                main_region_StateA_react(-1l);
                break;
            case MAIN_REGION_STATEB:
                main_region_StateB_react(-1l);
                break;
            case MAIN_REGION_STATEC:
                main_region_StateC_react(-1l);
                break;
            case MAIN_REGION_STATED:
                main_region_StateD_react(-1l);
                break;
            case MAIN_REGION_STATEE:
                main_region_StateE_react(-1l);
                break;
            default:
                break;
        }
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_STATEA:
                return stateVector[0] == State.MAIN_REGION_STATEA;
            case MAIN_REGION_STATEB:
                return stateVector[0] == State.MAIN_REGION_STATEB;
            case MAIN_REGION_STATEC:
                return stateVector[0] == State.MAIN_REGION_STATEC;
            case MAIN_REGION_STATED:
                return stateVector[0] == State.MAIN_REGION_STATED;
            case MAIN_REGION_STATEE:
                return stateVector[0] == State.MAIN_REGION_STATEE;
            default:
                return false;
        }
    }

    private boolean myEvent;

    public void raiseMyEvent() {
        myEvent = true;
    }

    private long integer;

    private long getInteger() {
        return integer;
    }

    private void setInteger(long value) {
        this.integer = value;
    }

    private double real;

    private double getReal() {
        return real;
    }

    private void setReal(double value) {
        this.real = value;
    }

    private boolean booleanVariable;

    private boolean getBoolean() {
        return booleanVariable;
    }

    private void setBoolean(boolean value) {
        this.booleanVariable = value;
    }

    private String string;

    private String getString() {
        return string;
    }

    private void setString(String value) {
        this.string = value;
    }

    private Controller controller;

    private Controller getController() {
        return controller;
    }

    public void setController(Controller value) {
        this.controller = value;
    }

    private SimpleLight light;

    private SimpleLight getLight() {
        return light;
    }

    public void setLight(SimpleLight value) {
        this.light = value;
    }

    /* Entry action for state 'StateA'. */
    private void entryAction_main_region_StateA() {
        /* Entry action for state 'StateA'. */
        getController().enter();
    }

    /* Exit action for state 'StateB'. */
    private void exitAction_main_region_StateB() {
        /* Exit action for state 'StateB'. */
        getLight().enter();
    }

    /* Exit action for state 'StateC'. */
    private void exitAction_main_region_StateC() {
        /* Exit action for state 'StateC'. */
        getLight().raiseToggle();
    }

    /* Exit action for state 'StateD'. */
    private void exitAction_main_region_StateD() {
        /* Exit action for state 'StateD'. */
        getLight().exit();
    }

    /* 'default' enter sequence for state StateA */
    private void enterSequence_main_region_StateA_default() {
        /* 'default' enter sequence for state StateA */
        entryAction_main_region_StateA();
        stateVector[0] = State.MAIN_REGION_STATEA;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state StateB */
    private void enterSequence_main_region_StateB_default() {
        /* 'default' enter sequence for state StateB */
        stateVector[0] = State.MAIN_REGION_STATEB;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state StateC */
    private void enterSequence_main_region_StateC_default() {
        /* 'default' enter sequence for state StateC */
        stateVector[0] = State.MAIN_REGION_STATEC;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state StateD */
    private void enterSequence_main_region_StateD_default() {
        /* 'default' enter sequence for state StateD */
        stateVector[0] = State.MAIN_REGION_STATED;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for state StateE */
    private void enterSequence_main_region_StateE_default() {
        /* 'default' enter sequence for state StateE */
        stateVector[0] = State.MAIN_REGION_STATEE;
        stateConfVectorChanged = true;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state StateA */
    private void exitSequence_main_region_StateA() {
        /* Default exit sequence for state StateA */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state StateB */
    private void exitSequence_main_region_StateB() {
        /* Default exit sequence for state StateB */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateB();
    }

    /* Default exit sequence for state StateC */
    private void exitSequence_main_region_StateC() {
        /* Default exit sequence for state StateC */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateC();
    }

    /* Default exit sequence for state StateD */
    private void exitSequence_main_region_StateD() {
        /* Default exit sequence for state StateD */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateD();
    }

    /* Default exit sequence for state StateE */
    private void exitSequence_main_region_StateE() {
        /* Default exit sequence for state StateE */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                exitSequence_main_region_StateA();
                break;
            case MAIN_REGION_STATEB:
                exitSequence_main_region_StateB();
                break;
            case MAIN_REGION_STATEC:
                exitSequence_main_region_StateC();
                break;
            case MAIN_REGION_STATED:
                exitSequence_main_region_StateD();
                break;
            case MAIN_REGION_STATEE:
                exitSequence_main_region_StateE();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_StateA_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_StateA_react(long transitioned_before) {
        /* The reactions of state StateA. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.myEvent) {
                exitSequence_main_region_StateA();
                setInteger(3l);
                enterSequence_main_region_StateB_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateB_react(long transitioned_before) {
        /* The reactions of state StateB. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.myEvent) {
                exitSequence_main_region_StateB();
                setReal(3.14);
                enterSequence_main_region_StateC_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateC_react(long transitioned_before) {
        /* The reactions of state StateC. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.myEvent) {
                exitSequence_main_region_StateC();
                setBoolean(true);
                enterSequence_main_region_StateD_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateD_react(long transitioned_before) {
        /* The reactions of state StateD. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (current.iface.myEvent) {
                exitSequence_main_region_StateD();
                setString("STRING");
                enterSequence_main_region_StateE_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateE_react(long transitioned_before) {
        /* The reactions of state StateE. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }
}
