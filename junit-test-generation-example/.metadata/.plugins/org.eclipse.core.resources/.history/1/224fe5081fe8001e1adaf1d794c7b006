/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 07:33:28 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Controller;
import statechart.Controller2Simplified;
import statechart.SimpleLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller2Simplified_ESTest extends Controller2Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      assertTrue(controller2Simplified0.isActive());
      
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      // Undeclared exception!
      try { 
        controller2Simplified0.isStateActive((Controller2Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      // Undeclared exception!
      try { 
        controller2Simplified0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.triggerWithoutEvent();
      assertTrue(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.triggerWithoutEvent();
      assertTrue(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.triggerWithoutEvent();
      assertTrue(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      assertTrue(controller2Simplified0.isActive());
      
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      assertTrue(controller2Simplified0.isActive());
      
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      controller2Simplified0.raiseMyEvent();
      // Undeclared exception!
      try { 
        controller2Simplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      assertTrue(controller2Simplified0.isActive());
      
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATED;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertTrue(controller2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertTrue(controller2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      controller2Simplified0.raiseMyEvent();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertTrue(controller2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertTrue(controller2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.$NULLSTATE$;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEE;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATED;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller2Simplified.State controller2Simplified_State0 = Controller2Simplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = controller2Simplified0.isStateActive(controller2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      controller2Simplified0.triggerWithoutEvent();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      assertFalse(controller2Simplified0.isActive());
      
      controller2Simplified0.enter();
      boolean boolean0 = controller2Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      boolean boolean0 = controller2Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.triggerWithoutEvent();
      assertTrue(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      SimpleLight simpleLight0 = new SimpleLight();
      controller2Simplified0.enter();
      controller2Simplified0.setLight(simpleLight0);
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      controller2Simplified0.raiseMyEvent();
      assertTrue(controller2Simplified0.isActive());
      
      controller2Simplified0.exit();
      assertFalse(controller2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      boolean boolean0 = controller2Simplified0.isFinal();
      assertFalse(controller2Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      controller2Simplified0.enter();
      controller2Simplified0.raiseMyEvent();
      // Undeclared exception!
      try { 
        controller2Simplified0.raiseMyEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Controller2Simplified controller2Simplified0 = new Controller2Simplified();
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller2Simplified0.setController(controller0);
      assertFalse(controller2Simplified0.isActive());
      
      controller2Simplified0.enter();
      controller2Simplified0.triggerWithoutEvent();
      assertTrue(controller2Simplified0.isActive());
  }
}
