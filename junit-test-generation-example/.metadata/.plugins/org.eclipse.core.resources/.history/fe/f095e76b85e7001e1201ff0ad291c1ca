/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TriggersSimplified implements ITimed, IEventDriven {

    public static class Intf {

        private TriggersSimplified parent;

        public Intf(TriggersSimplified parent) {
            this.parent = parent;
        }

        private boolean a;

        public void raiseA() {
            parent.inEventQueue.add(() -> {
                a = true;
            });
            parent.runCycle();
        }

        private boolean b;

        public void raiseB() {
            parent.inEventQueue.add(() -> {
                b = true;
            });
            parent.runCycle();
        }

        private boolean oncycle_1;

        public void raiseOncycle_1() {
            parent.inEventQueue.add(() -> {
                oncycle_1 = true;
            });
            parent.runCycle();
        }

        private boolean every_oncycle;

        public void raiseEvery_oncycle() {
            parent.inEventQueue.add(() -> {
                every_oncycle = true;
            });
            parent.runCycle();
        }

        private boolean event_Name;

        public void raiseEvent_Name() {
            parent.inEventQueue.add(() -> {
                event_Name = true;
            });
            parent.runCycle();
        }

        private boolean c;

        private void raiseC() {
            c = true;
            cObservable.next(null);
            parent.raiseLocal_intf_c();
        }

        private Observable<Void> cObservable = new Observable<Void>();

        private Observable<Void> getC() {
            return cObservable;
        }

        private long t;

        private long getT() {
            return t;
        }

        private void setT(long value) {
            this.t = value;
        }
    }

    private Intf intf;

    public enum State {

        MAIN_REGION_STATEA,
        MAIN_REGION_STATEB,
        MAIN_REGION_STATEC,
        MAIN_REGION_STATED,
        MAIN_REGION_STATEE,
        MAIN_REGION_STATEF,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[2];

    private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean local_intf_c;

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public TriggersSimplified() {
        intf = new Intf(this);
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        clearInternalEvents();
        /* Default init sequence for statechart Triggers */
        intf.setT(0l);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart Triggers */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart Triggers */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void clearInEvents() {
        every200ns = false;
        afterX = false;
        intf.a = false;
        intf.b = false;
        intf.oncycle_1 = false;
        intf.every_oncycle = false;
        intf.event_Name = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
    }

    private void clearInternalEvents() {
        local_intf_c = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                main_region_StateA_react(-1l);
                break;
            case MAIN_REGION_STATEB:
                main_region_StateB_react(-1l);
                break;
            case MAIN_REGION_STATEC:
                main_region_StateC_react(-1l);
                break;
            case MAIN_REGION_STATED:
                main_region_StateD_react(-1l);
                break;
            case MAIN_REGION_STATEE:
                main_region_StateE_react(-1l);
                break;
            case MAIN_REGION_STATEF:
                main_region_StateF_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
            clearInternalEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!internalEventQueue.isEmpty()) {
            internalEventQueue.poll().run();
            return true;
        }
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_STATEA:
                return stateVector[0] == State.MAIN_REGION_STATEA;
            case MAIN_REGION_STATEB:
                return stateVector[0] == State.MAIN_REGION_STATEB;
            case MAIN_REGION_STATEC:
                return stateVector[0] == State.MAIN_REGION_STATEC;
            case MAIN_REGION_STATED:
                return stateVector[0] == State.MAIN_REGION_STATED;
            case MAIN_REGION_STATEE:
                return stateVector[0] == State.MAIN_REGION_STATEE;
            case MAIN_REGION_STATEF:
                return stateVector[0] == State.MAIN_REGION_STATEF;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    public Intf intf() {
        return intf;
    }

    private void raiseLocal_intf_c() {
        internalEventQueue.add(() -> {
            local_intf_c = true;
        });
    }

    private boolean every200ns;

    public void raiseEvery200ns() {
        inEventQueue.add(() -> {
            every200ns = true;
        });
        runCycle();
    }

    private boolean afterX;

    public void raiseAfterX() {
        inEventQueue.add(() -> {
            afterX = true;
        });
        runCycle();
    }

    /* Entry action for state 'StateA'. */
    private void entryAction_main_region_StateA() {
        /* Entry action for state 'StateA'. */
        timerService.setTimer(this, 0, (3l * 1000l), false);
    }

    /* Entry action for state 'StateD'. */
    private void entryAction_main_region_StateD() {
        /* Entry action for state 'StateD'. */
        timerService.setTimer(this, 1, (200l / 1000000l), true);
    }

    /* Exit action for state 'StateA'. */
    private void exitAction_main_region_StateA() {
        /* Exit action for state 'StateA'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state 'StateD'. */
    private void exitAction_main_region_StateD() {
        /* Exit action for state 'StateD'. */
        timerService.unsetTimer(this, 1);
    }

    /* 'default' enter sequence for state StateA */
    private void enterSequence_main_region_StateA_default() {
        /* 'default' enter sequence for state StateA */
        entryAction_main_region_StateA();
        stateVector[0] = State.MAIN_REGION_STATEA;
    }

    /* 'default' enter sequence for state StateB */
    private void enterSequence_main_region_StateB_default() {
        /* 'default' enter sequence for state StateB */
        stateVector[0] = State.MAIN_REGION_STATEB;
    }

    /* 'default' enter sequence for state StateC */
    private void enterSequence_main_region_StateC_default() {
        /* 'default' enter sequence for state StateC */
        stateVector[0] = State.MAIN_REGION_STATEC;
    }

    /* 'default' enter sequence for state StateD */
    private void enterSequence_main_region_StateD_default() {
        /* 'default' enter sequence for state StateD */
        entryAction_main_region_StateD();
        stateVector[0] = State.MAIN_REGION_STATED;
    }

    /* 'default' enter sequence for state StateE */
    private void enterSequence_main_region_StateE_default() {
        /* 'default' enter sequence for state StateE */
        stateVector[0] = State.MAIN_REGION_STATEE;
    }

    /* 'default' enter sequence for state StateF */
    private void enterSequence_main_region_StateF_default() {
        /* 'default' enter sequence for state StateF */
        stateVector[0] = State.MAIN_REGION_STATEF;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state StateA */
    private void exitSequence_main_region_StateA() {
        /* Default exit sequence for state StateA */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateA();
    }

    /* Default exit sequence for state StateB */
    private void exitSequence_main_region_StateB() {
        /* Default exit sequence for state StateB */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state StateC */
    private void exitSequence_main_region_StateC() {
        /* Default exit sequence for state StateC */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state StateD */
    private void exitSequence_main_region_StateD() {
        /* Default exit sequence for state StateD */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateD();
    }

    /* Default exit sequence for state StateE */
    private void exitSequence_main_region_StateE() {
        /* Default exit sequence for state StateE */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state StateF */
    private void exitSequence_main_region_StateF() {
        /* Default exit sequence for state StateF */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                exitSequence_main_region_StateA();
                break;
            case MAIN_REGION_STATEB:
                exitSequence_main_region_StateB();
                break;
            case MAIN_REGION_STATEC:
                exitSequence_main_region_StateC();
                break;
            case MAIN_REGION_STATED:
                exitSequence_main_region_StateD();
                break;
            case MAIN_REGION_STATEE:
                exitSequence_main_region_StateE();
                break;
            case MAIN_REGION_STATEF:
                exitSequence_main_region_StateF();
                break;
            default:
                break;
        }
    }

    /* The reactions of state null. */
    private void react_main_region__choice_0() {
        /* The reactions of state null. */
        if (intf.oncycle_1) {
            intf.t++;
            enterSequence_main_region_StateC_default();
        } else {
            if (((local_intf_c) && (intf.getT() == 0l))) {
                intf.setT(2l);
                enterSequence_main_region_StateF_default();
            } else {
                enterSequence_main_region_StateD_default();
            }
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_StateA_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_StateA_react(long transitioned_before) {
        /* The reactions of state StateA. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (intf.getT() != 3l) {
                exitSequence_main_region_StateA();
                intf.raiseC();
                timeEvents[0] = false;
                enterSequence_main_region_StateB_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                exitSequence_main_region_StateA();
                react_main_region__choice_0();
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateB_react(long transitioned_before) {
        /* The reactions of state StateB. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }

    private long main_region_StateC_react(long transitioned_before) {
        /* The reactions of state StateC. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }

    private long main_region_StateD_react(long transitioned_before) {
        /* The reactions of state StateD. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            exitSequence_main_region_StateD();
            timeEvents[1] = false;
            enterSequence_main_region_StateE_default();
            react(0l);
            transitioned_after = 0l;
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateE_react(long transitioned_before) {
        /* The reactions of state StateE. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }

    private long main_region_StateF_react(long transitioned_before) {
        /* The reactions of state StateF. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
