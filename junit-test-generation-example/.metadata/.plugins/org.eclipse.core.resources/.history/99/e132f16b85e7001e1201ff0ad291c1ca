testclass TriggersTest for statechart Triggers {
	@Test
	operation test00 () {
	    raise intf.every_oncycle
	}

	@Test
	operation test01 () {
	    raise intf.Event_Name
	}

	@Test
	operation test02 () {
	    raise intf.b
	}

	@Test
	operation test03 () {
	    raise intf.a
	}

	@Test
	operation test04 () {
	    triggerWithoutEvent
	    assert !is_final
	}

	@Test
	operation test05 () {
	    proceed 3s
	    assert !is_active
	}

	@Test
	operation test06 () {
	    raise afterX
	    assert !is_final
	}

	@Test
	operation test10 () {
	    exit
	    assert !is_final
	}

	@Test
	operation test11 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test12 () {
	    assert !is_active
	    enter
	    raise every200ns
	    assert active (Triggers.main_region.StateB)
	}

	@Test
	operation test13 () {
	    assert !is_active
	    enter
	    assert active (Triggers.main_region.StateA)
	}

	@Test
	operation test14 () {
	    assert !is_active
	}

	@Test
	operation test15 () {
	    assert !active (Triggers.main_region.StateF)
	    assert !is_active
	}

	@Test
	operation test16 () {
	    assert !active (Triggers.main_region.StateE)
	    assert !is_active
	}

	@Test
	operation test17 () {
	    assert !is_active
	    assert !active (Triggers.main_region.StateC)
	}

	@Test
	operation test18 () {
	    assert !active (Triggers.main_region.StateB)
	    assert !is_active
	}

	@Test
	operation test19 () {
	    assert !is_active
	    assert !active (Triggers.main_region.StateD)
	}

	@Test
	operation test20 () {
	    assert !active (Triggers.main_region.StateA)
	    assert !is_active
	}

	@Test
	operation test21 () {
	    assert !is_active
	    enter
	    assert is_active
	}

	@Test
	operation test22 () {
	    assert !is_active
	}

	@Test
	operation test25 () {
	    assert !is_final
	    assert !is_active
	}

	@Test
	operation test29 () {
	    enter
	    raise intf.oncycle_1
	    assert is_active
	    exit
	    assert !is_active
	}

}