/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 23 14:51:26 GMT 2024
 */

package machines2;

import org.junit.Test;
import static org.junit.Assert.*;
import machines2.SimpleSeriesCycleBasedSimplified;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleSeriesCycleBasedSimplified_ESTest extends SimpleSeriesCycleBasedSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.raiseEvent1();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.exit();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
      
      simpleSeriesCycleBasedSimplified0.exit();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
      
      simpleSeriesCycleBasedSimplified0.exit();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.runCycle();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION_STATEA;
      simpleSeriesCycleBasedSimplified0.enter();
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.$NULLSTATE$;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION_STATEC;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      SimpleSeriesCycleBasedSimplified.State simpleSeriesCycleBasedSimplified_State0 = SimpleSeriesCycleBasedSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isStateActive(simpleSeriesCycleBasedSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
      
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.raiseEvent1();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.raiseEvent3();
      simpleSeriesCycleBasedSimplified0.runCycle();
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isFinal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
      
      simpleSeriesCycleBasedSimplified0.enter();
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      boolean boolean0 = simpleSeriesCycleBasedSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.raiseEvent1();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isActive());
      
      simpleSeriesCycleBasedSimplified0.exit();
      assertFalse(simpleSeriesCycleBasedSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleSeriesCycleBasedSimplified simpleSeriesCycleBasedSimplified0 = new SimpleSeriesCycleBasedSimplified();
      simpleSeriesCycleBasedSimplified0.raiseEvent2();
      simpleSeriesCycleBasedSimplified0.enter();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.raiseEvent3();
      simpleSeriesCycleBasedSimplified0.runCycle();
      simpleSeriesCycleBasedSimplified0.runCycle();
      assertTrue(simpleSeriesCycleBasedSimplified0.isFinal());
  }
}
