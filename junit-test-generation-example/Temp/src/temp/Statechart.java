/** Generated by itemis CREATE code generator. */
package temp;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class Statechart implements IStatemachine, ICycleBased {
	private static class EvBuf {
		private boolean power_on;
		private boolean work;
		private boolean analize;
		private boolean start;
		private boolean a;
		private boolean b;
		private boolean end;
		private boolean end_all;
	}
	private static class StatechartEvBuf {
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		MAINR_EGION_ESEMPIO_STATO,
		MAINR_EGION_IDLE,
		MAINR_EGION_ON,
		MAINR_EGION_ON_R1_WORKING,
		MAINR_EGION_ON_R1_INITANALYSES,
		MAINR_EGION_ON_R1_ANALYSES,
		MAINR_EGION_ON_R1_ANALYSES_R1_AN1,
		MAINR_EGION_ON_R1_ANALYSES_R2_AN2A,
		MAINR_EGION_ON_R1_ANALYSES_R2_AN2B,
		MAINR_EGION_ON_R1_ENDANALYSES,
		MAINR_EGION__FINAL_,
		MAINR_EGION_CHILL,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private StatechartEvBuf current = new StatechartEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart */
		enterSequence_mainr_egion_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart */
		exitSequence_mainr_egion();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAINR_EGION__FINAL_) && (stateVector[1] == State.$NULLSTATE$);
	}
	private void swapInEvents() {
		current.iface.power_on = power_on;
		power_on = false;
		current.iface.work = work;
		work = false;
		current.iface.analize = analize;
		analize = false;
		current.iface.start = start;
		start = false;
		current.iface.a = a;
		a = false;
		current.iface.b = b;
		b = false;
		current.iface.end = end;
		end = false;
		current.iface.end_all = end_all;
		end_all = false;
	}
	
	private void clearInEvents() {
		power_on = false;
		work = false;
		analize = false;
		start = false;
		a = false;
		b = false;
		end = false;
		end_all = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAINR_EGION_ESEMPIO_STATO:
			transitioned = mainr_egion_Esempio_stato_react(transitioned);
			break;
		case MAINR_EGION_IDLE:
			transitioned = mainr_egion_idle_react(transitioned);
			break;
		case MAINR_EGION_ON_R1_WORKING:
			transitioned = mainr_egion_on_r1_working_react(transitioned);
			break;
		case MAINR_EGION_ON_R1_INITANALYSES:
			transitioned = mainr_egion_on_r1_initanalyses_react(transitioned);
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R1_AN1:
			transitioned = mainr_egion_on_r1_analyses_r1_an1_react(transitioned);
			break;
		case MAINR_EGION_ON_R1_ENDANALYSES:
			transitioned = mainr_egion_on_r1_endanalyses_react(transitioned);
			break;
		case MAINR_EGION__FINAL_:
			transitioned = mainr_egion__final__react(transitioned);
			break;
		case MAINR_EGION_CHILL:
			transitioned = mainr_egion_chill_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAINR_EGION_ON_R1_ANALYSES_R2_AN2A:
				mainr_egion_on_r1_analyses_r2_an2a_react(transitioned);
				break;
			case MAINR_EGION_ON_R1_ANALYSES_R2_AN2B:
				mainr_egion_on_r1_analyses_r2_an2b_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAINR_EGION_ESEMPIO_STATO:
			return stateVector[0] == State.MAINR_EGION_ESEMPIO_STATO;
		case MAINR_EGION_IDLE:
			return stateVector[0] == State.MAINR_EGION_IDLE;
		case MAINR_EGION_ON:
			return stateVector[0].ordinal() >= State.
					MAINR_EGION_ON.ordinal()&& stateVector[0].ordinal() <= State.MAINR_EGION_ON_R1_ENDANALYSES.ordinal();
		case MAINR_EGION_ON_R1_WORKING:
			return stateVector[0] == State.MAINR_EGION_ON_R1_WORKING;
		case MAINR_EGION_ON_R1_INITANALYSES:
			return stateVector[0] == State.MAINR_EGION_ON_R1_INITANALYSES;
		case MAINR_EGION_ON_R1_ANALYSES:
			return stateVector[0].ordinal() >= State.
					MAINR_EGION_ON_R1_ANALYSES.ordinal()&& stateVector[0].ordinal() <= State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2B.ordinal();
		case MAINR_EGION_ON_R1_ANALYSES_R1_AN1:
			return stateVector[0] == State.MAINR_EGION_ON_R1_ANALYSES_R1_AN1;
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2A:
			return stateVector[1] == State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2A;
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2B:
			return stateVector[1] == State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2B;
		case MAINR_EGION_ON_R1_ENDANALYSES:
			return stateVector[0] == State.MAINR_EGION_ON_R1_ENDANALYSES;
		case MAINR_EGION__FINAL_:
			return stateVector[0] == State.MAINR_EGION__FINAL_;
		case MAINR_EGION_CHILL:
			return stateVector[0] == State.MAINR_EGION_CHILL;
		default:
			return false;
		}
	}
	
	
	private boolean power_on;
	
	
	public void raisePower_on() {
		power_on = true;
	}
	
	private boolean work;
	
	
	public void raiseWork() {
		work = true;
	}
	
	private boolean analize;
	
	
	public void raiseAnalize() {
		analize = true;
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		start = true;
	}
	
	private boolean a;
	
	
	public void raiseA() {
		a = true;
	}
	
	private boolean b;
	
	
	public void raiseB() {
		b = true;
	}
	
	private boolean end;
	
	
	public void raiseEnd() {
		end = true;
	}
	
	private boolean end_all;
	
	
	public void raiseEnd_all() {
		end_all = true;
	}
	
	/* 'default' enter sequence for state Esempio_stato */
	private void enterSequence_mainr_egion_Esempio_stato_default() {
		/* 'default' enter sequence for state Esempio_stato */
		stateVector[0] = State.MAINR_EGION_ESEMPIO_STATO;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_mainr_egion_idle_default() {
		/* 'default' enter sequence for state idle */
		stateVector[0] = State.MAINR_EGION_IDLE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state working */
	private void enterSequence_mainr_egion_on_r1_working_default() {
		/* 'default' enter sequence for state working */
		stateVector[0] = State.MAINR_EGION_ON_R1_WORKING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state initanalyses */
	private void enterSequence_mainr_egion_on_r1_initanalyses_default() {
		/* 'default' enter sequence for state initanalyses */
		stateVector[0] = State.MAINR_EGION_ON_R1_INITANALYSES;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state an1 */
	private void enterSequence_mainr_egion_on_r1_analyses_r1_an1_default() {
		/* 'default' enter sequence for state an1 */
		stateVector[0] = State.MAINR_EGION_ON_R1_ANALYSES_R1_AN1;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state an2a */
	private void enterSequence_mainr_egion_on_r1_analyses_r2_an2a_default() {
		/* 'default' enter sequence for state an2a */
		stateVector[1] = State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2A;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state an2b */
	private void enterSequence_mainr_egion_on_r1_analyses_r2_an2b_default() {
		/* 'default' enter sequence for state an2b */
		stateVector[1] = State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2B;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state endanalyses */
	private void enterSequence_mainr_egion_on_r1_endanalyses_default() {
		/* 'default' enter sequence for state endanalyses */
		stateVector[0] = State.MAINR_EGION_ON_R1_ENDANALYSES;
		stateConfVectorPosition = 0;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_mainr_egion__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAINR_EGION__FINAL_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state chill */
	private void enterSequence_mainr_egion_chill_default() {
		/* 'default' enter sequence for state chill */
		stateVector[0] = State.MAINR_EGION_CHILL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region mainr egion */
	private void enterSequence_mainr_egion_default() {
		/* 'default' enter sequence for region mainr egion */
		react_mainr_egion__entry_Default();
	}
	
	/* Default exit sequence for state Esempio_stato */
	private void exitSequence_mainr_egion_Esempio_stato() {
		/* Default exit sequence for state Esempio_stato */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_mainr_egion_idle() {
		/* Default exit sequence for state idle */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence_mainr_egion_on() {
		/* Default exit sequence for state on */
		exitSequence_mainr_egion_on_r1();
	}
	
	/* Default exit sequence for state working */
	private void exitSequence_mainr_egion_on_r1_working() {
		/* Default exit sequence for state working */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state initanalyses */
	private void exitSequence_mainr_egion_on_r1_initanalyses() {
		/* Default exit sequence for state initanalyses */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state analyses */
	private void exitSequence_mainr_egion_on_r1_analyses() {
		/* Default exit sequence for state analyses */
		exitSequence_mainr_egion_on_r1_analyses_r1();
		exitSequence_mainr_egion_on_r1_analyses_r2();
	}
	
	/* Default exit sequence for state an1 */
	private void exitSequence_mainr_egion_on_r1_analyses_r1_an1() {
		/* Default exit sequence for state an1 */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state an2a */
	private void exitSequence_mainr_egion_on_r1_analyses_r2_an2a() {
		/* Default exit sequence for state an2a */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state an2b */
	private void exitSequence_mainr_egion_on_r1_analyses_r2_an2b() {
		/* Default exit sequence for state an2b */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state endanalyses */
	private void exitSequence_mainr_egion_on_r1_endanalyses() {
		/* Default exit sequence for state endanalyses */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_mainr_egion__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state chill */
	private void exitSequence_mainr_egion_chill() {
		/* Default exit sequence for state chill */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region mainr egion */
	private void exitSequence_mainr_egion() {
		/* Default exit sequence for region mainr egion */
		switch (stateVector[0]) {
		case MAINR_EGION_ESEMPIO_STATO:
			exitSequence_mainr_egion_Esempio_stato();
			break;
		case MAINR_EGION_IDLE:
			exitSequence_mainr_egion_idle();
			break;
		case MAINR_EGION_ON_R1_WORKING:
			exitSequence_mainr_egion_on_r1_working();
			break;
		case MAINR_EGION_ON_R1_INITANALYSES:
			exitSequence_mainr_egion_on_r1_initanalyses();
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R1_AN1:
			exitSequence_mainr_egion_on_r1_analyses_r1_an1();
			break;
		case MAINR_EGION_ON_R1_ENDANALYSES:
			exitSequence_mainr_egion_on_r1_endanalyses();
			break;
		case MAINR_EGION__FINAL_:
			exitSequence_mainr_egion__final_();
			break;
		case MAINR_EGION_CHILL:
			exitSequence_mainr_egion_chill();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2A:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2a();
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2B:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2b();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_mainr_egion_on_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAINR_EGION_ON_R1_WORKING:
			exitSequence_mainr_egion_on_r1_working();
			break;
		case MAINR_EGION_ON_R1_INITANALYSES:
			exitSequence_mainr_egion_on_r1_initanalyses();
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R1_AN1:
			exitSequence_mainr_egion_on_r1_analyses_r1_an1();
			break;
		case MAINR_EGION_ON_R1_ENDANALYSES:
			exitSequence_mainr_egion_on_r1_endanalyses();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2A:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2a();
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2B:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2b();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_mainr_egion_on_r1_analyses_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAINR_EGION_ON_R1_ANALYSES_R1_AN1:
			exitSequence_mainr_egion_on_r1_analyses_r1_an1();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_mainr_egion_on_r1_analyses_r2() {
		/* Default exit sequence for region r2 */
		switch (stateVector[1]) {
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2A:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2a();
			break;
		case MAINR_EGION_ON_R1_ANALYSES_R2_AN2B:
			exitSequence_mainr_egion_on_r1_analyses_r2_an2b();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_mainr_egion__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_mainr_egion_Esempio_stato_default();
	}
	
	/* The reactions of state null. */
	private void react_mainr_egion_on_r1__sync0() {
		/* The reactions of state null. */
		enterSequence_mainr_egion_on_r1_analyses_r1_an1_default();
		enterSequence_mainr_egion_on_r1_analyses_r2_an2a_default();
	}
	
	/* The reactions of state null. */
	private void react_mainr_egion_on_r1__sync1() {
		/* The reactions of state null. */
		enterSequence_mainr_egion_on_r1_endanalyses_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before
		;
	}
	
	private long mainr_egion_Esempio_stato_react(long transitioned_before) {
		/* The reactions of state Esempio_stato. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.power_on) {
				exitSequence_mainr_egion_Esempio_stato();
				enterSequence_mainr_egion_idle_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_idle_react(long transitioned_before) {
		/* The reactions of state idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.work) {
				exitSequence_mainr_egion_idle();
				enterSequence_mainr_egion_on_r1_working_default();
				react(0l);
				transitioned_after = 0l;
			} else {
				if (current.iface.analize) {
					exitSequence_mainr_egion_idle();
					enterSequence_mainr_egion_on_r1_initanalyses_default();
					react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_react(long transitioned_before) {
		/* The reactions of state on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.end_all) {
				exitSequence_mainr_egion_on();
				enterSequence_mainr_egion__final__default();
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_working_react(long transitioned_before) {
		/* The reactions of state working. */
		long transitioned_after = transitioned_before;
		/* If no transition was taken then execute local reactions */
		transitioned_after = mainr_egion_on_react(transitioned_before);
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_initanalyses_react(long transitioned_before) {
		/* The reactions of state initanalyses. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.start) {
				exitSequence_mainr_egion_on_r1_initanalyses();
				react_mainr_egion_on_r1__sync0();
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = mainr_egion_on_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_analyses_react(long transitioned_before) {
		/* The reactions of state analyses. */
		long transitioned_after = transitioned_before;
		/* If no transition was taken then execute local reactions */
		transitioned_after = mainr_egion_on_react(transitioned_before);
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_analyses_r1_an1_react(long transitioned_before) {
		/* The reactions of state an1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((current.iface.a && isStateActive(State.MAINR_EGION_ON_R1_ANALYSES_R2_AN2B))) {
				exitSequence_mainr_egion_on_r1_analyses();
				react_mainr_egion_on_r1__sync1();
				transitioned_after = 0l;
			}
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_analyses_r2_an2a_react(long transitioned_before) {
		/* The reactions of state an2a. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.iface.b) {
				exitSequence_mainr_egion_on_r1_analyses_r2_an2a();
				enterSequence_mainr_egion_on_r1_analyses_r2_an2b_default();
				mainr_egion_on_r1_analyses_react(0l);
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = mainr_egion_on_r1_analyses_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_analyses_r2_an2b_react(long transitioned_before) {
		/* The reactions of state an2b. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if ((isStateActive(State.MAINR_EGION_ON_R1_ANALYSES_R1_AN1) && current.iface.a)) {
				exitSequence_mainr_egion_on_r1_analyses();
				react_mainr_egion_on_r1__sync1();
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = mainr_egion_on_r1_analyses_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion_on_r1_endanalyses_react(long transitioned_before) {
		/* The reactions of state endanalyses. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.end) {
				exitSequence_mainr_egion_on();
				enterSequence_mainr_egion_chill_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = mainr_egion_on_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainr_egion__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return react(transitioned_before)
		;
	}
	
	private long mainr_egion_chill_react(long transitioned_before) {
		/* The reactions of state chill. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.end) {
				exitSequence_mainr_egion_chill();
				enterSequence_mainr_egion__final__default();
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
}
