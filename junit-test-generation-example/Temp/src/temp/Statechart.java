/** Generated by itemis CREATE code generator. */
package temp;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart implements IStatemachine, IEventDriven {
	public enum State {
		MAINREGION_OFF,
		MAINREGION_IDLE,
		MAINREGION_ON,
		MAINREGION_ON_R1_WORKING,
		MAINREGION_ON_R1_ANALYZING,
		MAINREGION__FINAL_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Statechart() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart */
		enterSequence_mainregion_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart */
		exitSequence_mainregion();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAINREGION__FINAL_);
	}
	private void clearInEvents() {
		power_on = false;
		work = false;
		analize = false;
		end = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAINREGION_OFF:
			mainregion_off_react(-1l);
			break;
		case MAINREGION_IDLE:
			mainregion_idle_react(-1l);
			break;
		case MAINREGION_ON_R1_WORKING:
			mainregion_on_r1_working_react(-1l);
			break;
		case MAINREGION_ON_R1_ANALYZING:
			mainregion_on_r1_analyzing_react(-1l);
			break;
		case MAINREGION__FINAL_:
			mainregion__final__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAINREGION_OFF:
			return stateVector[0] == State.MAINREGION_OFF;
		case MAINREGION_IDLE:
			return stateVector[0] == State.MAINREGION_IDLE;
		case MAINREGION_ON:
			return stateVector[0].ordinal() >= State.
					MAINREGION_ON.ordinal()&& stateVector[0].ordinal() <= State.MAINREGION_ON_R1_ANALYZING.ordinal();
		case MAINREGION_ON_R1_WORKING:
			return stateVector[0] == State.MAINREGION_ON_R1_WORKING;
		case MAINREGION_ON_R1_ANALYZING:
			return stateVector[0] == State.MAINREGION_ON_R1_ANALYZING;
		case MAINREGION__FINAL_:
			return stateVector[0] == State.MAINREGION__FINAL_;
		default:
			return false;
		}
	}
	
	
	private boolean power_on;
	
	
	public void raisePower_on() {
		inEventQueue.add(() -> {
			power_on = true;
		});
		runCycle();
	}
	
	private boolean work;
	
	
	public void raiseWork() {
		inEventQueue.add(() -> {
			work = true;
		});
		runCycle();
	}
	
	private boolean analize;
	
	
	public void raiseAnalize() {
		inEventQueue.add(() -> {
			analize = true;
		});
		runCycle();
	}
	
	private boolean end;
	
	
	public void raiseEnd() {
		inEventQueue.add(() -> {
			end = true;
		});
		runCycle();
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_mainregion_off_default() {
		/* 'default' enter sequence for state off */
		stateVector[0] = State.MAINREGION_OFF;
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_mainregion_idle_default() {
		/* 'default' enter sequence for state idle */
		stateVector[0] = State.MAINREGION_IDLE;
	}
	
	/* 'default' enter sequence for state working */
	private void enterSequence_mainregion_on_r1_working_default() {
		/* 'default' enter sequence for state working */
		stateVector[0] = State.MAINREGION_ON_R1_WORKING;
	}
	
	/* 'default' enter sequence for state analyzing */
	private void enterSequence_mainregion_on_r1_analyzing_default() {
		/* 'default' enter sequence for state analyzing */
		stateVector[0] = State.MAINREGION_ON_R1_ANALYZING;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_mainregion__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAINREGION__FINAL_;
	}
	
	/* 'default' enter sequence for region mainregion */
	private void enterSequence_mainregion_default() {
		/* 'default' enter sequence for region mainregion */
		react_mainregion__entry_Default();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_mainregion_off() {
		/* Default exit sequence for state off */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_mainregion_idle() {
		/* Default exit sequence for state idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence_mainregion_on() {
		/* Default exit sequence for state on */
		exitSequence_mainregion_on_r1();
	}
	
	/* Default exit sequence for state working */
	private void exitSequence_mainregion_on_r1_working() {
		/* Default exit sequence for state working */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state analyzing */
	private void exitSequence_mainregion_on_r1_analyzing() {
		/* Default exit sequence for state analyzing */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_mainregion__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region mainregion */
	private void exitSequence_mainregion() {
		/* Default exit sequence for region mainregion */
		switch (stateVector[0]) {
		case MAINREGION_OFF:
			exitSequence_mainregion_off();
			break;
		case MAINREGION_IDLE:
			exitSequence_mainregion_idle();
			break;
		case MAINREGION_ON_R1_WORKING:
			exitSequence_mainregion_on_r1_working();
			break;
		case MAINREGION_ON_R1_ANALYZING:
			exitSequence_mainregion_on_r1_analyzing();
			break;
		case MAINREGION__FINAL_:
			exitSequence_mainregion__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_mainregion_on_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAINREGION_ON_R1_WORKING:
			exitSequence_mainregion_on_r1_working();
			break;
		case MAINREGION_ON_R1_ANALYZING:
			exitSequence_mainregion_on_r1_analyzing();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_mainregion__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_mainregion_off_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before
		;
	}
	
	private long mainregion_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (power_on) {
				exitSequence_mainregion_off();
				enterSequence_mainregion_idle_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainregion_idle_react(long transitioned_before) {
		/* The reactions of state idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (work) {
				exitSequence_mainregion_idle();
				enterSequence_mainregion_on_r1_working_default();
				react(0l);
				transitioned_after = 0l;
			} else {
				if (analize) {
					exitSequence_mainregion_idle();
					enterSequence_mainregion_on_r1_analyzing_default();
					react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainregion_on_react(long transitioned_before) {
		/* The reactions of state on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (end) {
				exitSequence_mainregion_on();
				enterSequence_mainregion__final__default();
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long mainregion_on_r1_working_react(long transitioned_before) {
		/* The reactions of state working. */
		long transitioned_after = transitioned_before;
		/* If no transition was taken then execute local reactions */
		transitioned_after = mainregion_on_react(transitioned_before);
		return transitioned_after
		;
	}
	
	private long mainregion_on_r1_analyzing_react(long transitioned_before) {
		/* The reactions of state analyzing. */
		long transitioned_after = transitioned_before;
		/* If no transition was taken then execute local reactions */
		transitioned_after = mainregion_on_react(transitioned_before);
		return transitioned_after
		;
	}
	
	private long mainregion__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return react(transitioned_before)
		;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
