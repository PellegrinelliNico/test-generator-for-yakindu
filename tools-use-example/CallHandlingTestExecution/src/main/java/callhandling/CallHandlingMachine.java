/** Generated by itemis CREATE code generator. */
package callhandling;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class CallHandlingMachine implements IStatemachine, ITimed, IEventDriven {
	public static class Phone {
		private CallHandlingMachine parent;
		
		public Phone(CallHandlingMachine parent) {
			this.parent = parent;
		}
		private boolean incoming_call;
		
		
		public void raiseIncoming_call() {
			parent.inEventQueue.add(() -> {
				incoming_call = true;
			});
			parent.runCycle();
		}
		
		private long duration;
		
		public long getDuration() {
			return duration;
		}
		
		public void setDuration(long value) {
			this.duration = value;
		}
		
	}
	
	public static class User {
		private CallHandlingMachine parent;
		
		public User(CallHandlingMachine parent) {
			this.parent = parent;
		}
		private boolean accept_call;
		
		
		public void raiseAccept_call() {
			parent.inEventQueue.add(() -> {
				accept_call = true;
			});
			parent.runCycle();
		}
		
		private boolean dismiss_call;
		
		
		public void raiseDismiss_call() {
			parent.inEventQueue.add(() -> {
				dismiss_call = true;
			});
			parent.runCycle();
		}
		
	}
	
	protected Phone phone;
	
	protected User user;
	
	public enum State {
		MAIN_REGION_IDLE,
		MAIN_REGION_INCOMING_CALL,
		MAIN_REGION_ACTIVE_CALL,
		MAIN_REGION_DISMISS_CALL,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public CallHandlingMachine() {
		phone = new Phone(this);
		user = new User(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart CallHandling */
		phone.setDuration(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default enter sequence for statechart CallHandling */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default exit sequence for statechart CallHandling */
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		phone.incoming_call = false;
		user.accept_call = false;
		user.dismiss_call = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_IDLE:
			main_region_Idle_react(-1l);
			break;
		case MAIN_REGION_INCOMING_CALL:
			main_region_Incoming_Call_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_CALL:
			main_region_Active_Call_react(-1l);
			break;
		case MAIN_REGION_DISMISS_CALL:
			main_region_Dismiss_Call_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_IDLE:
			return stateVector[0] == State.MAIN_REGION_IDLE;
		case MAIN_REGION_INCOMING_CALL:
			return stateVector[0] == State.MAIN_REGION_INCOMING_CALL;
		case MAIN_REGION_ACTIVE_CALL:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_CALL;
		case MAIN_REGION_DISMISS_CALL:
			return stateVector[0] == State.MAIN_REGION_DISMISS_CALL;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Phone phone() {
		return phone;
	}
	
	public User user() {
		return user;
	}
	
	
	/* Entry action for state 'Active Call'. */
	private void entryAction_main_region_Active_Call() {
		/* Entry action for state 'Active Call'. */
		timerService.setTimer(this, 0, (1l * 1000l), true);
	}
	
	/* Entry action for state 'Dismiss Call'. */
	private void entryAction_main_region_Dismiss_Call() {
		/* Entry action for state 'Dismiss Call'. */
		timerService.setTimer(this, 1, (2l * 1000l), false);
	}
	
	/* Exit action for state 'Active Call'. */
	private void exitAction_main_region_Active_Call() {
		/* Exit action for state 'Active Call'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Dismiss Call'. */
	private void exitAction_main_region_Dismiss_Call() {
		/* Exit action for state 'Dismiss Call'. */
		timerService.unsetTimer(this, 1);
		phone.setDuration(0l);
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_IDLE;
	}
	
	/* 'default' enter sequence for state Incoming Call */
	private void enterSequence_main_region_Incoming_Call_default() {
		/* 'default' enter sequence for state Incoming Call */
		stateVector[0] = State.MAIN_REGION_INCOMING_CALL;
	}
	
	/* 'default' enter sequence for state Active Call */
	private void enterSequence_main_region_Active_Call_default() {
		/* 'default' enter sequence for state Active Call */
		entryAction_main_region_Active_Call();
		stateVector[0] = State.MAIN_REGION_ACTIVE_CALL;
	}
	
	/* 'default' enter sequence for state Dismiss Call */
	private void enterSequence_main_region_Dismiss_Call_default() {
		/* 'default' enter sequence for state Dismiss Call */
		entryAction_main_region_Dismiss_Call();
		stateVector[0] = State.MAIN_REGION_DISMISS_CALL;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Incoming Call */
	private void exitSequence_main_region_Incoming_Call() {
		/* Default exit sequence for state Incoming Call */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Active Call */
	private void exitSequence_main_region_Active_Call() {
		/* Default exit sequence for state Active Call */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Active_Call();
	}
	
	/* Default exit sequence for state Dismiss Call */
	private void exitSequence_main_region_Dismiss_Call() {
		/* Default exit sequence for state Dismiss Call */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Dismiss_Call();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_IDLE:
			exitSequence_main_region_Idle();
			break;
		case MAIN_REGION_INCOMING_CALL:
			exitSequence_main_region_Incoming_Call();
			break;
		case MAIN_REGION_ACTIVE_CALL:
			exitSequence_main_region_Active_Call();
			break;
		case MAIN_REGION_DISMISS_CALL:
			exitSequence_main_region_Dismiss_Call();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Idle_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before
		;
	}
	
	private long main_region_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (phone.incoming_call) {
				exitSequence_main_region_Idle();
				enterSequence_main_region_Incoming_Call_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long main_region_Incoming_Call_react(long transitioned_before) {
		/* The reactions of state Incoming Call. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.accept_call) {
				exitSequence_main_region_Incoming_Call();
				enterSequence_main_region_Active_Call_default();
				react(0l);
				transitioned_after = 0l;
			} else {
				if (user.dismiss_call) {
					exitSequence_main_region_Incoming_Call();
					enterSequence_main_region_Dismiss_Call_default();
					react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long main_region_Active_Call_react(long transitioned_before) {
		/* The reactions of state Active Call. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.dismiss_call) {
				exitSequence_main_region_Active_Call();
				enterSequence_main_region_Dismiss_Call_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			if (timeEvents[0]) {
				phone.setDuration(phone.getDuration() + 1l);
			}
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long main_region_Dismiss_Call_react(long transitioned_before) {
		/* The reactions of state Dismiss Call. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Dismiss_Call();
				timeEvents[1] = false;
				enterSequence_main_region_Idle_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
