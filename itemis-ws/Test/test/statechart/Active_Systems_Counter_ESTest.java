/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:13:59 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Active_Systems_Counter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Active_Systems_Counter_ESTest extends Active_Systems_Counter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      boolean boolean0 = active_Systems_Counter0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.setIsExecuting(true);
      boolean boolean0 = active_Systems_Counter0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      boolean boolean0 = active_Systems_Counter0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.counter = null;
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter();
      assertNull(active_Systems_Counter_Counter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter();
      active_Systems_Counter_Counter0.setTotal((-2308L));
      assertEquals((-2308L), active_Systems_Counter_Counter0.getTotal());
      
      Active_Systems_Counter.Counter active_Systems_Counter_Counter1 = active_Systems_Counter0.counter();
      assertEquals(0L, active_Systems_Counter_Counter1.getActiveSystems());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter();
      active_Systems_Counter_Counter0.setInactiveSystems(384L);
      assertEquals(384L, active_Systems_Counter_Counter0.getInactiveSystems());
      
      Active_Systems_Counter.Counter active_Systems_Counter_Counter1 = active_Systems_Counter0.counter();
      assertEquals(384L, active_Systems_Counter_Counter1.getInactiveSystems());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.counter.setInactiveSystems((-3411L));
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter();
      assertEquals(0L, active_Systems_Counter_Counter0.getTotal());
      assertEquals(0L, active_Systems_Counter_Counter0.getActiveSystems());
      assertEquals((-3411L), active_Systems_Counter_Counter0.getInactiveSystems());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter;
      active_Systems_Counter_Counter0.setActiveSystems(752L);
      assertEquals(752L, active_Systems_Counter_Counter0.getActiveSystems());
      
      Active_Systems_Counter.Counter active_Systems_Counter_Counter1 = active_Systems_Counter0.counter();
      assertEquals(0L, active_Systems_Counter_Counter1.getTotal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.counter.setActiveSystems((-133L));
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter();
      assertEquals(0L, active_Systems_Counter_Counter0.getTotal());
      assertEquals(0L, active_Systems_Counter_Counter0.getInactiveSystems());
      assertEquals((-133L), active_Systems_Counter_Counter0.getActiveSystems());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.enter();
      active_Systems_Counter0.counter = null;
      // Undeclared exception!
      try { 
        active_Systems_Counter0.raiseIncrement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Active_Systems_Counter$Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.enter();
      active_Systems_Counter0.counter = null;
      // Undeclared exception!
      try { 
        active_Systems_Counter0.raiseDecrement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Active_Systems_Counter$Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      // Undeclared exception!
      try { 
        active_Systems_Counter0.isStateActive((Active_Systems_Counter.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Active_Systems_Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.counter = null;
      // Undeclared exception!
      try { 
        active_Systems_Counter0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Active_Systems_Counter$Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = active_Systems_Counter0.counter;
      active_Systems_Counter_Counter0.setTotal(752L);
      assertEquals(752L, active_Systems_Counter_Counter0.getTotal());
      
      Active_Systems_Counter.Counter active_Systems_Counter_Counter1 = active_Systems_Counter0.counter();
      assertEquals(0L, active_Systems_Counter_Counter1.getInactiveSystems());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.enter();
      active_Systems_Counter0.raiseDecrement();
      assertTrue(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.enter();
      assertTrue(active_Systems_Counter0.isActive());
      
      active_Systems_Counter0.exit();
      assertFalse(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.State active_Systems_Counter_State0 = Active_Systems_Counter.State.MAIN_REGION_STATICUPDATE;
      active_Systems_Counter0.enter();
      boolean boolean0 = active_Systems_Counter0.isStateActive(active_Systems_Counter_State0);
      assertTrue(active_Systems_Counter0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.State active_Systems_Counter_State0 = Active_Systems_Counter.State.$NULLSTATE$;
      boolean boolean0 = active_Systems_Counter0.isStateActive(active_Systems_Counter_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      Active_Systems_Counter.State active_Systems_Counter_State0 = Active_Systems_Counter.State.MAIN_REGION_STATICUPDATE;
      boolean boolean0 = active_Systems_Counter0.isStateActive(active_Systems_Counter_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.setIsExecuting(true);
      active_Systems_Counter0.raiseDecrement();
      active_Systems_Counter0.setIsExecuting(false);
      active_Systems_Counter0.raiseIncrement();
      assertFalse(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.setIsExecuting(true);
      active_Systems_Counter0.raiseIncrement();
      boolean boolean0 = active_Systems_Counter0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.enter();
      boolean boolean0 = active_Systems_Counter0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      boolean boolean0 = active_Systems_Counter0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.setIsExecuting(true);
      active_Systems_Counter0.exit();
      assertFalse(active_Systems_Counter0.isFinal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.exit();
      assertFalse(active_Systems_Counter0.isFinal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = new Active_Systems_Counter.Counter();
      long long0 = active_Systems_Counter_Counter0.getActiveSystems();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = new Active_Systems_Counter.Counter();
      long long0 = active_Systems_Counter_Counter0.getTotal();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Active_Systems_Counter.Counter active_Systems_Counter_Counter0 = new Active_Systems_Counter.Counter();
      long long0 = active_Systems_Counter_Counter0.getInactiveSystems();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      assertFalse(active_Systems_Counter0.isActive());
      
      active_Systems_Counter0.enter();
      active_Systems_Counter0.raiseIncrement();
      assertTrue(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      active_Systems_Counter0.setIsExecuting(true);
      active_Systems_Counter0.enter();
      assertFalse(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      boolean boolean0 = active_Systems_Counter0.isFinal();
      assertFalse(boolean0);
      assertFalse(active_Systems_Counter0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Active_Systems_Counter active_Systems_Counter0 = new Active_Systems_Counter();
      assertFalse(active_Systems_Counter0.isActive());
      
      active_Systems_Counter0.enter();
      active_Systems_Counter0.triggerWithoutEvent();
      assertTrue(active_Systems_Counter0.isActive());
  }
}
