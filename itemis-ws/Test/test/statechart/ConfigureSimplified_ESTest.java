/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 09:28:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.ConfigureSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigureSimplified_ESTest extends ConfigureSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback1 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(configureSimplified_OperationCallback1).configure(anyLong());
      doReturn(true).when(configureSimplified_OperationCallback1).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback1);
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      configureSimplified0.triggerWithoutEvent();
      assertFalse(configureSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      // Undeclared exception!
      try { 
        configureSimplified0.raiseTimeEvent(1720);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        configureSimplified0.raiseTimeEvent(958);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 958
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      // Undeclared exception!
      try { 
        configureSimplified0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      // Undeclared exception!
      try { 
        configureSimplified0.raiseCompleted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      // Undeclared exception!
      try { 
        configureSimplified0.isStateActive((ConfigureSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      configureSimplified0.raiseCompleted();
      assertTrue(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.setTimerService(iTimerService0);
      configureSimplified0.enter();
      assertTrue(configureSimplified0.isActive());
      
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_BOOTED;
      configureSimplified0.raiseCompleted();
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_WAIT_FOR_BOOT;
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.setTimerService(iTimerService0);
      assertFalse(configureSimplified0.isActive());
      
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_WAIT_FOR_CONNECT;
      configureSimplified0.enter();
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.$NULLSTATE$;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(configureSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_FAILED;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(configureSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_WAIT_FOR_BOOT;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(boolean0);
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_CONFIGURE;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(boolean0);
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_BOOTED;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(boolean0);
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ConfigureSimplified.State configureSimplified_State0 = ConfigureSimplified.State.MAIN_REGION_WAIT_FOR_CONNECT;
      boolean boolean0 = configureSimplified0.isStateActive(configureSimplified_State0);
      assertFalse(configureSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        configureSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(configureSimplified_OperationCallback0).configure(anyLong());
      doReturn(true).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      boolean boolean0 = configureSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      boolean boolean0 = configureSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        configureSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      // Undeclared exception!
      try { 
        configureSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ConfigureSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.setTimerService(iTimerService0);
      configureSimplified0.enter();
      configureSimplified0.raiseTimeEvent(0);
      assertTrue(configureSimplified0.isActive());
      
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      configureSimplified0.raiseCompleted();
      assertTrue(configureSimplified0.isActive());
      
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      boolean boolean0 = configureSimplified0.isFinal();
      assertFalse(configureSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback1 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(50L).when(configureSimplified_OperationCallback1).configure(anyLong());
      doReturn(true).when(configureSimplified_OperationCallback1).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback1);
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
      
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback0).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      configureSimplified0.raiseConnected();
      configureSimplified0.raiseCompleted();
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setTimerService(iTimerService0);
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.enter();
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback1 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(configureSimplified_OperationCallback1).hasMore(anyLong());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback1);
      configureSimplified0.raiseConnected();
      assertTrue(configureSimplified0.isActive());
      
      configureSimplified0.exit();
      assertFalse(configureSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConfigureSimplified configureSimplified0 = new ConfigureSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ConfigureSimplified.OperationCallback configureSimplified_OperationCallback0 = mock(ConfigureSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      configureSimplified0.setOperationCallback(configureSimplified_OperationCallback0);
      configureSimplified0.setTimerService(iTimerService0);
      assertFalse(configureSimplified0.isActive());
      
      configureSimplified0.enter();
      configureSimplified0.raiseTimeEvent(0);
      configureSimplified0.raiseTimeEvent(0);
      assertTrue(configureSimplified0.isActive());
  }
}
