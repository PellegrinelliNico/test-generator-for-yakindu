/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 19:29:38 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.BaseSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSimplified_ESTest extends BaseSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.triggerWithoutEvent();
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.raiseCarDetected();
      assertFalse(baseSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        baseSimplified0.raiseTimeEvent((-212));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -212
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.isStateActive((BaseSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      baseSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        baseSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      baseSimplified0.raiseButtonReleased();
      assertTrue(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      baseSimplified0.exit();
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      assertTrue(baseSimplified0.isActive());
      
      baseSimplified0.exit();
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      // Undeclared exception!
      try { 
        baseSimplified0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Local_setLED is not raised!
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      baseSimplified0.raiseTimeEvent(0);
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.MAIN_REGION_GREEN;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertTrue(baseSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.MAIN_REGION_RED;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertTrue(baseSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.$NULLSTATE$;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.MAIN_REGION_YELLOW;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.MAIN_REGION_GREEN;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      BaseSimplified.State baseSimplified_State0 = BaseSimplified.State.MAIN_REGION_RED;
      boolean boolean0 = baseSimplified0.isStateActive(baseSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.raiseButtonPressed();
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      boolean boolean0 = baseSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.raiseButtonReleased();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.raiseCarDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      boolean boolean0 = baseSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      baseSimplified0.enter();
      baseSimplified0.raiseTimeEvent(0);
      assertTrue(baseSimplified0.isActive());
      
      baseSimplified0.exit();
      assertFalse(baseSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      baseSimplified0.setTimerService(iTimerService0);
      assertFalse(baseSimplified0.isActive());
      
      baseSimplified0.enter();
      boolean boolean0 = baseSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseSimplified baseSimplified0 = new BaseSimplified();
      // Undeclared exception!
      try { 
        baseSimplified0.raiseButtonPressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BaseSimplified", e);
      }
  }
}
