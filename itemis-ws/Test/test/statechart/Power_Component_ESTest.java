/*
 * This file was automatically generated by EvoSuite
 * Fri May 17 07:35:24 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Power_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Power_Component_ESTest extends Power_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(0L, power_Component0.getTotalPower());
      
      power_Component0.setTotalPower(1L);
      long long0 = power_Component0.getTotalPower();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setTotalPower((-3525L));
      long long0 = power_Component0.getTotalPower();
      assertEquals((-3525L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setTotalHour(352L);
      long long0 = power_Component0.getTotalHour();
      assertEquals(352L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setTotalHour((-2654L));
      long long0 = power_Component0.getTotalHour();
      assertEquals((-2654L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(3600L, power_Component0.getTime());
      
      power_Component0.setTime(0L);
      power_Component0.getTime();
      assertEquals(20L, power_Component0.getKilowatt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setTime((-1553L));
      long long0 = power_Component0.getTime();
      assertEquals((-1553L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(20L, power_Component0.getKilowatt());
      
      power_Component0.setKilowatt(0L);
      power_Component0.getKilowatt();
      assertEquals(3600L, power_Component0.getTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setKilowatt((-467L));
      long long0 = power_Component0.getKilowatt();
      assertEquals((-467L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setKWh(662L);
      long long0 = power_Component0.getKWh();
      assertEquals(662L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(0L, power_Component0.getKWh());
      
      power_Component0.setKWh((-1L));
      long long0 = power_Component0.getKWh();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setIsExecuting(true);
      boolean boolean0 = power_Component0.getIsExecuting();
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(20L, power_Component0.getKilowatt());
      assertTrue(boolean0);
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(1L, power_Component0.getHour());
      
      power_Component0.setHour(0L);
      power_Component0.getHour();
      assertEquals(20L, power_Component0.getKilowatt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertEquals(1L, power_Component0.getHour());
      
      power_Component0.setHour((-1L));
      long long0 = power_Component0.getHour();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.Device power_Component_Device0 = new Power_Component.Device();
      power_Component_Device0.setIsOn(true);
      power_Component0.device = power_Component_Device0;
      assertTrue(power_Component_Device0.getIsOn());
      
      Power_Component.Device power_Component_Device1 = power_Component0.device();
      assertTrue(power_Component_Device1.getIsOn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.isStateActive((Power_Component.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.State power_Component_State0 = Power_Component.State.$NULLSTATE$;
      boolean boolean0 = power_Component0.isStateActive(power_Component_State0);
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertFalse(boolean0);
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(0L, power_Component0.getKWh());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.State power_Component_State0 = Power_Component.State._POWER_COMPONENT__POWER_COMPONENT;
      boolean boolean0 = power_Component0.isStateActive(power_Component_State0);
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalPower());
      assertFalse(boolean0);
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalHour());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.State power_Component_State0 = Power_Component.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___CONSUMING_POWER_;
      boolean boolean0 = power_Component0.isStateActive(power_Component_State0);
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(1L, power_Component0.getHour());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.State power_Component_State0 = Power_Component.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___NOPOWERCONSUMED_;
      boolean boolean0 = power_Component0.isStateActive(power_Component_State0);
      assertEquals(0L, power_Component0.getTotalPower());
      assertFalse(boolean0);
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      boolean boolean0 = power_Component0.nextEvent();
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(1L, power_Component0.getHour());
      assertFalse(boolean0);
      assertEquals(0L, power_Component0.getTotalHour());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      boolean boolean0 = power_Component0.isActive();
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(3600L, power_Component0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      assertFalse(power_Component0.isActive());
      
      power_Component0.exit();
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(20L, power_Component0.getKilowatt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Power_Component.Device power_Component_Device0 = new Power_Component.Device();
      boolean boolean0 = power_Component_Device0.getIsOn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getKWh();
      assertEquals(1L, power_Component0.getHour());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, long0);
      assertEquals(0L, power_Component0.getTotalPower());
      assertFalse(power_Component0.isActive());
      assertEquals(0L, power_Component0.getTotalHour());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.raiseTimeEvent((-1146));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      boolean boolean0 = power_Component0.isFinal();
      assertFalse(power_Component0.isActive());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertFalse(boolean0);
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(3600L, power_Component0.getTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getKilowatt();
      assertEquals(1L, power_Component0.getHour());
      assertEquals(20L, long0);
      assertFalse(power_Component0.isActive());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(3600L, power_Component0.getTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getHour();
      assertFalse(power_Component0.isActive());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(1L, long0);
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(3600L, power_Component0.getTime());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      // Undeclared exception!
      try { 
        power_Component0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      Power_Component.Device power_Component_Device0 = power_Component0.device();
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(3600L, power_Component0.getTime());
      assertFalse(power_Component0.isActive());
      assertFalse(power_Component_Device0.getIsOn());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.getTimerService();
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertFalse(power_Component0.isActive());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      boolean boolean0 = power_Component0.getIsExecuting();
      assertEquals(1L, power_Component0.getHour());
      assertFalse(boolean0);
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(3600L, power_Component0.getTime());
      assertFalse(power_Component0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setIsExecuting(true);
      power_Component0.exit();
      assertFalse(power_Component0.isActive());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getTotalPower());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      power_Component0.setTimerService((ITimerService) null);
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(3600L, power_Component0.getTime());
      assertFalse(power_Component0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getTotalPower();
      assertFalse(power_Component0.isActive());
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(3600L, power_Component0.getTime());
      assertEquals(0L, long0);
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getTotalHour();
      assertEquals(1L, power_Component0.getHour());
      assertEquals(0L, long0);
      assertEquals(3600L, power_Component0.getTime());
      assertFalse(power_Component0.isActive());
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(0L, power_Component0.getKWh());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Power_Component power_Component0 = new Power_Component();
      long long0 = power_Component0.getTime();
      assertEquals(20L, power_Component0.getKilowatt());
      assertEquals(3600L, long0);
      assertEquals(0L, power_Component0.getTotalPower());
      assertEquals(0L, power_Component0.getKWh());
      assertEquals(0L, power_Component0.getTotalHour());
      assertEquals(1L, power_Component0.getHour());
      assertFalse(power_Component0.isActive());
  }
}
