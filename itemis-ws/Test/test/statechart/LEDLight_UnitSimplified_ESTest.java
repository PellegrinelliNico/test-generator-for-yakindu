/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:00:06 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.LEDLight_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LEDLight_UnitSimplified_ESTest extends LEDLight_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Brightness lEDLight_UnitSimplified_Brightness0 = lEDLight_UnitSimplified0.brightness();
      lEDLight_UnitSimplified_Brightness0.raiseUp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Brightness lEDLight_UnitSimplified_Brightness0 = lEDLight_UnitSimplified0.brightness();
      lEDLight_UnitSimplified_Brightness0.raiseDown();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      lEDLight_UnitSimplified0.triggerWithoutEvent();
      assertFalse(lEDLight_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified0.raiseTimeEvent((-257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -257
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified0.isStateActive((LEDLight_UnitSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.Brightness lEDLight_UnitSimplified_Brightness0 = new LEDLight_UnitSimplified.Brightness(lEDLight_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = new LEDLight_UnitSimplified.Device(lEDLight_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LEDLight_UnitSimplified.Bulb lEDLight_UnitSimplified_Bulb0 = new LEDLight_UnitSimplified.Bulb();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOn();
      lEDLight_UnitSimplified_Device0.raiseOn();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOff();
      assertTrue(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOn();
      assertTrue(lEDLight_UnitSimplified0.isActive());
      
      lEDLight_UnitSimplified0.exit();
      assertFalse(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      lEDLight_UnitSimplified0.enter();
      assertTrue(lEDLight_UnitSimplified0.isActive());
      
      lEDLight_UnitSimplified0.exit();
      assertFalse(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      lEDLight_UnitSimplified0.enter();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertTrue(lEDLight_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOn();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON_STANDBY;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertTrue(lEDLight_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      lEDLight_UnitSimplified0.enter();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON_;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertTrue(lEDLight_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___OFF_;
      lEDLight_UnitSimplified0.enter();
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertTrue(lEDLight_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State.$NULLSTATE$;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON__LUMINOSITY__CHANGE_LUMINOSITY_LEVEL;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON_STANDBY;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON_;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___OFF_;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      lEDLight_UnitSimplified0.raiseTimeEvent(0);
      assertFalse(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      boolean boolean0 = lEDLight_UnitSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      lEDLight_UnitSimplified0.exit();
      assertFalse(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      LEDLight_UnitSimplified.Brightness lEDLight_UnitSimplified_Brightness0 = lEDLight_UnitSimplified0.brightness();
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified_Brightness0.raiseUp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      assertFalse(lEDLight_UnitSimplified0.isActive());
      
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOn();
      lEDLight_UnitSimplified_Device0.raiseOff();
      assertTrue(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      LEDLight_UnitSimplified.Device lEDLight_UnitSimplified_Device0 = lEDLight_UnitSimplified0.device();
      assertFalse(lEDLight_UnitSimplified0.isActive());
      
      lEDLight_UnitSimplified0.enter();
      lEDLight_UnitSimplified_Device0.raiseOn();
      LEDLight_UnitSimplified.State lEDLight_UnitSimplified_State0 = LEDLight_UnitSimplified.State._LED_LIGHT_UNIT___ON_;
      boolean boolean0 = lEDLight_UnitSimplified0.isStateActive(lEDLight_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      boolean boolean0 = lEDLight_UnitSimplified0.isFinal();
      assertFalse(lEDLight_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      lEDLight_UnitSimplified0.bulb();
      assertFalse(lEDLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      // Undeclared exception!
      try { 
        lEDLight_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LEDLight_UnitSimplified lEDLight_UnitSimplified0 = new LEDLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lEDLight_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(lEDLight_UnitSimplified0.isActive());
      
      lEDLight_UnitSimplified0.enter();
      boolean boolean0 = lEDLight_UnitSimplified0.isActive();
      assertTrue(boolean0);
  }
}
