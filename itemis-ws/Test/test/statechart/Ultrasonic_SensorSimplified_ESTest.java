/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:32:52 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Ultrasonic_SensorSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ultrasonic_SensorSimplified_ESTest extends Ultrasonic_SensorSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      Ultrasonic_SensorSimplified.Status ultrasonic_SensorSimplified_Status0 = new Ultrasonic_SensorSimplified.Status(ultrasonic_SensorSimplified0);
      ultrasonic_SensorSimplified_Status0.raiseNoActivitySensed();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      Ultrasonic_SensorSimplified.Status ultrasonic_SensorSimplified_Status0 = new Ultrasonic_SensorSimplified.Status(ultrasonic_SensorSimplified0);
      ultrasonic_SensorSimplified_Status0.raiseActivitySensed();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.raiseTimeEvent(186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 186
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.isStateActive((Ultrasonic_SensorSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.enter();
      assertTrue(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.raiseOff();
      assertFalse(ultrasonic_SensorSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ultrasonic_SensorSimplified.Transmitter ultrasonic_SensorSimplified_Transmitter0 = new Ultrasonic_SensorSimplified.Transmitter();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ultrasonic_SensorSimplified.Receiver ultrasonic_SensorSimplified_Receiver0 = new Ultrasonic_SensorSimplified.Receiver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseOff();
      ultrasonic_SensorSimplified0.raiseOff();
      assertFalse(ultrasonic_SensorSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseTimeEvent(1);
      assertTrue(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseTimeEvent(0);
      assertTrue(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseTimeEvent(2);
      assertTrue(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseOff();
      assertTrue(ultrasonic_SensorSimplified0.isActive());
      
      ultrasonic_SensorSimplified0.exit();
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.exit();
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseOff();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___OFF_;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICRECEIVER_RECEIVING;
      ultrasonic_SensorSimplified0.enter();
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertTrue(ultrasonic_SensorSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICTRANSDUCER_TRANSMITTING;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING_;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State.$NULLSTATE$;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING_;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICRECEIVER_RECEIVING;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___OFF_;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.State ultrasonic_SensorSimplified_State0 = Ultrasonic_SensorSimplified.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICTRANSDUCER_TRANSMITTING;
      boolean boolean0 = ultrasonic_SensorSimplified0.isStateActive(ultrasonic_SensorSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.triggerWithoutEvent();
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      boolean boolean0 = ultrasonic_SensorSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ultrasonic_SensorSimplified0.exit();
      assertFalse(ultrasonic_SensorSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ultrasonic_SensorSimplified0.transmitter();
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      boolean boolean0 = ultrasonic_SensorSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ultrasonic_SensorSimplified0.receiver();
      assertFalse(ultrasonic_SensorSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      ultrasonic_SensorSimplified0.enter();
      ultrasonic_SensorSimplified0.raiseOff();
      ultrasonic_SensorSimplified0.raiseOn();
      assertFalse(ultrasonic_SensorSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ultrasonic_SensorSimplified0.setTimerService(iTimerService0);
      assertFalse(ultrasonic_SensorSimplified0.isActive());
      
      ultrasonic_SensorSimplified0.enter();
      boolean boolean0 = ultrasonic_SensorSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ultrasonic_SensorSimplified ultrasonic_SensorSimplified0 = new Ultrasonic_SensorSimplified();
      Ultrasonic_SensorSimplified.Status ultrasonic_SensorSimplified_Status0 = ultrasonic_SensorSimplified0.status();
      // Undeclared exception!
      try { 
        ultrasonic_SensorSimplified_Status0.raiseNoActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_SensorSimplified", e);
      }
  }
}
