/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 21:04:20 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Test_remove_unnecessary_nesting_transfer_transitions;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Test_remove_unnecessary_nesting_transfer_transitions_ESTest extends Test_remove_unnecessary_nesting_transfer_transitions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.setIsExecuting(true);
      test_remove_unnecessary_nesting_transfer_transitions0.raiseHello();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.exit();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.enter();
      Test_remove_unnecessary_nesting_transfer_transitions.State test_remove_unnecessary_nesting_transfer_transitions_State0 = Test_remove_unnecessary_nesting_transfer_transitions.State.MAIN_REGION_A;
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isStateActive(test_remove_unnecessary_nesting_transfer_transitions_State0);
      assertTrue(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      Test_remove_unnecessary_nesting_transfer_transitions.State test_remove_unnecessary_nesting_transfer_transitions_State0 = Test_remove_unnecessary_nesting_transfer_transitions.State.MAIN_REGION_C;
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isStateActive(test_remove_unnecessary_nesting_transfer_transitions_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      Test_remove_unnecessary_nesting_transfer_transitions.State test_remove_unnecessary_nesting_transfer_transitions_State0 = Test_remove_unnecessary_nesting_transfer_transitions.State.MAIN_REGION_A;
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isStateActive(test_remove_unnecessary_nesting_transfer_transitions_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      Test_remove_unnecessary_nesting_transfer_transitions.State test_remove_unnecessary_nesting_transfer_transitions_State0 = Test_remove_unnecessary_nesting_transfer_transitions.State.$NULLSTATE$;
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isStateActive(test_remove_unnecessary_nesting_transfer_transitions_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      Test_remove_unnecessary_nesting_transfer_transitions.State test_remove_unnecessary_nesting_transfer_transitions_State0 = Test_remove_unnecessary_nesting_transfer_transitions.State.MAIN_REGION_C_D_B;
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isStateActive(test_remove_unnecessary_nesting_transfer_transitions_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.setIsExecuting(true);
      test_remove_unnecessary_nesting_transfer_transitions0.raiseOperate();
      test_remove_unnecessary_nesting_transfer_transitions0.raiseOperate();
      test_remove_unnecessary_nesting_transfer_transitions0.setIsExecuting(false);
      test_remove_unnecessary_nesting_transfer_transitions0.triggerWithoutEvent();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
      
      test_remove_unnecessary_nesting_transfer_transitions0.enter();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.setIsExecuting(true);
      test_remove_unnecessary_nesting_transfer_transitions0.exit();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.setIsExecuting(true);
      test_remove_unnecessary_nesting_transfer_transitions0.enter();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
      
      test_remove_unnecessary_nesting_transfer_transitions0.enter();
      test_remove_unnecessary_nesting_transfer_transitions0.triggerWithoutEvent();
      assertTrue(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      boolean boolean0 = test_remove_unnecessary_nesting_transfer_transitions0.isFinal();
      assertFalse(boolean0);
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Test_remove_unnecessary_nesting_transfer_transitions test_remove_unnecessary_nesting_transfer_transitions0 = new Test_remove_unnecessary_nesting_transfer_transitions();
      test_remove_unnecessary_nesting_transfer_transitions0.enter();
      assertTrue(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
      
      test_remove_unnecessary_nesting_transfer_transitions0.exit();
      assertFalse(test_remove_unnecessary_nesting_transfer_transitions0.isActive());
  }
}
