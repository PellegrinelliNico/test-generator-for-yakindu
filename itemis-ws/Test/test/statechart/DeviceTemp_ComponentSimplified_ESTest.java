/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:21:03 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.DeviceTemp_ComponentSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeviceTemp_ComponentSimplified_ESTest extends DeviceTemp_ComponentSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      deviceTemp_ComponentSimplified0.raiseTimeEvent(0);
      assertFalse(deviceTemp_ComponentSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        deviceTemp_ComponentSimplified0.raiseTimeEvent(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("statechart.DeviceTemp_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      // Undeclared exception!
      try { 
        deviceTemp_ComponentSimplified0.isStateActive((DeviceTemp_ComponentSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.DeviceTemp_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.Heat deviceTemp_ComponentSimplified_Heat0 = new DeviceTemp_ComponentSimplified.Heat(deviceTemp_ComponentSimplified0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeviceTemp_ComponentSimplified.Device deviceTemp_ComponentSimplified_Device0 = new DeviceTemp_ComponentSimplified.Device();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      deviceTemp_ComponentSimplified0.exit();
      assertFalse(deviceTemp_ComponentSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      deviceTemp_ComponentSimplified0.enter();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertTrue(deviceTemp_ComponentSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE;
      deviceTemp_ComponentSimplified0.enter();
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertTrue(deviceTemp_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      deviceTemp_ComponentSimplified0.enter();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertTrue(deviceTemp_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State.$NULLSTATE$;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      DeviceTemp_ComponentSimplified.State deviceTemp_ComponentSimplified_State0 = DeviceTemp_ComponentSimplified.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE;
      boolean boolean0 = deviceTemp_ComponentSimplified0.isStateActive(deviceTemp_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      deviceTemp_ComponentSimplified0.triggerWithoutEvent();
      assertFalse(deviceTemp_ComponentSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      assertFalse(deviceTemp_ComponentSimplified0.isActive());
      
      deviceTemp_ComponentSimplified0.enter();
      boolean boolean0 = deviceTemp_ComponentSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      boolean boolean0 = deviceTemp_ComponentSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      // Undeclared exception!
      try { 
        deviceTemp_ComponentSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      deviceTemp_ComponentSimplified0.enter();
      assertTrue(deviceTemp_ComponentSimplified0.isActive());
      
      deviceTemp_ComponentSimplified0.exit();
      assertFalse(deviceTemp_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      deviceTemp_ComponentSimplified0.device();
      assertFalse(deviceTemp_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      boolean boolean0 = deviceTemp_ComponentSimplified0.isFinal();
      assertFalse(deviceTemp_ComponentSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      // Undeclared exception!
      try { 
        deviceTemp_ComponentSimplified0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      // Undeclared exception!
      try { 
        deviceTemp_ComponentSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeviceTemp_ComponentSimplified deviceTemp_ComponentSimplified0 = new DeviceTemp_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      deviceTemp_ComponentSimplified0.setTimerService(iTimerService0);
      DeviceTemp_ComponentSimplified.Heat deviceTemp_ComponentSimplified_Heat0 = deviceTemp_ComponentSimplified0.heat();
      assertFalse(deviceTemp_ComponentSimplified0.isActive());
      
      deviceTemp_ComponentSimplified0.enter();
      deviceTemp_ComponentSimplified_Heat0.raiseContinue();
      assertTrue(deviceTemp_ComponentSimplified0.isActive());
  }
}
