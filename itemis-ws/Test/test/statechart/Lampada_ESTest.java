/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 19:47:53 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Lampada;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lampada_ESTest extends Lampada_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      lampada0.raisePoweron();
      boolean boolean0 = lampada0.nextEvent();
      assertTrue(boolean0);
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.nextEvent();
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setVal(306L);
      long long0 = lampada0.getVal();
      assertEquals(306L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setVal((-1124L));
      long long0 = lampada0.getVal();
      assertEquals((-1124L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      boolean boolean0 = lampada0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      boolean boolean0 = lampada0.getIsExecuting();
      assertEquals(0L, lampada0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      // Undeclared exception!
      try { 
        lampada0.isStateActive((Lampada.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Lampada", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      lampada0.raisePoweron();
      assertTrue(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      lampada0.raisePushbutton();
      lampada0.triggerWithoutEvent();
      assertTrue(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      lampada0.raisePushbutton();
      lampada0.raisePoweroff();
      assertTrue(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      lampada0.raisePoweron();
      lampada0.setIsExecuting(false);
      lampada0.enter();
      lampada0.raisePoweroff();
      assertTrue(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.triggerWithoutEvent();
      assertTrue(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      lampada0.raisePushbutton();
      assertTrue(lampada0.isActive());
      
      lampada0.exit();
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      assertTrue(lampada0.isActive());
      
      lampada0.exit();
      assertFalse(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      assertTrue(lampada0.isActive());
      
      lampada0.exit();
      assertFalse(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      lampada0.raisePushbutton();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_ON;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertTrue(lampada0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      lampada0.raisePoweron();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_STANDBY;
      lampada0.raisePushbutton();
      lampada0.raisePushbutton();
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertTrue(lampada0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_OFF;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertTrue(lampada0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      Lampada.State lampada_State0 = Lampada.State.$NULLSTATE$;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertFalse(boolean0);
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_STANDBY;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertFalse(boolean0);
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_ON;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertEquals(0L, lampada0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      Lampada.State lampada_State0 = Lampada.State.MAIN_REGION_OFF;
      boolean boolean0 = lampada0.isStateActive(lampada_State0);
      assertEquals(0L, lampada0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      lampada0.raisePoweron();
      lampada0.setIsExecuting(false);
      lampada0.raisePoweron();
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.enter();
      boolean boolean0 = lampada0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      boolean boolean0 = lampada0.isActive();
      assertEquals(0L, lampada0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      lampada0.exit();
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      assertFalse(lampada0.isActive());
      
      lampada0.exit();
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.getTeardown();
      assertFalse(lampada0.isActive());
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.setIsExecuting(true);
      lampada0.enter();
      assertFalse(lampada0.isActive());
      assertEquals(0L, lampada0.getVal());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      boolean boolean0 = lampada0.isFinal();
      assertFalse(lampada0.isActive());
      assertEquals(0L, lampada0.getVal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      lampada0.raiseTeardown();
      assertEquals(0L, lampada0.getVal());
      assertFalse(lampada0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lampada lampada0 = new Lampada();
      long long0 = lampada0.getVal();
      assertFalse(lampada0.isActive());
      assertEquals(0L, long0);
  }
}
