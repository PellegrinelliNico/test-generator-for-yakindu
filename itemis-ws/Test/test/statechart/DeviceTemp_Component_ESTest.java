/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:19:35 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.DeviceTemp_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeviceTemp_Component_ESTest extends DeviceTemp_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat;
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
      
      deviceTemp_Component_Heat0.setUser_warned(true);
      deviceTemp_Component0.heat();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat;
      deviceTemp_Component_Heat0.setMax((-772L));
      assertEquals((-772L), deviceTemp_Component_Heat0.getMax());
      
      DeviceTemp_Component.Heat deviceTemp_Component_Heat1 = deviceTemp_Component0.heat();
      assertEquals(2L, deviceTemp_Component_Heat1.getDecrement());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
      
      deviceTemp_Component_Heat0.setDecrement(0L);
      DeviceTemp_Component.Heat deviceTemp_Component_Heat1 = deviceTemp_Component0.heat();
      assertEquals(20L, deviceTemp_Component_Heat1.getMax());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.heat.setDecrement((-239L));
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      assertEquals(20L, deviceTemp_Component_Heat0.getMax());
      assertEquals((-239L), deviceTemp_Component_Heat0.getDecrement());
      assertEquals(0L, deviceTemp_Component_Heat0.getLevel());
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.setMessage("R:[{6");
      deviceTemp_Component0.getMessage();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.setIsExecuting(true);
      boolean boolean0 = deviceTemp_Component0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.getIsExecuting();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      assertFalse(deviceTemp_Component0.getFully_rested());
      
      deviceTemp_Component0.setFully_rested(true);
      boolean boolean0 = deviceTemp_Component0.getFully_rested();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      // Undeclared exception!
      try { 
        deviceTemp_Component0.isStateActive((DeviceTemp_Component.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.DeviceTemp_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device();
      assertFalse(deviceTemp_Component_Device0.getCooling_down());
      
      deviceTemp_Component_Device0.setCooling_down(true);
      deviceTemp_Component0.device();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = new DeviceTemp_Component.Heat(deviceTemp_Component0);
      deviceTemp_Component0.heat = deviceTemp_Component_Heat0;
      deviceTemp_Component0.heat();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.heat.setLevel((-1593L));
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      assertEquals(20L, deviceTemp_Component_Heat0.getMax());
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
      assertEquals((-1593L), deviceTemp_Component_Heat0.getLevel());
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      
      deviceTemp_Component_Heat0.setIncrement(0L);
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device();
      assertFalse(deviceTemp_Component_Device0.getIsOn());
      
      deviceTemp_Component_Device0.setIsOn(true);
      DeviceTemp_Component.Device deviceTemp_Component_Device1 = deviceTemp_Component0.device();
      assertFalse(deviceTemp_Component_Device1.getHeating_up());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device();
      assertFalse(deviceTemp_Component_Device0.getHeating_up());
      
      deviceTemp_Component_Device0.setHeating_up(true);
      DeviceTemp_Component.Device deviceTemp_Component_Device1 = deviceTemp_Component0.device();
      assertTrue(deviceTemp_Component_Device1.getHeating_up());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = new DeviceTemp_Component.Device();
      assertFalse(deviceTemp_Component_Device0.getHeating_up());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State.$NULLSTATE$;
      deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE;
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_;
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED;
      deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING;
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT;
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP;
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeviceTemp_Component.State deviceTemp_Component_State0 = DeviceTemp_Component.State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE;
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      boolean boolean0 = deviceTemp_Component0.isStateActive(deviceTemp_Component_State0);
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      boolean boolean0 = deviceTemp_Component0.nextEvent();
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      boolean boolean0 = deviceTemp_Component0.isActive();
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      // Undeclared exception!
      try { 
        deviceTemp_Component0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat;
      long long0 = deviceTemp_Component_Heat0.getDecrement();
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
      assertEquals(2L, long0);
      assertEquals(0L, deviceTemp_Component_Heat0.getLevel());
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertEquals(20L, deviceTemp_Component_Heat0.getMax());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      long long0 = deviceTemp_Component_Heat0.getLevel();
      assertEquals(20L, deviceTemp_Component_Heat0.getMax());
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertEquals(0L, long0);
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      boolean boolean0 = deviceTemp_Component_Heat0.getUser_warned();
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      assertEquals(20L, deviceTemp_Component_Heat0.getMax());
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
      assertFalse(boolean0);
      assertEquals(0L, deviceTemp_Component_Heat0.getLevel());
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      long long0 = deviceTemp_Component0.heat.getIncrement();
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat;
      // Undeclared exception!
      try { 
        deviceTemp_Component_Heat0.raiseContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device;
      boolean boolean0 = deviceTemp_Component_Device0.getCooling_down();
      assertFalse(deviceTemp_Component_Device0.getIsOn());
      assertFalse(deviceTemp_Component_Device0.getHeating_up());
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device;
      boolean boolean0 = deviceTemp_Component_Device0.getIsOn();
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(deviceTemp_Component_Device0.getHeating_up());
      assertFalse(deviceTemp_Component_Device0.getCooling_down());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      boolean boolean0 = deviceTemp_Component0.getFully_rested();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      // Undeclared exception!
      try { 
        deviceTemp_Component0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Device deviceTemp_Component_Device0 = deviceTemp_Component0.device();
      boolean boolean0 = deviceTemp_Component_Device0.getHeating_up();
      assertFalse(deviceTemp_Component_Device0.getCooling_down());
      assertFalse(deviceTemp_Component0.getFully_rested());
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component_Device0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.setIsExecuting(true);
      deviceTemp_Component0.exit();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.getMessage();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      boolean boolean0 = deviceTemp_Component0.isFinal();
      assertFalse(boolean0);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.getTimerService();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      DeviceTemp_Component.Heat deviceTemp_Component_Heat0 = deviceTemp_Component0.heat();
      long long0 = deviceTemp_Component_Heat0.getMax();
      assertFalse(deviceTemp_Component_Heat0.getUser_warned());
      assertEquals(0L, deviceTemp_Component_Heat0.getLevel());
      assertEquals(20L, long0);
      assertEquals(2L, deviceTemp_Component_Heat0.getDecrement());
      assertEquals(1L, deviceTemp_Component_Heat0.getIncrement());
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      deviceTemp_Component0.setTimerService((ITimerService) null);
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      assertFalse(deviceTemp_Component0.isActive());
      
      deviceTemp_Component0.exit();
      assertFalse(deviceTemp_Component0.getFully_rested());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      // Undeclared exception!
      try { 
        deviceTemp_Component0.raiseTimeEvent(3327);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.DeviceTemp_Component", e);
      }
  }
}
