/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 19:09:26 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._PhysicsSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _PhysicsSimplified_ESTest extends _PhysicsSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified0.raiseSetAcceleration(1543.882338148206);
      _PhysicsSimplified0.raiseTimeEvent(0);
      assertFalse(_PhysicsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.raiseTimeEvent(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.isStateActive((_PhysicsSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified0.raiseSetAcceleration((-62.0455199));
      _PhysicsSimplified0.raiseTimeEvent(0);
      assertTrue(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified0.exit();
      assertFalse(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified0.raiseSetAcceleration((-62.0455199));
      assertTrue(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS_R2_DEFAULT;
      _PhysicsSimplified0.enter();
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertTrue(_PhysicsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS_R1_DEFAULT;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertTrue(_PhysicsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS;
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertTrue(_PhysicsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.$NULLSTATE$;
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS;
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS_R2_DEFAULT;
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      _PhysicsSimplified.State _PhysicsSimplified_State0 = _PhysicsSimplified.State.PHYSICS_PHYSICS_R1_DEFAULT;
      boolean boolean0 = _PhysicsSimplified0.isStateActive(_PhysicsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      boolean boolean0 = _PhysicsSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      // Undeclared exception!
      try { 
        _PhysicsSimplified0.raiseSetAcceleration((-62.0455199));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._PhysicsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      _PhysicsSimplified0.raiseTimeEvent(0);
      assertTrue(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.triggerWithoutEvent();
      assertFalse(_PhysicsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      _PhysicsSimplified0.enter();
      assertTrue(_PhysicsSimplified0.isActive());
      
      _PhysicsSimplified0.exit();
      assertFalse(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      boolean boolean0 = _PhysicsSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_PhysicsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _PhysicsSimplified _PhysicsSimplified0 = new _PhysicsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _PhysicsSimplified0.setTimerService(iTimerService0);
      assertFalse(_PhysicsSimplified0.isActive());
      
      _PhysicsSimplified0.enter();
      boolean boolean0 = _PhysicsSimplified0.isActive();
      assertTrue(boolean0);
  }
}
