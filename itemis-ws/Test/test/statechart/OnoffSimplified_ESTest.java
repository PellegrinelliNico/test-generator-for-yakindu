/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:07:24 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.OnoffSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OnoffSimplified_ESTest extends OnoffSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerDisconnected();
      onoffSimplified0.raiseFetchCommand();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.triggerWithoutEvent();
      assertFalse(onoffSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.raiseTurnOn();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseTurnOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseTimeEvent((-1610612735));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseTimeEvent(21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raisePet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseFetchCommand();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseComeCommand();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseChargerDisconnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseChargerConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseBarkCommand();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_LEGS_STAND;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerConnected();
      onoffSimplified0.raiseChargerConnected();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.raiseBarkCommand();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OnoffSimplified.Battery onoffSimplified_Battery0 = new OnoffSimplified.Battery();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OnoffSimplified.Voice onoffSimplified_Voice0 = new OnoffSimplified.Voice();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OnoffSimplified.Tail onoffSimplified_Tail0 = new OnoffSimplified.Tail();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OnoffSimplified.Legs onoffSimplified_Legs0 = new OnoffSimplified.Legs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OnoffSimplified.Emotion onoffSimplified_Emotion0 = new OnoffSimplified.Emotion();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerConnected();
      onoffSimplified0.raiseTimeEvent(0);
      assertFalse(onoffSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseComeCommand();
      onoffSimplified0.raiseTurnOff();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseBarkCommand();
      onoffSimplified0.exit();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.exit();
      assertFalse(onoffSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      assertTrue(onoffSimplified0.isActive());
      
      onoffSimplified0.exit();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_HEALTH_GOOD;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerConnected();
      onoffSimplified0.raiseComeCommand();
      assertFalse(onoffSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      assertFalse(onoffSimplified0.isActive());
      
      onoffSimplified0.enter();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_EMOTION_NORMAL;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_LEGS_STAND;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(boolean0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      assertFalse(onoffSimplified0.isActive());
      
      onoffSimplified0.enter();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.$NULLSTATE$;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(boolean0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_HEALTH_BAD;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_HEALTH_DEGRADED;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_EMOTION_LOVE;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_EMOTION_NORMAL;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_TAIL_WAGGING;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_TAIL_IDLE;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_VOICE_HOWL;
      onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_VOICE_BARK;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_VOICE_SILENT;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_LEGS_RUN;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(boolean0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_ON_LEGS_WALK;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(onoffSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      OnoffSimplified.State onoffSimplified_State0 = OnoffSimplified.State.MAIN_REGION_OFF;
      boolean boolean0 = onoffSimplified0.isStateActive(onoffSimplified_State0);
      assertFalse(boolean0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerDisconnected();
      onoffSimplified0.raiseTurnOff();
      onoffSimplified0.raiseFetchCommand();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      boolean boolean0 = onoffSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      assertFalse(onoffSimplified0.isActive());
      
      onoffSimplified0.enter();
      boolean boolean0 = onoffSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.legs();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.tail();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.battery();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      boolean boolean0 = onoffSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      // Undeclared exception!
      try { 
        onoffSimplified0.raiseTurnOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OnoffSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseChargerConnected();
      onoffSimplified0.raiseChargerDisconnected();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseTimeEvent(0);
      onoffSimplified0.exit();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.emotion();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      onoffSimplified0.voice();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raiseBarkCommand();
      onoffSimplified0.raiseTurnOff();
      onoffSimplified0.exit();
      assertFalse(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      assertFalse(onoffSimplified0.isActive());
      
      onoffSimplified0.enter();
      onoffSimplified0.raiseFetchCommand();
      onoffSimplified0.raiseTurnOff();
      assertTrue(onoffSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OnoffSimplified onoffSimplified0 = new OnoffSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      onoffSimplified0.setTimerService(iTimerService0);
      onoffSimplified0.enter();
      onoffSimplified0.raisePet();
      onoffSimplified0.raiseBarkCommand();
      assertTrue(onoffSimplified0.isActive());
  }
}
