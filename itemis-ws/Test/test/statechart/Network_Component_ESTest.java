/*
 * This file was automatically generated by EvoSuite
 * Fri May 17 07:32:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Network_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Network_Component_ESTest extends Network_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      assertEquals(5L, network_Component0.getTimeout_value());
      
      network_Component0.setTimeout_value(0L);
      network_Component0.getTimeout_value();
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setTimeout_value((-2608L));
      long long0 = network_Component0.getTimeout_value();
      assertEquals((-2608L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setTimeout_counter(547L);
      long long0 = network_Component0.getTimeout_counter();
      assertEquals(547L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setTimeout_counter((-3094L));
      long long0 = network_Component0.getTimeout_counter();
      assertEquals((-3094L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      assertEquals(5L, network_Component0.getReconnect_value());
      
      network_Component0.setReconnect_value(0L);
      network_Component0.getReconnect_value();
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setReconnect_value((-2467L));
      long long0 = network_Component0.getReconnect_value();
      assertEquals((-2467L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setIsExecuting(true);
      boolean boolean0 = network_Component0.getIsExecuting();
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertTrue(boolean0);
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      boolean boolean0 = network_Component0.getIsExecuting();
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(boolean0);
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.getConnection());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      assertFalse(network_Component0.getConnection());
      
      network_Component0.setConnection(true);
      boolean boolean0 = network_Component0.getConnection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.isStateActive((Network_Component.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Network_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State.$NULLSTATE$;
      network_Component0.isStateActive(network_Component_State0);
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING___NETWORK_CONNECTION__CHECKINGFORNETWORKCONNECTION__CHECKINGFORCONNECTIONUPDATES__CONNECTINGTOSERVER;
      boolean boolean0 = network_Component0.isStateActive(network_Component_State0);
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(boolean0);
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING_;
      boolean boolean0 = network_Component0.isStateActive(network_Component_State0);
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(boolean0);
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___OFF_;
      network_Component0.isStateActive(network_Component_State0);
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING___NETWORK_CONNECTION__NETWORKTIMEOUT;
      network_Component0.isStateActive(network_Component_State0);
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING___NETWORK_CONNECTION__CHECKINGFORNETWORKCONNECTION__CHECKINGFORCONNECTIONUPDATES__CONNECTINGTOSERVER__SERVER_CONNECTION__FAILURE;
      boolean boolean0 = network_Component0.isStateActive(network_Component_State0);
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(boolean0);
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getReconnect_value());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING___NETWORK_CONNECTION__CHECKINGFORNETWORKCONNECTION;
      boolean boolean0 = network_Component0.isStateActive(network_Component_State0);
      assertFalse(boolean0);
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(network_Component0.getConnection());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      Network_Component.State network_Component_State0 = Network_Component.State._NETWORK_COMPONENT___NETWORK_COMPONENT_WORKING___NETWORK_CONNECTION__CHECKINGFORNETWORKCONNECTION__CHECKINGFORCONNECTIONUPDATES__CONNECTINGTOSERVER__SERVER_CONNECTION__SUCCESS;
      boolean boolean0 = network_Component0.isStateActive(network_Component_State0);
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      boolean boolean0 = network_Component0.nextEvent();
      assertFalse(network_Component0.getConnection());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(boolean0);
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      boolean boolean0 = network_Component0.isActive();
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(boolean0);
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setIsExecuting(true);
      network_Component0.exit();
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Network_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      assertFalse(network_Component0.isActive());
      
      network_Component0.exit();
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.raiseTimeEvent((-3435));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Network_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      boolean boolean0 = network_Component0.isFinal();
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(boolean0);
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.getConnection());
      assertFalse(network_Component0.isActive());
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Network_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      long long0 = network_Component0.getTimeout_value();
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.isActive());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, long0);
      assertFalse(network_Component0.getConnection());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.setTimerService((ITimerService) null);
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertFalse(network_Component0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      boolean boolean0 = network_Component0.getConnection();
      assertFalse(network_Component0.isActive());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(boolean0);
      assertEquals(5L, network_Component0.getReconnect_value());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      long long0 = network_Component0.getReconnect_value();
      assertFalse(network_Component0.isActive());
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, long0);
      assertEquals(0L, network_Component0.getTimeout_counter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      long long0 = network_Component0.getTimeout_counter();
      assertEquals(5L, network_Component0.getTimeout_value());
      assertFalse(network_Component0.isActive());
      assertEquals(0L, long0);
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.getConnection());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Network_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      network_Component0.getTimerService();
      assertFalse(network_Component0.getConnection());
      assertEquals(5L, network_Component0.getReconnect_value());
      assertFalse(network_Component0.isActive());
      assertEquals(0L, network_Component0.getTimeout_counter());
      assertEquals(5L, network_Component0.getTimeout_value());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Network_Component network_Component0 = new Network_Component();
      // Undeclared exception!
      try { 
        network_Component0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Network_Component", e);
      }
  }
}
