/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:47:48 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Test_converter_entry_exit_actionsSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Test_converter_entry_exit_actionsSimplified_ESTest extends Test_converter_entry_exit_actionsSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.Sensor test_converter_entry_exit_actionsSimplified_Sensor0 = test_converter_entry_exit_actionsSimplified0.sensor();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      test_converter_entry_exit_actionsSimplified_Sensor0.raiseMotion();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        test_converter_entry_exit_actionsSimplified0.raiseTimeEvent(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("statechart.Test_converter_entry_exit_actionsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      // Undeclared exception!
      try { 
        test_converter_entry_exit_actionsSimplified0.isStateActive((Test_converter_entry_exit_actionsSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Test_converter_entry_exit_actionsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.Sensor test_converter_entry_exit_actionsSimplified_Sensor0 = new Test_converter_entry_exit_actionsSimplified.Sensor(test_converter_entry_exit_actionsSimplified0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.User test_converter_entry_exit_actionsSimplified_User0 = new Test_converter_entry_exit_actionsSimplified.User(test_converter_entry_exit_actionsSimplified0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.Sensor test_converter_entry_exit_actionsSimplified_Sensor0 = test_converter_entry_exit_actionsSimplified0.sensor();
      test_converter_entry_exit_actionsSimplified_Sensor0.raiseMotion();
      test_converter_entry_exit_actionsSimplified_Sensor0.raiseMotion();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.Sensor test_converter_entry_exit_actionsSimplified_Sensor0 = test_converter_entry_exit_actionsSimplified0.sensor();
      test_converter_entry_exit_actionsSimplified_Sensor0.raiseMotion();
      test_converter_entry_exit_actionsSimplified0.raiseTimeEvent(0);
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.User test_converter_entry_exit_actionsSimplified_User0 = test_converter_entry_exit_actionsSimplified0.user();
      test_converter_entry_exit_actionsSimplified_User0.raiseOff_button();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      Test_converter_entry_exit_actionsSimplified.User test_converter_entry_exit_actionsSimplified_User0 = test_converter_entry_exit_actionsSimplified0.user();
      test_converter_entry_exit_actionsSimplified0.enter();
      test_converter_entry_exit_actionsSimplified_User0.raiseOn_button();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      
      test_converter_entry_exit_actionsSimplified0.exit();
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      
      test_converter_entry_exit_actionsSimplified0.exit();
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING_R1_ON;
      Test_converter_entry_exit_actionsSimplified.Sensor test_converter_entry_exit_actionsSimplified_Sensor0 = test_converter_entry_exit_actionsSimplified0.sensor();
      test_converter_entry_exit_actionsSimplified0.enter();
      test_converter_entry_exit_actionsSimplified_Sensor0.raiseMotion();
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING_R1_OFF;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.$NULLSTATE$;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_HELLO;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MANUAL;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING_R1_ON;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      Test_converter_entry_exit_actionsSimplified.State test_converter_entry_exit_actionsSimplified_State0 = Test_converter_entry_exit_actionsSimplified.State.MAIN_REGION_MOTIONSENSING_R1_OFF;
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isStateActive(test_converter_entry_exit_actionsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      test_converter_entry_exit_actionsSimplified0.triggerWithoutEvent();
      assertFalse(test_converter_entry_exit_actionsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      test_converter_entry_exit_actionsSimplified0.exit();
      assertFalse(test_converter_entry_exit_actionsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      // Undeclared exception!
      try { 
        test_converter_entry_exit_actionsSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test_converter_entry_exit_actionsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      // Undeclared exception!
      try { 
        test_converter_entry_exit_actionsSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test_converter_entry_exit_actionsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
      
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.User test_converter_entry_exit_actionsSimplified_User0 = test_converter_entry_exit_actionsSimplified0.user();
      test_converter_entry_exit_actionsSimplified_User0.raiseOn_button();
      test_converter_entry_exit_actionsSimplified_User0.raiseOn_button();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
      
      test_converter_entry_exit_actionsSimplified0.enter();
      Test_converter_entry_exit_actionsSimplified.User test_converter_entry_exit_actionsSimplified_User0 = test_converter_entry_exit_actionsSimplified0.user();
      test_converter_entry_exit_actionsSimplified_User0.raiseOn_button();
      test_converter_entry_exit_actionsSimplified_User0.raiseOff_button();
      assertTrue(test_converter_entry_exit_actionsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      // Undeclared exception!
      try { 
        test_converter_entry_exit_actionsSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test_converter_entry_exit_actionsSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Test_converter_entry_exit_actionsSimplified test_converter_entry_exit_actionsSimplified0 = new Test_converter_entry_exit_actionsSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      test_converter_entry_exit_actionsSimplified0.setTimerService(iTimerService0);
      assertFalse(test_converter_entry_exit_actionsSimplified0.isActive());
      
      test_converter_entry_exit_actionsSimplified0.enter();
      boolean boolean0 = test_converter_entry_exit_actionsSimplified0.isActive();
      assertTrue(boolean0);
  }
}
