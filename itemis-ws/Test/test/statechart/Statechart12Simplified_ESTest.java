/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:15:05 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart12Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart12Simplified_ESTest extends Statechart12Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      statechart12Simplified0.raiseCarDetected();
      assertFalse(statechart12Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        statechart12Simplified0.raiseTimeEvent(2312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2312
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.raiseButtonPressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.isStateActive((Statechart12Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseButtonPressed();
      statechart12Simplified0.triggerWithoutEvent();
      assertTrue(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      statechart12Simplified0.exit();
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED;
      statechart12Simplified0.enter();
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(statechart12Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED;
      statechart12Simplified0.enter();
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(statechart12Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(statechart12Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(statechart12Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.$NULLSTATE$;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT;
      statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseTimeEvent(2);
      statechart12Simplified0.raiseButtonPressed();
      assertTrue(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      boolean boolean0 = statechart12Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      boolean boolean0 = statechart12Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseButtonPressed();
      statechart12Simplified0.raiseButtonReleased();
      assertTrue(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      boolean boolean0 = statechart12Simplified0.isFinal();
      assertFalse(statechart12Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.raiseButtonReleased();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.raiseCarDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseButtonPressed();
      statechart12Simplified0.exit();
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseTimeEvent(2);
      assertTrue(statechart12Simplified0.isActive());
      
      statechart12Simplified0.exit();
      assertFalse(statechart12Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart12Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart12Simplified0.isActive());
      
      statechart12Simplified0.enter();
      statechart12Simplified0.raiseButtonPressed();
      Statechart12Simplified.State statechart12Simplified_State0 = Statechart12Simplified.State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT;
      boolean boolean0 = statechart12Simplified0.isStateActive(statechart12Simplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart12Simplified statechart12Simplified0 = new Statechart12Simplified();
      // Undeclared exception!
      try { 
        statechart12Simplified0.raiseTimeEvent(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart12Simplified", e);
      }
  }
}
