/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:39:52 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Statechart6;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart6_ESTest extends Statechart6_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.ultrasonic = null;
      Statechart6.Ultrasonic statechart6_Ultrasonic0 = statechart6_0.ultrasonic();
      assertNull(statechart6_Ultrasonic0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.light = null;
      Statechart6.Light statechart6_Light0 = statechart6_0.light();
      assertNull(statechart6_Light0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.setIsExecuting(true);
      boolean boolean0 = statechart6_0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      boolean boolean0 = statechart6_0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      // Undeclared exception!
      try { 
        statechart6_0.isStateActive((Statechart6.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.State statechart6_State0 = Statechart6.State.$NULLSTATE$;
      boolean boolean0 = statechart6_0.isStateActive(statechart6_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.State statechart6_State0 = Statechart6.State.MAIN_REGION_STATELIGHTON;
      boolean boolean0 = statechart6_0.isStateActive(statechart6_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.State statechart6_State0 = Statechart6.State.MAIN_REGION_DECISION;
      boolean boolean0 = statechart6_0.isStateActive(statechart6_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.State statechart6_State0 = Statechart6.State.MAIN_REGION_STATELIGHTOFF;
      boolean boolean0 = statechart6_0.isStateActive(statechart6_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      boolean boolean0 = statechart6_0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      boolean boolean0 = statechart6_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      // Undeclared exception!
      try { 
        statechart6_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.Ultrasonic statechart6_Ultrasonic0 = new Statechart6.Ultrasonic(statechart6_0);
      // Undeclared exception!
      try { 
        statechart6_Ultrasonic0.raise_0to30();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart6.Light statechart6_Light0 = new Statechart6.Light();
      Observable<Void> observable0 = statechart6_Light0.getON();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart6.Light statechart6_Light0 = new Statechart6.Light();
      statechart6_Light0.raiseON();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart6.Light statechart6_Light0 = new Statechart6.Light();
      statechart6_Light0.raiseOFF();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.exit();
      assertFalse(statechart6_0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.Ultrasonic statechart6_Ultrasonic0 = statechart6_0.ultrasonic();
      // Undeclared exception!
      try { 
        statechart6_Ultrasonic0.raise_30toLarger();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.setTimerService((ITimerService) null);
      assertFalse(statechart6_0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      Statechart6.Light statechart6_Light0 = statechart6_0.light();
      statechart6_Light0.getOFF();
      assertFalse(statechart6_0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      boolean boolean0 = statechart6_0.isFinal();
      assertFalse(boolean0);
      assertFalse(statechart6_0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.getTimerService();
      assertFalse(statechart6_0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      // Undeclared exception!
      try { 
        statechart6_0.raiseTimeEvent((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      // Undeclared exception!
      try { 
        statechart6_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart6", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart6 statechart6_0 = new Statechart6();
      statechart6_0.setIsExecuting(true);
      statechart6_0.exit();
      assertFalse(statechart6_0.isActive());
  }
}
