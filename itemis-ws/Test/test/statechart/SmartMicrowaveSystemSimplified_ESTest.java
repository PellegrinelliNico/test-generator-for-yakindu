/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:57:46 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.Microwave_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.Sensor_Component;
import statechart.SmartMicrowaveSystemSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartMicrowaveSystemSimplified_ESTest extends SmartMicrowaveSystemSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartMicrowaveSystemSimplified0.setActuator(actuator_Component0);
      assertFalse(actuator_Component0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Controller_Component controller_Component0 = new Controller_Component();
      smartMicrowaveSystemSimplified0.setController(controller_Component0);
      assertFalse(smartMicrowaveSystemSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Network_Component network_Component0 = new Network_Component();
      smartMicrowaveSystemSimplified0.setWiFi(network_Component0);
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Power_Component power_Component0 = new Power_Component();
      smartMicrowaveSystemSimplified0.setPower(power_Component0);
      assertFalse(smartMicrowaveSystemSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Sensor_Component sensor_Component0 = new Sensor_Component();
      smartMicrowaveSystemSimplified0.setSensor(sensor_Component0);
      assertFalse(sensor_Component0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartMicrowaveSystemSimplified.SensorInput smartMicrowaveSystemSimplified_SensorInput0 = new SmartMicrowaveSystemSimplified.SensorInput();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartMicrowaveSystemSimplified.SensorOutput smartMicrowaveSystemSimplified_SensorOutput0 = new SmartMicrowaveSystemSimplified.SensorOutput();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartMicrowaveSystemSimplified0.setTemp(deviceTemp_Component0);
      assertFalse(deviceTemp_Component0.isFinal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      smartMicrowaveSystemSimplified0.setMW(microwave_Unit0);
      assertEquals("", microwave_Unit0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State.$NULLSTATE$;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_NETWORKCOMPONENT_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_CONTROLLERCOMPONENT_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SYSTEMSTATUS_ON;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
      
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.State smartMicrowaveSystemSimplified_State0 = SmartMicrowaveSystemSimplified.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SYSTEMSTATUS_OFF;
      boolean boolean0 = smartMicrowaveSystemSimplified0.isStateActive(smartMicrowaveSystemSimplified_State0);
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      boolean boolean0 = smartMicrowaveSystemSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      smartMicrowaveSystemSimplified0.sensorOutput();
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      smartMicrowaveSystemSimplified0.exit();
      assertFalse(smartMicrowaveSystemSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified0.raiseTimeEvent(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      boolean boolean0 = smartMicrowaveSystemSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      smartMicrowaveSystemSimplified0.setTimerService((ITimerService) null);
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      smartMicrowaveSystemSimplified0.sensorInput();
      assertFalse(smartMicrowaveSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.System smartMicrowaveSystemSimplified_System0 = smartMicrowaveSystemSimplified0.system();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.System smartMicrowaveSystemSimplified_System0 = smartMicrowaveSystemSimplified0.system();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified_System0.raiseConnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.System smartMicrowaveSystemSimplified_System0 = new SmartMicrowaveSystemSimplified.System(smartMicrowaveSystemSimplified0);
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartMicrowaveSystemSimplified smartMicrowaveSystemSimplified0 = new SmartMicrowaveSystemSimplified();
      SmartMicrowaveSystemSimplified.System smartMicrowaveSystemSimplified_System0 = smartMicrowaveSystemSimplified0.system();
      // Undeclared exception!
      try { 
        smartMicrowaveSystemSimplified_System0.raiseDisconnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystemSimplified", e);
      }
  }
}
