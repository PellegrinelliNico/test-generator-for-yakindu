/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:35:28 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart4Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart4Simplified_ESTest extends Statechart4Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.raiseMotion_detected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.raiseLeft_button_clicked();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.raiseDouble_button_clicked();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.isStateActive((Statechart4Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseRight_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseMotion_detected();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseMotion_detected();
      statechart4Simplified0.raiseLeft_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.triggerWithoutEvent();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.triggerWithoutEvent();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statechart4Simplified_OperationCallback0).verify_password(anyLong());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseDouble_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      statechart4Simplified0.exit();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
      
      statechart4Simplified0.exit();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback1 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(statechart4Simplified_OperationCallback1).verify_password(anyLong());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback1);
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseDouble_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
      
      statechart4Simplified0.exit();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      assertTrue(statechart4Simplified0.isActive());
      
      statechart4Simplified0.exit();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_PASSWORDPROMPT_R1_READY;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_PASSWORDPROMPT;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_PASSWORDPROMPT;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseMotion_detected();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_ALARM;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_SECURED;
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_RIDE;
      statechart4Simplified0.enter();
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertTrue(statechart4Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.$NULLSTATE$;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_PASSWORDPROMPT;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_ALARM;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_SECURED;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_PASSWORDPROMPT_R1_READY;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.State statechart4Simplified_State0 = Statechart4Simplified.State.MAIN_REGION_RIDE;
      boolean boolean0 = statechart4Simplified0.isStateActive(statechart4Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.raiseMotion_detected();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      assertFalse(statechart4Simplified0.isActive());
      
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseMotion_detected();
      statechart4Simplified0.raiseRight_button_clicked();
      assertTrue(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      boolean boolean0 = statechart4Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseLeft_button_clicked();
      assertFalse(statechart4Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      boolean boolean0 = statechart4Simplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      // Undeclared exception!
      try { 
        statechart4Simplified0.raiseRight_button_clicked();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart4Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      statechart4Simplified0.enter();
      statechart4Simplified0.raiseLeft_button_clicked();
      statechart4Simplified0.raiseMotion_detected();
      assertTrue(statechart4Simplified0.isActive());
      
      statechart4Simplified0.exit();
      assertFalse(statechart4Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart4Simplified statechart4Simplified0 = new Statechart4Simplified();
      Statechart4Simplified.OperationCallback statechart4Simplified_OperationCallback0 = mock(Statechart4Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart4Simplified0.setOperationCallback(statechart4Simplified_OperationCallback0);
      assertFalse(statechart4Simplified0.isActive());
      
      statechart4Simplified0.enter();
      boolean boolean0 = statechart4Simplified0.isActive();
      assertTrue(boolean0);
  }
}
