/*
 * This file was automatically generated by EvoSuite
 * Tue May 14 20:26:34 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart2_ESTest extends Statechart2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setUserX((-5.0));
      assertEquals((-5.0), statechart2_UserVar0.getUserX(), 0.01);
      
      Statechart2.UserVar statechart2_UserVar1 = statechart2_0.userVar();
      assertFalse(statechart2_UserVar1.getStraighten());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = new Statechart2.StartPos();
      statechart2_StartPos0.setSetZero(true);
      statechart2_0.startPos = statechart2_StartPos0;
      assertTrue(statechart2_StartPos0.getSetZero());
      
      statechart2_0.startPos();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setIFrontMean((-1524.29487));
      assertEquals((-1524.29487), statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      
      statechart2_0.laserIntensity();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setI180((-992.8017));
      Statechart2.LaserIntensity statechart2_LaserIntensity1 = statechart2_0.laserIntensity();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity1.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setI0((-2140.6));
      Statechart2.LaserIntensity statechart2_LaserIntensity1 = statechart2_0.laserIntensity();
      assertEquals(0.0, statechart2_LaserIntensity1.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity1.getILeftMean(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDFrontMax((-510.12414));
      assertEquals((-510.12414), statechart2_LaserDistance0.getDFrontMax(), 0.01);
      
      Statechart2.LaserDistance statechart2_LaserDistance1 = statechart2_0.laserDistance();
      assertEquals(0.0, statechart2_LaserDistance1.getDMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.grid.setColumn(1L);
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getUpdate());
      assertEquals(1L, statechart2_Grid0.getColumn());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.getIsExecuting();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      statechart2_0.baseValues = statechart2_BaseValues0;
      statechart2_0.baseValues();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setSpecificRow(0L);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.setRotation(1.0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setMaxDegR(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.setMaxCol(0L);
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getUpdate());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setXAbs((-5.0));
      assertEquals((-5.0), statechart2_UserVar0.getXAbs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setSpecificColumn((-1L));
      assertEquals((-1L), statechart2_UserVar0.getSpecificColumn());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setOffBack((-763.80262173452));
      assertEquals((-763.80262173452), statechart2_UserVar0.getOffBack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDm90(1194.894549412579);
      assertEquals(1194.894549412579, statechart2_LaserDistance0.getDm90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos();
      statechart2_StartPos0.setZeroSouthDegree((-2638.5728193));
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_StartPos0.getZeroX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setStraightOffset(0.0);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      statechart2_BaseValues0.setDegreesRight(0L);
      assertEquals(0L, statechart2_BaseValues0.getDegreesLeft());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues();
      statechart2_BaseValues0.setDegreesBack(0L);
      assertEquals(2.84, statechart2_BaseValues0.getMaxRotation(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(10L, statechart2_BaseValues0.getDegreesLeft());
      assertEquals(10L, statechart2_BaseValues0.getDegreesRight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMinDegB((-1L));
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      statechart2_LaserIntensity0.setIBackMax((-2307.0));
      assertEquals((-2307.0), statechart2_LaserIntensity0.getIBackMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setIRightMax(1L);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setUserY((-2176.834916198));
      assertEquals((-2176.834916198), statechart2_UserVar0.getUserY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setIFrontMin(0.0);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMaxDegL(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setRow(10L);
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setWallRight(0L);
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getVisited());
      assertFalse(statechart2_Grid0.getUpdate());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDFrontMin((-1477.04748));
      assertEquals((-1477.04748), statechart2_LaserDistance0.getDFrontMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      statechart2_LaserDistance0.setDRightMin((-1701.7655));
      assertEquals((-1701.7655), statechart2_LaserDistance0.getDRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setCurrentOrientation(3L);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Statechart2.Grid statechart2_Grid0 = new Statechart2.Grid();
      statechart2_Grid0.setWallBack((-1L));
      assertEquals((-1L), statechart2_Grid0.getWallBack());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDLeftMin((-1238.0158));
      assertEquals((-1238.0158), statechart2_LaserDistance0.getDLeftMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setILeftMean((-5.0));
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDBackMax(1731.6835768);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setYCol((-976.86308203));
      assertEquals((-976.86308203), statechart2_UserVar0.getYCol(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      statechart2_BaseValues0.setDegreesFront(0L);
      assertEquals(0.0, statechart2_BaseValues0.getMaxSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Odom statechart2_Odom0 = statechart2_0.odom();
      statechart2_Odom0.setZ(0L);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Odom0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDFrontMean(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      
      statechart2_Grid0.setMaxRow(0L);
      statechart2_0.grid();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu;
      statechart2_Imu0.setYaw((-0.05));
      assertEquals((-0.05), statechart2_Imu0.getYaw(), 0.01);
      
      Statechart2.Imu statechart2_Imu1 = statechart2_0.imu();
      assertEquals(0.0, statechart2_Imu1.getPitch(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setStartprocedure(true);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setI90(3819.416);
      assertEquals(3819.416, statechart2_LaserIntensity0.getI90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setIRightMin(45.0);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      statechart2_BaseValues0.setMaxRotation(0.0);
      assertEquals(0.0, statechart2_BaseValues0.getMaxRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setCalibrationIncrement((-1558L));
      assertEquals((-1558L), statechart2_UserVar0.getCalibrationIncrement());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMinDegR(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDBackMean((-1L));
      assertEquals((-1.0), statechart2_LaserDistance0.getDBackMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setWallFront((-1L));
      assertEquals((-1L), statechart2_Grid0.getWallFront());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setILeftMax((-1540.1380841525));
      assertEquals((-1540.1380841525), statechart2_LaserIntensity0.getILeftMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.setSpeed(0.0);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Output0.getRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMaxDeg(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setOrientation(0L);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getUpdate());
      assertFalse(statechart2_Grid0.getVisited());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      statechart2_BaseValues0.setDegreesLeft((-1059L));
      assertEquals((-1059L), statechart2_BaseValues0.getDegreesLeft());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setBaseRotation(0L);
      assertEquals(0.0, statechart2_UserVar0.getBaseRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setRowOrColChanged(true);
      assertTrue(statechart2_UserVar0.getRowOrColChanged());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setWallLeft(0L);
      assertFalse(statechart2_Grid0.getUpdate());
      assertFalse(statechart2_Grid0.getVisited());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertEquals(3L, statechart2_Grid0.getMaxCol());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Statechart2.Output statechart2_Output0 = new Statechart2.Output();
      statechart2_Output0.setObstacles((-151L));
      assertEquals((-151L), statechart2_Output0.getObstacles());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      statechart2_LaserIntensity0.setIBackMean(95.0);
      assertEquals(95.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setTurned(false);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      statechart2_LaserIntensity0.setIRightMean((-1169.154533458965));
      assertEquals((-1169.154533458965), statechart2_LaserIntensity0.getIRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setMinDeg(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDLeftMean(0L);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setBaseSpeed(1345.89);
      assertEquals(1345.89, statechart2_UserVar0.getBaseSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu;
      statechart2_Imu0.setPitch(90.0);
      assertEquals(90.0, statechart2_Imu0.getPitch(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.setVisited(true);
      assertTrue(statechart2_Grid0.getVisited());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDLeftMax(1731.6835768);
      assertEquals(1731.6835768, statechart2_LaserDistance0.getDLeftMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setLimitDegreeLow((-2996.19868));
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.setILeftMin((-1.0));
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.setReceive(true);
      assertTrue(statechart2_Grid0.getReceive());
      
      Statechart2.Grid statechart2_Grid1 = statechart2_0.grid();
      assertEquals(3L, statechart2_Grid1.getMaxCol());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setTurnType(0L);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getAligned());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDBackMin(0.0);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.setGems(2000L);
      assertEquals(2000L, statechart2_Output0.getGems());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setIsInSpecificExploration(false);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertFalse(statechart2_UserVar0.getAligned());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Odom statechart2_Odom0 = statechart2_0.odom();
      statechart2_Odom0.setY(8L);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Odom0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos();
      statechart2_StartPos0.setLaserDegOffset((-2939L));
      assertFalse(statechart2_StartPos0.getSetZero());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_StartPos0.getZeroSouthDegree(), 0.01);
      assertEquals(0.0, statechart2_StartPos0.getZeroX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Statechart2.Imu statechart2_Imu0 = new Statechart2.Imu();
      assertEquals(0.0, statechart2_Imu0.getYaw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setIm90((-2618.803));
      assertEquals((-2618.803), statechart2_LaserIntensity0.getIm90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu;
      statechart2_Imu0.setRoll((-140.158506859));
      assertEquals((-140.158506859), statechart2_Imu0.getRoll(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues();
      statechart2_BaseValues0.setMaxSpeed((-1477.04748));
      assertEquals(2.84, statechart2_BaseValues0.getMaxRotation(), 0.01);
      assertEquals(10L, statechart2_BaseValues0.getDegreesFront());
      assertEquals(10L, statechart2_BaseValues0.getDegreesLeft());
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDMean(0.0);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setAveOff((-697.7635));
      assertEquals((-697.7635), statechart2_UserVar0.getAveOff(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos();
      statechart2_StartPos0.setZeroX((-1L));
      assertEquals((-1.0), statechart2_StartPos0.getZeroX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setAligned(true);
      assertTrue(statechart2_UserVar0.getAligned());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.setFinish(2000L);
      assertEquals(2000L, statechart2_Output0.getFinish());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setLimitDegreeHigh(2196.48008);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setLimitType(0L);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMaxDegF((-1881L));
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setMinDegL((-665L));
      assertEquals((-665L), statechart2_LaserDistance0.getMinDegL());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setIBackMin(0L);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.setUpdate(true);
      assertTrue(statechart2_Grid0.getUpdate());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setD180(0.0);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      statechart2_LaserDistance0.setMaxDegB(365L);
      assertEquals(365L, statechart2_LaserDistance0.getMaxDegB());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setStraighten(false);
      assertFalse(statechart2_UserVar0.getStraighten());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDMin((-1L));
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.setGridSize(3819.416);
      assertEquals(3819.416, statechart2_Grid0.getGridSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = new Statechart2.Computer(statechart2_0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setDRightMax(5027.6912322);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setD0((-280.5867337697302));
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Statechart2.Odom statechart2_Odom0 = new Statechart2.Odom();
      statechart2_Odom0.setX((-2349.5969917213));
      assertEquals((-2349.5969917213), statechart2_Odom0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      statechart2_UserVar0.setXRow((-2489.410731));
      assertEquals((-2489.410731), statechart2_UserVar0.getXRow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos();
      statechart2_StartPos0.setZeroY((-2996.19868));
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_StartPos0.getZeroX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.setAbsDis((-5884.30740503));
      assertEquals((-5884.30740503), statechart2_UserVar0.getAbsDis(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setOrientation(0L);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.setYAbs(0.0);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setDRightMean(0L);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.setMinDegF((-1531L));
      assertEquals((-1531L), statechart2_LaserDistance0.getMinDegF());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.setD90(0.0);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      statechart2_LaserDistance0.setDMax(1031.0);
      assertEquals(1031.0, statechart2_LaserDistance0.getDMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.setIFrontMax(0.0);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_PREPARE;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
      boolean boolean0 = statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL;
      statechart2_0.isStateActive(statechart2_State0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.State statechart2_State0 = Statechart2.State.S_MANUAL_MODE_MANUAL_MODE_STOPPED;
      boolean boolean0 = statechart2_0.isStateActive(statechart2_State0);
      assertFalse(boolean0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.nextEvent();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      boolean boolean0 = statechart2_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      // Undeclared exception!
      try { 
        statechart2_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.setDoCompletion(true);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.OperationCallback statechart2_OperationCallback0 = mock(Statechart2.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2_0.setOperationCallback(statechart2_OperationCallback0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.setTimerService((ITimerService) null);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      boolean boolean0 = statechart2_0.isFinal();
      assertFalse(statechart2_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.getDoCompletion();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.setCompleted(true);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      // Undeclared exception!
      try { 
        statechart2_0.raiseTimeEvent((-915));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      ITimerService iTimerService0 = statechart2_0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.getCompleted();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      // Undeclared exception!
      try { 
        statechart2_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.getStateConfVectorPosition();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.setIsExecuting(true);
      boolean boolean0 = statechart2_0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.exit();
      assertFalse(statechart2_0.isFinal());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.setStateConfVectorPosition(0L);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      double double0 = statechart2_LaserIntensity0.getIFrontMax();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      double double0 = statechart2_LaserIntensity0.getI0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.getIm90();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getILeftMean();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getIRightMax();
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      double double0 = statechart2_LaserIntensity0.getI90();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getIBackMax();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.getIBackMean();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.getIRightMean();
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      statechart2_LaserIntensity0.getI180();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      double double0 = statechart2_LaserIntensity0.getILeftMin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getIRightMin();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = new Statechart2.LaserIntensity();
      double double0 = statechart2_LaserIntensity0.getILeftMax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getIFrontMean();
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity;
      statechart2_LaserIntensity0.getIBackMin();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI0(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserIntensity statechart2_LaserIntensity0 = statechart2_0.laserIntensity();
      double double0 = statechart2_LaserIntensity0.getIFrontMin();
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI180(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIRightMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getILeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getI90(), 0.01);
      assertEquals(0.0, statechart2_LaserIntensity0.getIm90(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.getLimitType();
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getLimitDegreeHigh();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getXRow();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getBaseSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      boolean boolean0 = statechart2_UserVar0.getStraighten();
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertFalse(boolean0);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getAligned());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      long long0 = statechart2_UserVar0.getOrientation();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getOffBack();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      boolean boolean0 = statechart2_UserVar0.getTurned();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      long long0 = statechart2_UserVar0.getCurrentOrientation();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getStraightOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getLimitDegreeLow();
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getAbsDis();
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.getSpecificRow();
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      long long0 = statechart2_UserVar0.getSpecificColumn();
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_0.isActive());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(1L, long0);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      boolean boolean0 = statechart2_UserVar0.getAligned();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getUserX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getAveOff();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getXAbs();
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      long long0 = statechart2_UserVar0.getCalibrationIncrement();
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(1L, long0);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      long long0 = statechart2_UserVar0.getTurnType();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      statechart2_UserVar0.getIsInSpecificExploration();
      assertFalse(statechart2_0.isActive());
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getYAbs();
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getXRow(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getUserY();
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Statechart2.UserVar statechart2_UserVar0 = new Statechart2.UserVar();
      double double0 = statechart2_UserVar0.getYCol();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar();
      double double0 = statechart2_UserVar0.getBaseRotation();
      assertEquals(0.2, double0, 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getAveOff(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeLow(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertFalse(statechart2_0.isActive());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertFalse(statechart2_UserVar0.getAligned());
      assertFalse(statechart2_UserVar0.getRowOrColChanged());
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getXAbs(), 0.01);
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      statechart2_UserVar0.getStartprocedure();
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertFalse(statechart2_UserVar0.getIsInSpecificExploration());
      assertEquals(0.05, statechart2_UserVar0.getBaseSpeed(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getStraightOffset(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserY(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertFalse(statechart2_UserVar0.getStraighten());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.UserVar statechart2_UserVar0 = statechart2_0.userVar;
      boolean boolean0 = statechart2_UserVar0.getRowOrColChanged();
      assertEquals(3L, statechart2_UserVar0.getSpecificRow());
      assertTrue(statechart2_UserVar0.getStartprocedure());
      assertEquals(0.0, statechart2_UserVar0.getYAbs(), 0.01);
      assertEquals(0.0, statechart2_UserVar0.getOffBack(), 0.01);
      assertFalse(statechart2_UserVar0.getTurned());
      assertEquals(0.0, statechart2_UserVar0.getLimitDegreeHigh(), 0.01);
      assertFalse(statechart2_UserVar0.getAligned());
      assertEquals(0.0, statechart2_UserVar0.getUserX(), 0.01);
      assertEquals(0.2, statechart2_UserVar0.getBaseRotation(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, statechart2_UserVar0.getAbsDis(), 0.01);
      assertEquals(1L, statechart2_UserVar0.getCalibrationIncrement());
      assertEquals(0.0, statechart2_UserVar0.getYCol(), 0.01);
      assertFalse(statechart2_UserVar0.getStraighten());
      assertFalse(statechart2_0.isActive());
      assertEquals(1L, statechart2_UserVar0.getSpecificColumn());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Statechart2.Odom statechart2_Odom0 = new Statechart2.Odom();
      double double0 = statechart2_Odom0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Odom statechart2_Odom0 = statechart2_0.odom();
      double double0 = statechart2_Odom0.getZ();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_Odom0.getY(), 0.01);
      assertEquals(0.0, statechart2_Odom0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Odom statechart2_Odom0 = statechart2_0.odom();
      double double0 = statechart2_Odom0.getY();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Odom0.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDRightMax();
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getMinDegL();
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      long long0 = statechart2_LaserDistance0.getMaxDeg();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      long long0 = statechart2_LaserDistance0.getMaxDegL();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      double double0 = statechart2_LaserDistance0.getDm90();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.laserDistance.getDLeftMean();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      double double0 = statechart2_LaserDistance0.getD180();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDLeftMax();
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getMinDeg();
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      double double0 = statechart2_LaserDistance0.getDBackMax();
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getDFrontMax();
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.getDBackMean();
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDRightMin();
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getD90();
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDMax();
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      double double0 = statechart2_LaserDistance0.getDRightMean();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.getMinDegF();
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      double double0 = statechart2_LaserDistance0.getDFrontMin();
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.laserDistance.getMinDegR();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getMaxDegR();
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      double double0 = statechart2_LaserDistance0.getDFrontMean();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      double double0 = statechart2_LaserDistance0.getDBackMin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance();
      statechart2_LaserDistance0.getDLeftMin();
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      long long0 = statechart2_LaserDistance0.getMinDegB();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getMaxDegF();
      assertEquals(0.0, statechart2_LaserDistance0.getDMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      statechart2_LaserDistance0.getMaxDegB();
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getD0(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getD180(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDm90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.LaserDistance statechart2_LaserDistance0 = statechart2_0.laserDistance;
      double double0 = statechart2_LaserDistance0.getD0();
      assertEquals(0.0, statechart2_LaserDistance0.getD90(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDRightMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDLeftMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMax(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDMean(), 0.01);
      assertEquals(0.0, statechart2_LaserDistance0.getDBackMin(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_LaserDistance0.getDFrontMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Statechart2.LaserDistance statechart2_LaserDistance0 = new Statechart2.LaserDistance();
      double double0 = statechart2_LaserDistance0.getDMean();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = statechart2_0.computer;
      // Undeclared exception!
      try { 
        statechart2_Computer0.raiseA_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = statechart2_0.computer;
      // Undeclared exception!
      try { 
        statechart2_Computer0.raiseX_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      // Undeclared exception!
      try { 
        statechart2_0.computer.raiseM_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = statechart2_0.computer;
      // Undeclared exception!
      try { 
        statechart2_Computer0.raiseS_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = statechart2_0.computer();
      // Undeclared exception!
      try { 
        statechart2_Computer0.raiseW_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Computer statechart2_Computer0 = statechart2_0.computer();
      // Undeclared exception!
      try { 
        statechart2_Computer0.raiseD_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu();
      double double0 = statechart2_Imu0.getRoll();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_Imu0.getYaw(), 0.01);
      assertEquals(0.0, statechart2_Imu0.getPitch(), 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu;
      double double0 = statechart2_Imu0.getPitch();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Imu0.getRoll(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Imu statechart2_Imu0 = statechart2_0.imu;
      statechart2_Imu0.getYaw();
      assertEquals(0.0, statechart2_Imu0.getRoll(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Imu0.getPitch(), 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Statechart2.Output statechart2_Output0 = new Statechart2.Output();
      long long0 = statechart2_Output0.getGems();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output;
      double double0 = statechart2_Output0.getRotation();
      assertEquals(0.0, statechart2_Output0.getSpeed(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.getObstacles();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Output0.getRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output;
      double double0 = statechart2_Output0.getSpeed();
      assertEquals(0.0, double0, 0.01);
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Output statechart2_Output0 = statechart2_0.output();
      statechart2_Output0.getFinish();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_Output0.getRotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Statechart2.Grid statechart2_Grid0 = new Statechart2.Grid();
      long long0 = statechart2_Grid0.getWallBack();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      boolean boolean0 = statechart2_Grid0.getVisited();
      assertFalse(statechart2_Grid0.getUpdate());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      assertFalse(boolean0);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getReceive());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      boolean boolean0 = statechart2_Grid0.getReceive();
      assertFalse(boolean0);
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getVisited());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertFalse(statechart2_Grid0.getUpdate());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      long long0 = statechart2_Grid0.getMaxRow();
      assertFalse(statechart2_Grid0.getReceive());
      assertEquals(3L, long0);
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertFalse(statechart2_Grid0.getVisited());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getUpdate());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.getColumn();
      assertFalse(statechart2_Grid0.getVisited());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getReceive());
      assertEquals(3L, statechart2_Grid0.getMaxCol());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.getUpdate();
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getVisited());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.getOrientation();
      assertFalse(statechart2_Grid0.getReceive());
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertFalse(statechart2_Grid0.getVisited());
      assertFalse(statechart2_0.isActive());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      statechart2_0.grid.getWallLeft();
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.getRow();
      assertFalse(statechart2_0.isActive());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_Grid0.getUpdate());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      statechart2_Grid0.getWallFront();
      assertFalse(statechart2_Grid0.getReceive());
      assertFalse(statechart2_0.isActive());
      assertEquals(3L, statechart2_Grid0.getMaxCol());
      assertEquals(3L, statechart2_Grid0.getMaxRow());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid;
      statechart2_Grid0.getWallRight();
      assertFalse(statechart2_Grid0.getVisited());
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertFalse(statechart2_Grid0.getUpdate());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getReceive());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.Grid statechart2_Grid0 = statechart2_0.grid();
      long long0 = statechart2_Grid0.getMaxCol();
      assertFalse(statechart2_Grid0.getVisited());
      assertFalse(statechart2_Grid0.getUpdate());
      assertEquals(3L, long0);
      assertEquals(0.48, statechart2_Grid0.getGridSize(), 0.01);
      assertEquals(3L, statechart2_Grid0.getMaxRow());
      assertFalse(statechart2_0.isActive());
      assertFalse(statechart2_Grid0.getReceive());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Statechart2.Grid statechart2_Grid0 = new Statechart2.Grid();
      double double0 = statechart2_Grid0.getGridSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos();
      statechart2_StartPos0.getZeroSouthDegree();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, statechart2_StartPos0.getZeroX(), 0.01);
      assertEquals(0.0, statechart2_StartPos0.getZeroY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Statechart2.StartPos statechart2_StartPos0 = new Statechart2.StartPos();
      long long0 = statechart2_StartPos0.getLaserDegOffset();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Statechart2.StartPos statechart2_StartPos0 = new Statechart2.StartPos();
      boolean boolean0 = statechart2_StartPos0.getSetZero();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.StartPos statechart2_StartPos0 = statechart2_0.startPos;
      double double0 = statechart2_StartPos0.getZeroY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, statechart2_StartPos0.getZeroX(), 0.01);
      assertFalse(statechart2_StartPos0.getSetZero());
      assertFalse(statechart2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      double double0 = statechart2_0.startPos.getZeroX();
      assertFalse(statechart2_0.isActive());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      long long0 = statechart2_BaseValues0.getDegreesLeft();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues;
      long long0 = statechart2_BaseValues0.getDegreesBack();
      assertEquals(10L, statechart2_BaseValues0.getDegreesFront());
      assertEquals(2.84, statechart2_BaseValues0.getMaxRotation(), 0.01);
      assertEquals(0.5, statechart2_BaseValues0.getMaxSpeed(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(10L, statechart2_BaseValues0.getDegreesRight());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Statechart2.BaseValues statechart2_BaseValues0 = new Statechart2.BaseValues();
      long long0 = statechart2_BaseValues0.getDegreesFront();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues();
      statechart2_BaseValues0.getMaxRotation();
      assertFalse(statechart2_0.isActive());
      assertEquals(10L, statechart2_BaseValues0.getDegreesFront());
      assertEquals(10L, statechart2_BaseValues0.getDegreesLeft());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues;
      statechart2_BaseValues0.getDegreesRight();
      assertEquals(0.5, statechart2_BaseValues0.getMaxSpeed(), 0.01);
      assertFalse(statechart2_0.isActive());
      assertEquals(2.84, statechart2_BaseValues0.getMaxRotation(), 0.01);
      assertEquals(10L, statechart2_BaseValues0.getDegreesFront());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Statechart2 statechart2_0 = new Statechart2();
      Statechart2.BaseValues statechart2_BaseValues0 = statechart2_0.baseValues();
      double double0 = statechart2_BaseValues0.getMaxSpeed();
      assertFalse(statechart2_0.isActive());
      assertEquals(10L, statechart2_BaseValues0.getDegreesRight());
      assertEquals(10L, statechart2_BaseValues0.getDegreesFront());
      assertEquals(0.5, double0, 0.01);
  }
}
