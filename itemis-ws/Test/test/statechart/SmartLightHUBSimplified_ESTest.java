/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 08:22:20 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Hub_PowerManager;
import statechart.Network_Component;
import statechart.SmartLightHUBSimplified;
import statechart.SmartLightSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartLightHUBSimplified_ESTest extends SmartLightHUBSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartLightHUBSimplified.Power smartLightHUBSimplified_Power0 = new SmartLightHUBSimplified.Power();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      Network_Component network_Component0 = new Network_Component();
      smartLightHUBSimplified0.setWiFi(network_Component0);
      assertFalse(network_Component0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      smartLightHUBSimplified0.setLED1((SmartLightSystem) null);
      assertFalse(smartLightHUBSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightHUBSimplified0.setLED2(smartLightSystem0);
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System2 smartLightHUBSimplified_System2_0 = new SmartLightHUBSimplified.System2(smartLightHUBSimplified0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      Hub_PowerManager hub_PowerManager0 = new Hub_PowerManager();
      smartLightHUBSimplified0.setPowerManager(hub_PowerManager0);
      assertEquals(0L, hub_PowerManager0.getDevice_index());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.$NULLSTATE$;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT2REGION_LED2;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT2REGION_LED2_STATUS_ERROR;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT1REGION_LED1_STATUS_ERROR;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT1REGION_LED1_STATUS_WORKING;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_NETWORKREGION_CONNECTED;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_NETWORKREGION_NO_CONNECTION;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER_TURNINGOFF_DEVICE_OVERTHRESHOLD__FINAL_;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER_TURNINGOFF_DEVICE_OVERTHRESHOLD_LED_LIGHT2;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER_TURNINGOFF_DEVICE_OVERTHRESHOLD_LED_LIGHT1;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_POWERCONSUMPTIONCALCULATOR;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM2_LED_LIGHT2_OFF;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM2_LED_LIGHT2_ON;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM1_LED_LIGHT1_OFF;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM1_LED_LIGHT1_ON;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_ALLSYSTEMSOFF;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT1REGION_LED1;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.State smartLightHUBSimplified_State0 = SmartLightHUBSimplified.State.SMARTLIGHTHUBSYSTEM_1_0_HUBOFF;
      boolean boolean0 = smartLightHUBSimplified0.isStateActive(smartLightHUBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      boolean boolean0 = smartLightHUBSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System2 smartLightHUBSimplified_System2_0 = smartLightHUBSimplified0.system2();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System2_0.raiseWorking();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System2 smartLightHUBSimplified_System2_0 = smartLightHUBSimplified0.system2();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System2_0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified0.raiseTimeEvent((-2306));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      boolean boolean0 = smartLightHUBSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.Network smartLightHUBSimplified_Network0 = smartLightHUBSimplified0.network();
      assertNotNull(smartLightHUBSimplified_Network0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      smartLightHUBSimplified0.exit();
      assertFalse(smartLightHUBSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      smartLightHUBSimplified0.power();
      assertFalse(smartLightHUBSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      smartLightHUBSimplified0.setTimerService((ITimerService) null);
      assertFalse(smartLightHUBSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System2 smartLightHUBSimplified_System2_0 = smartLightHUBSimplified0.system2();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System2_0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System1 smartLightHUBSimplified_System1_0 = new SmartLightHUBSimplified.System1(smartLightHUBSimplified0);
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System1_0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System1 smartLightHUBSimplified_System1_0 = new SmartLightHUBSimplified.System1(smartLightHUBSimplified0);
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System1_0.raiseWorking();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.System1 smartLightHUBSimplified_System1_0 = smartLightHUBSimplified0.system1();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_System1_0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.HUB smartLightHUBSimplified_HUB0 = new SmartLightHUBSimplified.HUB(smartLightHUBSimplified0);
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_HUB0.raiseTurnOFFSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.HUB smartLightHUBSimplified_HUB0 = smartLightHUBSimplified0.hUB();
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_HUB0.raiseTurnONSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.Network smartLightHUBSimplified_Network0 = new SmartLightHUBSimplified.Network(smartLightHUBSimplified0);
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_Network0.raiseConnect();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartLightHUBSimplified smartLightHUBSimplified0 = new SmartLightHUBSimplified();
      SmartLightHUBSimplified.Network smartLightHUBSimplified_Network0 = new SmartLightHUBSimplified.Network(smartLightHUBSimplified0);
      // Undeclared exception!
      try { 
        smartLightHUBSimplified_Network0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUBSimplified", e);
      }
  }
}
