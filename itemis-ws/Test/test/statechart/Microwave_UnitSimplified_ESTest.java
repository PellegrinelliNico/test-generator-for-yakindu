/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:03:49 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Microwave_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Microwave_UnitSimplified_ESTest extends Microwave_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      // Undeclared exception!
      try { 
        microwave_UnitSimplified0.raiseTimeEvent(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        microwave_UnitSimplified0.raiseTimeEvent((-2022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2022
         //
         verifyException("statechart.Microwave_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      // Undeclared exception!
      try { 
        microwave_UnitSimplified0.isStateActive((Microwave_UnitSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Microwave_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseStart();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.Door microwave_UnitSimplified_Door0 = new Microwave_UnitSimplified.Door(microwave_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = new Microwave_UnitSimplified.Device(microwave_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseResetTimer();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.Door microwave_UnitSimplified_Door0 = microwave_UnitSimplified0.door();
      microwave_UnitSimplified_Door0.raiseOpen();
      microwave_UnitSimplified_Device0.raiseStart();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.Door microwave_UnitSimplified_Door0 = microwave_UnitSimplified0.door();
      microwave_UnitSimplified_Door0.raiseOpen();
      microwave_UnitSimplified_Device0.raiseOff();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseStart();
      microwave_UnitSimplified_Device0.raisePause();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOff();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseAddTimer();
      microwave_UnitSimplified_Device0.raiseStart();
      microwave_UnitSimplified_Device0.raisePause();
      microwave_UnitSimplified0.exit();
      assertFalse(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseStart();
      assertTrue(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.exit();
      assertFalse(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      assertTrue(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.exit();
      assertFalse(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      assertTrue(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.exit();
      assertFalse(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.Door microwave_UnitSimplified_Door0 = microwave_UnitSimplified0.door();
      microwave_UnitSimplified_Door0.raiseOpen();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOOROPENED;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOORCLOSED;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(microwave_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER__STARTING_TIMER__PAUSE;
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseStart();
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(microwave_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON_;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(microwave_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON_;
      microwave_UnitSimplified0.enter();
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(microwave_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___OFF_;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertTrue(microwave_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State.$NULLSTATE$;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON_;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOOROPENED;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__ADDTIMER;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER__STARTING_TIMER__START;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER__STARTING_TIMER__PAUSE;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__IDLE_STANDBY;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOORCLOSED;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      Microwave_UnitSimplified.State microwave_UnitSimplified_State0 = Microwave_UnitSimplified.State._MICROWAVE_UNIT___OFF_;
      boolean boolean0 = microwave_UnitSimplified0.isStateActive(microwave_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.triggerWithoutEvent();
      assertFalse(microwave_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      boolean boolean0 = microwave_UnitSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      boolean boolean0 = microwave_UnitSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      microwave_UnitSimplified0.exit();
      assertFalse(microwave_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      // Undeclared exception!
      try { 
        microwave_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      boolean boolean0 = microwave_UnitSimplified0.isFinal();
      assertFalse(microwave_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      // Undeclared exception!
      try { 
        microwave_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseAddTimer();
      microwave_UnitSimplified_Device0.raiseStart();
      microwave_UnitSimplified_Device0.raisePause();
      microwave_UnitSimplified_Device0.raisePause();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      assertFalse(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.enter();
      microwave_UnitSimplified_Device0.raiseOn();
      Microwave_UnitSimplified.Door microwave_UnitSimplified_Door0 = microwave_UnitSimplified0.door();
      microwave_UnitSimplified_Door0.raiseOpen();
      microwave_UnitSimplified_Door0.raiseClose();
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(microwave_UnitSimplified0.isActive());
      
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseAddTimer();
      microwave_UnitSimplified_Device0.raiseStart();
      microwave_UnitSimplified_Device0.raisePause();
      microwave_UnitSimplified0.raiseTimeEvent(1);
      assertTrue(microwave_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Microwave_UnitSimplified microwave_UnitSimplified0 = new Microwave_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      microwave_UnitSimplified0.setTimerService(iTimerService0);
      microwave_UnitSimplified0.enter();
      Microwave_UnitSimplified.Device microwave_UnitSimplified_Device0 = microwave_UnitSimplified0.device();
      microwave_UnitSimplified_Device0.raiseOn();
      microwave_UnitSimplified_Device0.raiseAddTimer();
  }
}
