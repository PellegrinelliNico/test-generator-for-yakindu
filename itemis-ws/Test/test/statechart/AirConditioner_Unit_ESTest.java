/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:42:19 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.AirConditioner_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AirConditioner_Unit_ESTest extends AirConditioner_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.metric = null;
      airConditioner_Unit0.metric();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setTempChange(1853L);
      long long0 = airConditioner_Unit0.getTempChange();
      assertEquals(1853L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      boolean boolean0 = airConditioner_Unit0.getIsExecuting();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setDoCompletion(true);
      boolean boolean0 = airConditioner_Unit0.getDoCompletion();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertTrue(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setCompleted(true);
      boolean boolean0 = airConditioner_Unit0.getCompleted();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertTrue(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.isStateActive((AirConditioner_Unit.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setTempChange((-391L));
      long long0 = airConditioner_Unit0.getTempChange();
      assertEquals((-391L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Cool airConditioner_Unit_Cool0 = airConditioner_Unit0.cool;
      assertFalse(airConditioner_Unit_Cool0.getOn());
      
      airConditioner_Unit_Cool0.setOn(true);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Metric airConditioner_Unit_Metric0 = airConditioner_Unit0.metric;
      assertEquals("Celsius", airConditioner_Unit_Metric0.getTemp());
      
      airConditioner_Unit_Metric0.setTemp("1t7ah|ZZ");
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setRoomTemp((-2890L));
      long long0 = airConditioner_Unit0.getRoomTemp();
      assertEquals((-2890L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Heat airConditioner_Unit_Heat0 = new AirConditioner_Unit.Heat(airConditioner_Unit0);
      airConditioner_Unit_Heat0.setOn(true);
      assertTrue(airConditioner_Unit_Heat0.getOn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Metric airConditioner_Unit_Metric0 = new AirConditioner_Unit.Metric(airConditioner_Unit0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State.$NULLSTATE$;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertFalse(boolean0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_DECREASETEMP;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_INCREASETEMP;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_CONVERTINGTEMP_INITIALIZECONVERTER;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_COOLDOWN;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_DETERMINETEMPCHANGE;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertFalse(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_HEATINGUP;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_MAINTAINING;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_MONITORING;
      airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.State airConditioner_Unit_State0 = AirConditioner_Unit.State._AIRCONDITIONER__OFF;
      boolean boolean0 = airConditioner_Unit0.isStateActive(airConditioner_Unit_State0);
      assertFalse(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      boolean boolean0 = airConditioner_Unit0.nextEvent();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      boolean boolean0 = airConditioner_Unit0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setIsExecuting(true);
      airConditioner_Unit0.exit();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Metric airConditioner_Unit_Metric0 = airConditioner_Unit0.metric();
      String string0 = airConditioner_Unit_Metric0.getTemp();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals("Celsius", string0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Metric airConditioner_Unit_Metric0 = airConditioner_Unit0.metric;
      // Undeclared exception!
      try { 
        airConditioner_Unit_Metric0.raiseConvertToCelsius();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Cool airConditioner_Unit_Cool0 = airConditioner_Unit0.cool;
      // Undeclared exception!
      try { 
        airConditioner_Unit_Cool0.raiseDecrease();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Cool airConditioner_Unit_Cool0 = new AirConditioner_Unit.Cool(airConditioner_Unit0);
      airConditioner_Unit_Cool0.getOn();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Heat airConditioner_Unit_Heat0 = airConditioner_Unit0.heat;
      // Undeclared exception!
      try { 
        airConditioner_Unit_Heat0.raiseDecrease();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Heat airConditioner_Unit_Heat0 = new AirConditioner_Unit.Heat(airConditioner_Unit0);
      airConditioner_Unit_Heat0.getOn();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Heat airConditioner_Unit_Heat0 = airConditioner_Unit0.heat;
      // Undeclared exception!
      try { 
        airConditioner_Unit_Heat0.raiseIncrease();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Heat airConditioner_Unit_Heat0 = airConditioner_Unit0.heat();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(airConditioner_Unit_Heat0.getOn());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.getDoCompletion();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.getTimerService();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      assertFalse(airConditioner_Unit0.isActive());
      
      airConditioner_Unit0.exit();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.raiseTemp_up();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      long long0 = airConditioner_Unit0.getRoomTemp();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, long0);
      assertFalse(airConditioner_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setStateConfVectorPosition(0L);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(airConditioner_Unit0.isActive());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      boolean boolean0 = airConditioner_Unit0.isFinal();
      assertFalse(boolean0);
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertFalse(airConditioner_Unit0.isActive());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      long long0 = airConditioner_Unit0.getTempChange();
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
      assertEquals(0L, long0);
      assertFalse(airConditioner_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.raiseTemp_down();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Metric airConditioner_Unit_Metric0 = airConditioner_Unit0.metric();
      // Undeclared exception!
      try { 
        airConditioner_Unit_Metric0.raiseConvertToFahrenheit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.getStateConfVectorPosition();
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertFalse(airConditioner_Unit0.isActive());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.setTimerService((ITimerService) null);
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertFalse(airConditioner_Unit0.isActive());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      // Undeclared exception!
      try { 
        airConditioner_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      airConditioner_Unit0.getCompleted();
      assertFalse(airConditioner_Unit0.isActive());
      assertEquals(0L, airConditioner_Unit0.getTempChange());
      assertEquals(18L, airConditioner_Unit0.getRoomTemp());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AirConditioner_Unit airConditioner_Unit0 = new AirConditioner_Unit();
      AirConditioner_Unit.Cool airConditioner_Unit_Cool0 = airConditioner_Unit0.cool();
      // Undeclared exception!
      try { 
        airConditioner_Unit_Cool0.raiseIncrease();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_Unit", e);
      }
  }
}
