/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class LineFollowerSimplified implements ITimed, ICycleBased {

    private static class TimeEventsEvBuf {

        private boolean lineFollower_State_Transitions_Forward_time_event_0;

        private boolean lineFollower_PID_Calculater_PID_Compute_time_event_0;
    }

    private static class LineFollowerEvBuf {

        private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
    }

    public enum State {

        STATE_TRANSITIONS_STATIC_STATE, STATE_TRANSITIONS_FORWARD, PID_CALCULATER_PID_COMPUTE, $NULLSTATE$
    }

    private final State[] stateVector = new State[2];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[2];

    private long thr;

    private long getThr() {
        return thr;
    }

    private void setThr(long value) {
        this.thr = value;
    }

    private long prev0;

    private long getPrev0() {
        return prev0;
    }

    private void setPrev0(long value) {
        this.prev0 = value;
    }

    private long prev1;

    private long getPrev1() {
        return prev1;
    }

    private void setPrev1(long value) {
        this.prev1 = value;
    }

    private long prev2;

    private long getPrev2() {
        return prev2;
    }

    private void setPrev2(long value) {
        this.prev2 = value;
    }

    private long prev3;

    private long getPrev3() {
        return prev3;
    }

    private void setPrev3(long value) {
        this.prev3 = value;
    }

    private long prev4;

    private long getPrev4() {
        return prev4;
    }

    private void setPrev4(long value) {
        this.prev4 = value;
    }

    private long pIDforward;

    private long getPIDforward() {
        return pIDforward;
    }

    private void setPIDforward(long value) {
        this.pIDforward = value;
    }

    private long pIDleft;

    private long getPIDleft() {
        return pIDleft;
    }

    private void setPIDleft(long value) {
        this.pIDleft = value;
    }

    private long kp1;

    private long getKp1() {
        return kp1;
    }

    private void setKp1(long value) {
        this.kp1 = value;
    }

    private long kd1;

    private long getKd1() {
        return kd1;
    }

    private void setKd1(long value) {
        this.kd1 = value;
    }

    private long kp2;

    private long getKp2() {
        return kp2;
    }

    private void setKp2(long value) {
        this.kp2 = value;
    }

    private long kp3;

    private long getKp3() {
        return kp3;
    }

    private void setKp3(long value) {
        this.kp3 = value;
    }

    private long kd2;

    private long getKd2() {
        return kd2;
    }

    private void setKd2(long value) {
        this.kd2 = value;
    }

    private long kd3;

    private long getKd3() {
        return kd3;
    }

    private void setKd3(long value) {
        this.kd3 = value;
    }

    private LineFollowerEvBuf current = new LineFollowerEvBuf();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    private long stateConfVectorPosition;

    private long getStateConfVectorPosition() {
        return stateConfVectorPosition;
    }

    private void setStateConfVectorPosition(long value) {
        this.stateConfVectorPosition = value;
    }

    public LineFollowerSimplified() {
        for (int i = 0; i < 2; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart LineFollower */
        setLS0(0l);
        setLS1(0l);
        setLS2(0l);
        setLS3(0l);
        setLS4(0l);
        setDirection(0l);
        setLeftVelocity(0l);
        setRightVelocity(0l);
        setThr(256l);
        setPrev0(0l);
        setPrev1(0l);
        setPrev2(0l);
        setPrev3(0l);
        setPrev4(0l);
        setPIDforward(0l);
        setPIDleft(0l);
        setKp1(90l);
        setKd1(10l);
        setKp2(30l);
        setKp3(60l);
        setKd2(4l);
        setKd3(6l);
        isExecuting = false;
    }

    public void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        swapInEvents();
        microStep();
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart LineFollower */
        enterSequence_State_Transitions_default();
        enterSequence_PID_Calculater_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart LineFollower */
        exitSequence_State_Transitions();
        exitSequence_PID_Calculater();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$ || stateVector[1] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void swapInEvents() {
        current.timeEvents.lineFollower_State_Transitions_Forward_time_event_0 = timeEvents[0];
        timeEvents[0] = false;
        current.timeEvents.lineFollower_PID_Calculater_PID_Compute_time_event_0 = timeEvents[1];
        timeEvents[1] = false;
    }

    private void clearInEvents() {
        timeEvents[0] = false;
        timeEvents[1] = false;
    }

    private void microStep() {
        long transitioned = -1l;
        stateConfVectorPosition = 0l;
        switch(stateVector[0]) {
            case STATE_TRANSITIONS_STATIC_STATE:
                transitioned = state_Transitions_Static_State_react(transitioned);
                break;
            case STATE_TRANSITIONS_FORWARD:
                transitioned = state_Transitions_Forward_react(transitioned);
                break;
            default:
                break;
        }
        if (getStateConfVectorPosition() < 1l) {
            switch(stateVector[1]) {
                case PID_CALCULATER_PID_COMPUTE:
                    pID_Calculater_PID_Compute_react(transitioned);
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case STATE_TRANSITIONS_STATIC_STATE:
                return stateVector[0] == State.STATE_TRANSITIONS_STATIC_STATE;
            case STATE_TRANSITIONS_FORWARD:
                return stateVector[0] == State.STATE_TRANSITIONS_FORWARD;
            case PID_CALCULATER_PID_COMPUTE:
                return stateVector[1] == State.PID_CALCULATER_PID_COMPUTE;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        timeEvents[eventID] = true;
    }

    private long lS0;

    private long getLS0() {
        return lS0;
    }

    private void setLS0(long value) {
        this.lS0 = value;
    }

    private long lS1;

    private long getLS1() {
        return lS1;
    }

    private void setLS1(long value) {
        this.lS1 = value;
    }

    private long lS2;

    private long getLS2() {
        return lS2;
    }

    private void setLS2(long value) {
        this.lS2 = value;
    }

    private long lS3;

    private long getLS3() {
        return lS3;
    }

    private void setLS3(long value) {
        this.lS3 = value;
    }

    private long lS4;

    private long getLS4() {
        return lS4;
    }

    private void setLS4(long value) {
        this.lS4 = value;
    }

    private long direction;

    private long getDirection() {
        return direction;
    }

    private void setDirection(long value) {
        this.direction = value;
    }

    private long leftVelocity;

    private long getLeftVelocity() {
        return leftVelocity;
    }

    private void setLeftVelocity(long value) {
        this.leftVelocity = value;
    }

    private long rightVelocity;

    private long getRightVelocity() {
        return rightVelocity;
    }

    private void setRightVelocity(long value) {
        this.rightVelocity = value;
    }

    /* Entry action for state 'Forward'. */
    private void entryAction_State_Transitions_Forward() {
        /* Entry action for state 'Forward'. */
        timerService.setTimer(this, 0, 100l, true);
    }

    /* Entry action for state 'PID Compute'. */
    private void entryAction_PID_Calculater_PID_Compute() {
        /* Entry action for state 'PID Compute'. */
        timerService.setTimer(this, 1, 100l, true);
    }

    /* Exit action for state 'Forward'. */
    private void exitAction_State_Transitions_Forward() {
        /* Exit action for state 'Forward'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state 'PID Compute'. */
    private void exitAction_PID_Calculater_PID_Compute() {
        /* Exit action for state 'PID Compute'. */
        timerService.unsetTimer(this, 1);
    }

    /* 'default' enter sequence for state Static State */
    private void enterSequence_State_Transitions_Static_State_default() {
        /* 'default' enter sequence for state Static State */
        stateVector[0] = State.STATE_TRANSITIONS_STATIC_STATE;
        stateConfVectorPosition = 0;
    }

    /* 'default' enter sequence for state Forward */
    private void enterSequence_State_Transitions_Forward_default() {
        /* 'default' enter sequence for state Forward */
        entryAction_State_Transitions_Forward();
        stateVector[0] = State.STATE_TRANSITIONS_FORWARD;
        stateConfVectorPosition = 0;
    }

    /* 'default' enter sequence for state PID Compute */
    private void enterSequence_PID_Calculater_PID_Compute_default() {
        /* 'default' enter sequence for state PID Compute */
        entryAction_PID_Calculater_PID_Compute();
        stateVector[1] = State.PID_CALCULATER_PID_COMPUTE;
        stateConfVectorPosition = 1;
    }

    /* 'default' enter sequence for region State Transitions */
    private void enterSequence_State_Transitions_default() {
        /* 'default' enter sequence for region State Transitions */
        react_State_Transitions__entry_Default();
    }

    /* 'default' enter sequence for region PID Calculater */
    private void enterSequence_PID_Calculater_default() {
        /* 'default' enter sequence for region PID Calculater */
        react_PID_Calculater__entry_Default();
    }

    /* Default exit sequence for state Static State */
    private void exitSequence_State_Transitions_Static_State() {
        /* Default exit sequence for state Static State */
        stateVector[0] = State.$NULLSTATE$;
        stateConfVectorPosition = 0;
    }

    /* Default exit sequence for state Forward */
    private void exitSequence_State_Transitions_Forward() {
        /* Default exit sequence for state Forward */
        stateVector[0] = State.$NULLSTATE$;
        stateConfVectorPosition = 0;
        exitAction_State_Transitions_Forward();
    }

    /* Default exit sequence for state PID Compute */
    private void exitSequence_PID_Calculater_PID_Compute() {
        /* Default exit sequence for state PID Compute */
        stateVector[1] = State.$NULLSTATE$;
        stateConfVectorPosition = 1;
        exitAction_PID_Calculater_PID_Compute();
    }

    /* Default exit sequence for region State Transitions */
    private void exitSequence_State_Transitions() {
        /* Default exit sequence for region State Transitions */
        switch(stateVector[0]) {
            case STATE_TRANSITIONS_STATIC_STATE:
                exitSequence_State_Transitions_Static_State();
                break;
            case STATE_TRANSITIONS_FORWARD:
                exitSequence_State_Transitions_Forward();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region PID Calculater */
    private void exitSequence_PID_Calculater() {
        /* Default exit sequence for region PID Calculater */
        switch(stateVector[1]) {
            case PID_CALCULATER_PID_COMPUTE:
                exitSequence_PID_Calculater_PID_Compute();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_State_Transitions__entry_Default() {
        /* Default react sequence for initial entry  */
        setLeftVelocity(0l);
        setRightVelocity(0l);
        setDirection(1l);
        enterSequence_State_Transitions_Static_State_default();
    }

    /* Default react sequence for initial entry  */
    private void react_PID_Calculater__entry_Default() {
        /* Default react sequence for initial entry  */
        setPrev0(0l);
        setPrev1(0l);
        setPrev2(0l);
        setPrev3(0l);
        setPrev4(0l);
        enterSequence_PID_Calculater_PID_Compute_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long state_Transitions_Static_State_react(long transitioned_before) {
        /* The reactions of state Static State. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (getLS2() > getThr()) {
                exitSequence_State_Transitions_Static_State();
                setLeftVelocity((pIDforward - pIDleft));
                setRightVelocity((pIDforward + pIDleft));
                enterSequence_State_Transitions_Forward_default();
                transitioned_after = 0l;
            }
        }
        return transitioned_after;
    }

    private long state_Transitions_Forward_react(long transitioned_before) {
        /* The reactions of state Forward. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((((getLS0() < getThr() && getLS1() < getThr()) && getLS2() < getThr()) && getLS3() < getThr()) && getLS4() < getThr())) {
                exitSequence_State_Transitions_Forward();
                setLeftVelocity(0l);
                setRightVelocity(0l);
                enterSequence_State_Transitions_Static_State_default();
                transitioned_after = 0l;
            } else {
                if (getLeftVelocity() < 0l) {
                    exitSequence_State_Transitions_Forward();
                    setLeftVelocity(0l);
                    enterSequence_State_Transitions_Forward_default();
                    transitioned_after = 0l;
                } else {
                    if (getRightVelocity() < 0l) {
                        exitSequence_State_Transitions_Forward();
                        setRightVelocity(0l);
                        enterSequence_State_Transitions_Forward_default();
                        transitioned_after = 0l;
                    } else {
                        if (getLeftVelocity() > 100l) {
                            exitSequence_State_Transitions_Forward();
                            setLeftVelocity(100l);
                            enterSequence_State_Transitions_Forward_default();
                            transitioned_after = 0l;
                        } else {
                            if (getRightVelocity() > 100l) {
                                exitSequence_State_Transitions_Forward();
                                setRightVelocity(100l);
                                enterSequence_State_Transitions_Forward_default();
                                transitioned_after = 0l;
                            }
                        }
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (current.timeEvents.lineFollower_State_Transitions_Forward_time_event_0) {
                setLeftVelocity((pIDforward - pIDleft));
                setRightVelocity((pIDforward + pIDleft));
            }
        }
        return transitioned_after;
    }

    private long pID_Calculater_PID_Compute_react(long transitioned_before) {
        /* The reactions of state PID Compute. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        if (current.timeEvents.lineFollower_PID_Calculater_PID_Compute_time_event_0) {
            setPIDforward(((kp1 * lS2) + (kd1 * ((lS2 - prev2)))));
            setPIDforward(getPIDforward() / 1024l);
            setPIDleft(((((kp2 * ((lS0 - lS4))) + (kp3 * ((lS1 - lS3)))) + (kd2 * ((((lS0 - prev0) - lS4) + prev4)))) + (kd3 * ((((lS1 - prev1) - lS3) + prev3)))));
            setPIDleft(getPIDleft() / 1024l);
            setPrev0(lS0);
            setPrev1(lS1);
            setPrev2(lS2);
            setPrev3(lS3);
            setPrev4(lS4);
        }
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }
}
