/** Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;

public class Events implements ICycleBased {
	private static class InternalEvBuf {
		private boolean internalEvent;
		private boolean local_typedOutEvent;
		
		private long local_typedOutEventValue;
	}
	private static class EvBuf {
		private boolean b;
		
		private boolean bValue;
		private boolean i;
		
		private long iValue;
		private boolean str;
		
		private String strValue;
		private boolean inEvent;
		private boolean typedInEvent;
		
		private double typedInEventValue;
	}
	private static class EventsEvBuf {
		private InternalEvBuf internal = new InternalEvBuf();
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		MAIN_REGION_STATEZ,
		MAIN_REGION_STATEZ_R1_STATEC,
		MAIN_REGION_STATEZ_R1_STATEE,
		MAIN_REGION_STATEZ_R2_STATED,
		MAIN_REGION_STATEZ_R2_STATEF,
		MAIN_REGION__FINAL_,
		MAIN_REGION_BOOLEAN,
		MAIN_REGION_INTEGER,
		INTERNAL_STATE0,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private boolean internalEvent;
	private boolean local_typedOutEvent;
	
	private long local_typedOutEventValue;
	private EventsEvBuf current = new EventsEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Events() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		do { 
			microStep();
			swapInternalEvents();
		} while ((current.internal.internalEvent || current.internal.local_typedOutEvent));
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Events */
		enterSequence_main_region_default();
		enterSequence_internal_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Events */
		exitSequence_main_region();
		exitSequence_internal();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.iface.b = b;
		current.iface.bValue = bValue;
		b = false;
		current.iface.i = i;
		current.iface.iValue = iValue;
		i = false;
		current.iface.str = str;
		current.iface.strValue = strValue;
		str = false;
		current.iface.inEvent = inEvent;
		inEvent = false;
		current.iface.typedInEvent = typedInEvent;
		current.iface.typedInEventValue = typedInEventValue;
		typedInEvent = false;
	}
	
	private void clearInEvents() {
		b = false;
		i = false;
		str = false;
		inEvent = false;
		typedInEvent = false;
	}
	
	private void swapInternalEvents() {
		/* When processing internal events all incoming events are processed and must be cleared from current buffer. */
		current.iface.b = false;
		current.iface.i = false;
		current.iface.str = false;
		current.iface.inEvent = false;
		current.iface.typedInEvent = false;
		/* Swap all internal events. */
		current.internal.internalEvent = internalEvent;
		internalEvent = false;
		current.internal.local_typedOutEvent = local_typedOutEvent;
		current.internal.local_typedOutEventValue = local_typedOutEventValue;
		local_typedOutEvent = false;
	}
	
	private void clearInternalEvents() {
		internalEvent = false;
		local_typedOutEvent = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			transitioned = main_region_StateA_react(transitioned);
			break;
		case MAIN_REGION_STATEB:
			transitioned = main_region_StateB_react(transitioned);
			break;
		case MAIN_REGION_STATEZ_R1_STATEC:
			transitioned = main_region_StateZ_r1_StateC_react(transitioned);
			break;
		case MAIN_REGION_STATEZ_R1_STATEE:
			transitioned = main_region_StateZ_r1_StateE_react(transitioned);
			break;
		case MAIN_REGION__FINAL_:
			transitioned = main_region__final__react(transitioned);
			break;
		case MAIN_REGION_BOOLEAN:
			transitioned = main_region_boolean_react(transitioned);
			break;
		case MAIN_REGION_INTEGER:
			transitioned = main_region_integer_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_STATEZ_R2_STATED:
				transitioned = main_region_StateZ_r2_StateD_react(transitioned);
				break;
			case MAIN_REGION_STATEZ_R2_STATEF:
				transitioned = main_region_StateZ_r2_StateF_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case INTERNAL_STATE0:
				internal_State0_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		case MAIN_REGION_STATEZ:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_STATEZ.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_STATEZ_R2_STATEF.ordinal();
		case MAIN_REGION_STATEZ_R1_STATEC:
			return stateVector[0] == State.MAIN_REGION_STATEZ_R1_STATEC;
		case MAIN_REGION_STATEZ_R1_STATEE:
			return stateVector[0] == State.MAIN_REGION_STATEZ_R1_STATEE;
		case MAIN_REGION_STATEZ_R2_STATED:
			return stateVector[1] == State.MAIN_REGION_STATEZ_R2_STATED;
		case MAIN_REGION_STATEZ_R2_STATEF:
			return stateVector[1] == State.MAIN_REGION_STATEZ_R2_STATEF;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_BOOLEAN:
			return stateVector[0] == State.MAIN_REGION_BOOLEAN;
		case MAIN_REGION_INTEGER:
			return stateVector[0] == State.MAIN_REGION_INTEGER;
		case INTERNAL_STATE0:
			return stateVector[2] == State.INTERNAL_STATE0;
		default:
			return false;
		}
	}
	
	
	protected void raiseInternalEvent() {
		internalEvent = true;
	}
	
	protected void raiseLocal_typedOutEvent(long value) {
		local_typedOutEventValue = value;
		local_typedOutEvent = true;
	}
	protected long getLocal_typedOutEventValue() {
		if (! local_typedOutEvent ) 
			throw new IllegalStateException("Illegal event value access. Event Local_typedOutEvent is not raised!");
		return local_typedOutEventValue;
	}
	
	private boolean b;
	
	private boolean bValue;
	
	
	public void raiseB(boolean value) {
		bValue = value;
		b = true;
	}
	protected boolean getBValue() {
		if (! b ) 
			throw new IllegalStateException("Illegal event value access. Event B is not raised!");
		return bValue;
	}
	
	private boolean i;
	
	private long iValue;
	
	
	public void raiseI(long value) {
		iValue = value;
		i = true;
	}
	protected long getIValue() {
		if (! i ) 
			throw new IllegalStateException("Illegal event value access. Event I is not raised!");
		return iValue;
	}
	
	private boolean str;
	
	private String strValue;
	
	
	public void raiseStr(String value) {
		strValue = value;
		str = true;
	}
	protected String getStrValue() {
		if (! str ) 
			throw new IllegalStateException("Illegal event value access. Event Str is not raised!");
		return strValue;
	}
	
	private boolean inEvent;
	
	
	public void raiseInEvent() {
		inEvent = true;
	}
	
	private boolean outEvent;
	
	
	protected void raiseOutEvent() {
		outEvent = true;
		outEventObservable.next(null);
	}
	
	private Observable<Void> outEventObservable = new Observable<Void>();
	
	public Observable<Void> getOutEvent() {
		return outEventObservable;
	}
	
	private boolean typedInEvent;
	
	private double typedInEventValue;
	
	
	public void raiseTypedInEvent(double value) {
		typedInEventValue = value;
		typedInEvent = true;
	}
	protected double getTypedInEventValue() {
		if (! typedInEvent ) 
			throw new IllegalStateException("Illegal event value access. Event TypedInEvent is not raised!");
		return typedInEventValue;
	}
	
	private boolean typedOutEvent;
	
	private long typedOutEventValue;
	
	
	protected void raiseTypedOutEvent(long value) {
		typedOutEventValue = value;
		typedOutEvent = true;
		typedOutEventObservable.next(value);
		raiseLocal_typedOutEvent(value);
	}
	
	private Observable<Long> typedOutEventObservable = new Observable<Long>();
	
	public Observable<Long> getTypedOutEvent() {
		return typedOutEventObservable;
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		/* 'default' enter sequence for state StateA */
		stateVector[0] = State.MAIN_REGION_STATEA;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		/* 'default' enter sequence for state StateB */
		stateVector[0] = State.MAIN_REGION_STATEB;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StateC */
	private void enterSequence_main_region_StateZ_r1_StateC_default() {
		/* 'default' enter sequence for state StateC */
		stateVector[0] = State.MAIN_REGION_STATEZ_R1_STATEC;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StateE */
	private void enterSequence_main_region_StateZ_r1_StateE_default() {
		/* 'default' enter sequence for state StateE */
		stateVector[0] = State.MAIN_REGION_STATEZ_R1_STATEE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StateD */
	private void enterSequence_main_region_StateZ_r2_StateD_default() {
		/* 'default' enter sequence for state StateD */
		stateVector[1] = State.MAIN_REGION_STATEZ_R2_STATED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state StateF */
	private void enterSequence_main_region_StateZ_r2_StateF_default() {
		/* 'default' enter sequence for state StateF */
		stateVector[1] = State.MAIN_REGION_STATEZ_R2_STATEF;
		stateConfVectorPosition = 1;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAIN_REGION__FINAL_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state boolean */
	private void enterSequence_main_region_boolean_default() {
		/* 'default' enter sequence for state boolean */
		stateVector[0] = State.MAIN_REGION_BOOLEAN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state integer */
	private void enterSequence_main_region_integer_default() {
		/* 'default' enter sequence for state integer */
		stateVector[0] = State.MAIN_REGION_INTEGER;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state State0 */
	private void enterSequence_internal_State0_default() {
		/* 'default' enter sequence for state State0 */
		stateVector[2] = State.INTERNAL_STATE0;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region internal */
	private void enterSequence_internal_default() {
		/* 'default' enter sequence for region internal */
		react_internal__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		/* Default exit sequence for state StateA */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		/* Default exit sequence for state StateB */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StateZ */
	private void exitSequence_main_region_StateZ() {
		/* Default exit sequence for state StateZ */
		exitSequence_main_region_StateZ_r1();
		exitSequence_main_region_StateZ_r2();
	}
	
	/* Default exit sequence for state StateC */
	private void exitSequence_main_region_StateZ_r1_StateC() {
		/* Default exit sequence for state StateC */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StateE */
	private void exitSequence_main_region_StateZ_r1_StateE() {
		/* Default exit sequence for state StateE */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StateD */
	private void exitSequence_main_region_StateZ_r2_StateD() {
		/* Default exit sequence for state StateD */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state StateF */
	private void exitSequence_main_region_StateZ_r2_StateF() {
		/* Default exit sequence for state StateF */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state boolean */
	private void exitSequence_main_region_boolean() {
		/* Default exit sequence for state boolean */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state integer */
	private void exitSequence_main_region_integer() {
		/* Default exit sequence for state integer */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state State0 */
	private void exitSequence_internal_State0() {
		/* Default exit sequence for state State0 */
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		case MAIN_REGION_STATEZ_R1_STATEC:
			exitSequence_main_region_StateZ_r1_StateC();
			break;
		case MAIN_REGION_STATEZ_R1_STATEE:
			exitSequence_main_region_StateZ_r1_StateE();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		case MAIN_REGION_BOOLEAN:
			exitSequence_main_region_boolean();
			break;
		case MAIN_REGION_INTEGER:
			exitSequence_main_region_integer();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_STATEZ_R2_STATED:
			exitSequence_main_region_StateZ_r2_StateD();
			break;
		case MAIN_REGION_STATEZ_R2_STATEF:
			exitSequence_main_region_StateZ_r2_StateF();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_StateZ_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_STATEZ_R1_STATEC:
			exitSequence_main_region_StateZ_r1_StateC();
			break;
		case MAIN_REGION_STATEZ_R1_STATEE:
			exitSequence_main_region_StateZ_r1_StateE();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_StateZ_r2() {
		/* Default exit sequence for region r2 */
		switch (stateVector[1]) {
		case MAIN_REGION_STATEZ_R2_STATED:
			exitSequence_main_region_StateZ_r2_StateD();
			break;
		case MAIN_REGION_STATEZ_R2_STATEF:
			exitSequence_main_region_StateZ_r2_StateF();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region internal */
	private void exitSequence_internal() {
		/* Default exit sequence for region internal */
		switch (stateVector[2]) {
		case INTERNAL_STATE0:
			exitSequence_internal_State0();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_StateA_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_internal__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_internal_State0_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		/* The reactions of state null. */
		enterSequence_main_region_StateZ_r1_StateC_default();
		enterSequence_main_region_StateZ_r2_StateD_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync1() {
		/* The reactions of state null. */
		raiseOutEvent();
		enterSequence_main_region__final__default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before;
	}
	
	private long main_region_StateA_react(long transitioned_before) {
		/* The reactions of state StateA. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.internal.internalEvent) {
				exitSequence_main_region_StateA();
				enterSequence_main_region_StateB_default();
				transitioned_after = 0l;
			} else {
				if (((current.iface.b) && (current.iface.bValue==true))) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_boolean_default();
					transitioned_after = 0l;
				} else {
					if (((current.iface.i) && (current.iface.iValue<=10l))) {
						exitSequence_main_region_StateA();
						enterSequence_main_region_integer_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_StateB_react(long transitioned_before) {
		/* The reactions of state StateB. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.inEvent) {
				exitSequence_main_region_StateB();
				react_main_region__sync0();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_StateZ_react(long transitioned_before) {
		/* The reactions of state StateZ. */
		return transitioned_before;
	}
	
	private long main_region_StateZ_r1_StateC_react(long transitioned_before) {
		/* The reactions of state StateC. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((current.iface.typedInEvent) && (current.iface.typedInEventValue>3.14))) {
				exitSequence_main_region_StateZ_r1_StateC();
				enterSequence_main_region_StateZ_r1_StateE_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_StateZ_r1_StateE_react(long transitioned_before) {
		/* The reactions of state StateE. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.internal.internalEvent) {
				exitSequence_main_region_StateZ_r1_StateE();
				raiseTypedOutEvent(3l);
				enterSequence_main_region_StateZ_r1_StateE_default();
				transitioned_after = 0l;
			} else {
				if (isStateActive(State.MAIN_REGION_STATEZ_R2_STATEF)) {
					exitSequence_main_region_StateZ();
					react_main_region__sync1();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_StateZ_r2_StateD_react(long transitioned_before) {
		/* The reactions of state StateD. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((current.internal.local_typedOutEvent) && (current.internal.local_typedOutEventValue==3l))) {
				exitSequence_main_region_StateZ_r2_StateD();
				enterSequence_main_region_StateZ_r2_StateF_default();
				main_region_StateZ_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_StateZ_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_StateZ_r2_StateF_react(long transitioned_before) {
		/* The reactions of state StateF. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (isStateActive(State.MAIN_REGION_STATEZ_R1_STATEE)) {
				exitSequence_main_region_StateZ();
				react_main_region__sync1();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_StateZ_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return transitioned_before;
	}
	
	private long main_region_boolean_react(long transitioned_before) {
		/* The reactions of state boolean. */
		return transitioned_before;
	}
	
	private long main_region_integer_react(long transitioned_before) {
		/* The reactions of state integer. */
		return transitioned_before;
	}
	
	private long internal_State0_react(long transitioned_before) {
		/* The reactions of state State0. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (((current.iface.str) && ((current.iface.strValue== null?"OK" ==null :current.iface.strValue.equals("OK"))))) {
				exitSequence_internal_State0();
				raiseInternalEvent();
				enterSequence_internal_State0_default();
				react(0l);
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
