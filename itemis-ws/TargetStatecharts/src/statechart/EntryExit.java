/** Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class EntryExit implements ICycleBased {
	private static class EvBuf {
		private boolean a;
		private boolean b;
		private boolean c;
		private boolean next;
	}
	private static class EntryExitEvBuf {
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		MAIN_REGION_INIT,
		MAIN_REGION_MULTIPLE_ALTERNATIVES,
		MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A,
		MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B,
		MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C,
		MAIN_REGION__FINAL_,
		MAIN_REGION_E,
		MAIN_REGION_D,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private EntryExitEvBuf current = new EntryExitEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private boolean stateConfVectorChanged;
	
	protected boolean getStateConfVectorChanged() {
		return stateConfVectorChanged;
	}
	
	protected void setStateConfVectorChanged(boolean value) {
		this.stateConfVectorChanged = value;
	}
	public EntryExit() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		do { 
			stateConfVectorChanged = false;
			microStep();
		} while (getStateConfVectorChanged());
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart EntryExit */
		enterSequence_main_region_default();
		do { 
			stateConfVectorChanged = false;
			microStep();
		} while (getStateConfVectorChanged());
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart EntryExit */
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_);
	}
	private void swapInEvents() {
		current.iface.a = a;
		a = false;
		current.iface.b = b;
		b = false;
		current.iface.c = c;
		c = false;
		current.iface.next = next;
		next = false;
	}
	
	private void clearInEvents() {
		a = false;
		b = false;
		c = false;
		next = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_INIT:
			main_region_init_react(-1l);
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A:
			main_region_Multiple_Alternatives_r1_A_react(-1l);
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B:
			main_region_Multiple_Alternatives_r1_B_react(-1l);
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C:
			main_region_Multiple_Alternatives_r1_C_react(-1l);
			break;
		case MAIN_REGION__FINAL_:
			main_region__final__react(-1l);
			break;
		case MAIN_REGION_E:
			main_region_E_react(-1l);
			break;
		case MAIN_REGION_D:
			main_region_D_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INIT:
			return stateVector[0] == State.MAIN_REGION_INIT;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_MULTIPLE_ALTERNATIVES.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C.ordinal();
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A:
			return stateVector[0] == State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B:
			return stateVector[0] == State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C:
			return stateVector[0] == State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_E:
			return stateVector[0] == State.MAIN_REGION_E;
		case MAIN_REGION_D:
			return stateVector[0] == State.MAIN_REGION_D;
		default:
			return false;
		}
	}
	
	
	private boolean a;
	
	
	public void raiseA() {
		a = true;
	}
	
	private boolean b;
	
	
	public void raiseB() {
		b = true;
	}
	
	private boolean c;
	
	
	public void raiseC() {
		c = true;
	}
	
	private boolean next;
	
	
	public void raiseNext() {
		next = true;
	}
	
	private void effect_main_region_Multiple_Alternatives_tr0() {
		exitSequence_main_region_Multiple_Alternatives();
		enterSequence_main_region__final__default();
	}
	
	private void effect_main_region_Multiple_Alternatives_tr1() {
		exitSequence_main_region_Multiple_Alternatives();
		enterSequence_main_region_E_default();
		react(0l);
	}
	
	private void effect_main_region_Multiple_Alternatives_tr2() {
		exitSequence_main_region_Multiple_Alternatives();
		enterSequence_main_region_D_default();
		react(0l);
	}
	
	/* 'default' enter sequence for state init */
	private void enterSequence_main_region_init_default() {
		/* 'default' enter sequence for state init */
		stateVector[0] = State.MAIN_REGION_INIT;
		stateConfVectorChanged = true;
	}
	
	/* 'EntryA' enter sequence for state Multiple Alternatives */
	private void enterSequence_main_region_Multiple_Alternatives_EntryA() {
		/* 'EntryA' enter sequence for state Multiple Alternatives */
		enterSequence_main_region_Multiple_Alternatives_r1_EntryA();
	}
	
	/* 'EntryB' enter sequence for state Multiple Alternatives */
	private void enterSequence_main_region_Multiple_Alternatives_EntryB() {
		/* 'EntryB' enter sequence for state Multiple Alternatives */
		enterSequence_main_region_Multiple_Alternatives_r1_EntryB();
	}
	
	/* 'default' enter sequence for state Multiple Alternatives */
	private void enterSequence_main_region_Multiple_Alternatives_default() {
		/* 'default' enter sequence for state Multiple Alternatives */
		enterSequence_main_region_Multiple_Alternatives_r1_default();
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region_Multiple_Alternatives_r1_A_default() {
		/* 'default' enter sequence for state A */
		stateVector[0] = State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_main_region_Multiple_Alternatives_r1_B_default() {
		/* 'default' enter sequence for state B */
		stateVector[0] = State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_main_region_Multiple_Alternatives_r1_C_default() {
		/* 'default' enter sequence for state C */
		stateVector[0] = State.MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C;
		stateConfVectorChanged = true;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAIN_REGION__FINAL_;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state E */
	private void enterSequence_main_region_E_default() {
		/* 'default' enter sequence for state E */
		stateVector[0] = State.MAIN_REGION_E;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_main_region_D_default() {
		/* 'default' enter sequence for state D */
		stateVector[0] = State.MAIN_REGION_D;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'EntryA' enter sequence for region r1 */
	private void enterSequence_main_region_Multiple_Alternatives_r1_EntryA() {
		/* 'EntryA' enter sequence for region r1 */
		react_main_region_Multiple_Alternatives_r1_EntryA();
	}
	
	/* 'EntryB' enter sequence for region r1 */
	private void enterSequence_main_region_Multiple_Alternatives_r1_EntryB() {
		/* 'EntryB' enter sequence for region r1 */
		react_main_region_Multiple_Alternatives_r1_EntryB();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Multiple_Alternatives_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Multiple_Alternatives_r1__entry_Default();
	}
	
	/* Default exit sequence for state init */
	private void exitSequence_main_region_init() {
		/* Default exit sequence for state init */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Multiple Alternatives */
	private void exitSequence_main_region_Multiple_Alternatives() {
		/* Default exit sequence for state Multiple Alternatives */
		exitSequence_main_region_Multiple_Alternatives_r1();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region_Multiple_Alternatives_r1_A() {
		/* Default exit sequence for state A */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_main_region_Multiple_Alternatives_r1_B() {
		/* Default exit sequence for state B */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_main_region_Multiple_Alternatives_r1_C() {
		/* Default exit sequence for state C */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state E */
	private void exitSequence_main_region_E() {
		/* Default exit sequence for state E */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_main_region_D() {
		/* Default exit sequence for state D */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT:
			exitSequence_main_region_init();
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A:
			exitSequence_main_region_Multiple_Alternatives_r1_A();
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B:
			exitSequence_main_region_Multiple_Alternatives_r1_B();
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C:
			exitSequence_main_region_Multiple_Alternatives_r1_C();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		case MAIN_REGION_E:
			exitSequence_main_region_E();
			break;
		case MAIN_REGION_D:
			exitSequence_main_region_D();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Multiple_Alternatives_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_A:
			exitSequence_main_region_Multiple_Alternatives_r1_A();
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_B:
			exitSequence_main_region_Multiple_Alternatives_r1_B();
			break;
		case MAIN_REGION_MULTIPLE_ALTERNATIVES_R1_C:
			exitSequence_main_region_Multiple_Alternatives_r1_C();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_init_default();
	}
	
	/* Default react sequence for initial entry EntryA */
	private void react_main_region_Multiple_Alternatives_r1_EntryA() {
		/* Default react sequence for initial entry EntryA */
		enterSequence_main_region_Multiple_Alternatives_r1_A_default();
	}
	
	/* Default react sequence for initial entry EntryB */
	private void react_main_region_Multiple_Alternatives_r1_EntryB() {
		/* Default react sequence for initial entry EntryB */
		enterSequence_main_region_Multiple_Alternatives_r1_B_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Multiple_Alternatives_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Multiple_Alternatives_r1_C_default();
	}
	
	/* The reactions of exit ExitA. */
	private void react_main_region_Multiple_Alternatives_r1_ExitA() {
		/* The reactions of exit ExitA. */
		effect_main_region_Multiple_Alternatives_tr0();
	}
	
	/* The reactions of exit ExitB. */
	private void react_main_region_Multiple_Alternatives_r1_ExitB() {
		/* The reactions of exit ExitB. */
		effect_main_region_Multiple_Alternatives_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_Multiple_Alternatives_r1__exit_Default() {
		/* The reactions of exit default. */
		effect_main_region_Multiple_Alternatives_tr2();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before;
	}
	
	private long main_region_init_react(long transitioned_before) {
		/* The reactions of state init. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.a) {
				exitSequence_main_region_init();
				enterSequence_main_region_Multiple_Alternatives_EntryA();
				react(0l);
				transitioned_after = 0l;
			} else {
				if (current.iface.b) {
					exitSequence_main_region_init();
					enterSequence_main_region_Multiple_Alternatives_EntryB();
					react(0l);
					transitioned_after = 0l;
				} else {
					if (current.iface.c) {
						exitSequence_main_region_init();
						enterSequence_main_region_Multiple_Alternatives_default();
						react(0l);
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Multiple_Alternatives_react(long transitioned_before) {
		/* The reactions of state Multiple Alternatives. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Multiple_Alternatives_r1_A_react(long transitioned_before) {
		/* The reactions of state A. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.next) {
				exitSequence_main_region_Multiple_Alternatives_r1_A();
				react_main_region_Multiple_Alternatives_r1_ExitA();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Multiple_Alternatives_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Multiple_Alternatives_r1_B_react(long transitioned_before) {
		/* The reactions of state B. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.next) {
				exitSequence_main_region_Multiple_Alternatives_r1_B();
				react_main_region_Multiple_Alternatives_r1_ExitB();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Multiple_Alternatives_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Multiple_Alternatives_r1_C_react(long transitioned_before) {
		/* The reactions of state C. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.next) {
				exitSequence_main_region_Multiple_Alternatives_r1_C();
				react_main_region_Multiple_Alternatives_r1__exit_Default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Multiple_Alternatives_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return react(transitioned_before);
	}
	
	private long main_region_E_react(long transitioned_before) {
		/* The reactions of state E. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.next) {
				exitSequence_main_region_E();
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_D_react(long transitioned_before) {
		/* The reactions of state D. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.next) {
				exitSequence_main_region_D();
				enterSequence_main_region_E_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
