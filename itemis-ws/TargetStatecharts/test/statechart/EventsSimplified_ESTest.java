/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 07:12:28 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.EventsSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventsSimplified_ESTest extends EventsSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      eventsSimplified0.raiseI(10L);
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.raiseStr((String) null);
      eventsSimplified0.enter();
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.raiseStr("");
      eventsSimplified0.enter();
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.raiseI(4062L);
      eventsSimplified0.enter();
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      eventsSimplified0.raiseB(false);
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.exit();
      assertFalse(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      assertTrue(eventsSimplified0.isActive());
      
      eventsSimplified0.exit();
      assertFalse(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.INTERNAL_STATE0;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertTrue(eventsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertTrue(eventsSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertTrue(eventsSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.$NULLSTATE$;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.INTERNAL_STATE0;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ_R2_STATEF;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ_R2_STATED;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_INTEGER;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ_R1_STATEE;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEZ_R1_STATEC;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_BOOLEAN;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      EventsSimplified.State eventsSimplified_State0 = EventsSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = eventsSimplified0.isStateActive(eventsSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      boolean boolean0 = eventsSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      assertFalse(eventsSimplified0.isActive());
      
      eventsSimplified0.enter();
      boolean boolean0 = eventsSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      eventsSimplified0.raiseB(true);
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
      
      eventsSimplified0.exit();
      assertFalse(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.raiseTypedInEvent((-1.0));
      assertFalse(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.raiseInEvent();
      assertFalse(eventsSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      eventsSimplified0.raiseI(0L);
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
      
      eventsSimplified0.exit();
      assertFalse(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      boolean boolean0 = eventsSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.enter();
      eventsSimplified0.raiseB(true);
      eventsSimplified0.runCycle();
      eventsSimplified0.runCycle();
      assertTrue(eventsSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EventsSimplified eventsSimplified0 = new EventsSimplified();
      eventsSimplified0.runCycle();
      assertFalse(eventsSimplified0.isActive());
  }
}
