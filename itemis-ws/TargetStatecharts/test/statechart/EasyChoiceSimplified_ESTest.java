/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 07:11:11 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.EasyChoiceSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EasyChoiceSimplified_ESTest extends EasyChoiceSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.raiseStart();
      easyChoiceSimplified0.enter();
      easyChoiceSimplified0.runCycle();
      assertTrue(easyChoiceSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.enter();
      easyChoiceSimplified0.raisePrepare();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.raiseStart();
      easyChoiceSimplified0.runCycle();
      assertTrue(easyChoiceSimplified0.isActive());
      
      easyChoiceSimplified0.exit();
      assertFalse(easyChoiceSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.enter();
      assertTrue(easyChoiceSimplified0.isActive());
      
      easyChoiceSimplified0.exit();
      assertFalse(easyChoiceSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.enter();
      easyChoiceSimplified0.raisePrepare();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.raiseStart();
      easyChoiceSimplified0.runCycle();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_ONETIME;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertTrue(easyChoiceSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_START;
      easyChoiceSimplified0.enter();
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertTrue(easyChoiceSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.$NULLSTATE$;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_TWOTIMES;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_ONETIME;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_A_LOT_OF_TIMES;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      EasyChoiceSimplified.State easyChoiceSimplified_State0 = EasyChoiceSimplified.State.MAIN_REGION_START;
      boolean boolean0 = easyChoiceSimplified0.isStateActive(easyChoiceSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.runCycle();
      assertFalse(easyChoiceSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      boolean boolean0 = easyChoiceSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.enter();
      boolean boolean0 = easyChoiceSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      boolean boolean0 = easyChoiceSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.exit();
      assertFalse(easyChoiceSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.enter();
      easyChoiceSimplified0.raisePrepare();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.raiseStart();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.raiseEnd();
      easyChoiceSimplified0.runCycle();
      assertTrue(easyChoiceSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EasyChoiceSimplified easyChoiceSimplified0 = new EasyChoiceSimplified();
      easyChoiceSimplified0.raisePrepare();
      assertFalse(easyChoiceSimplified0.isActive());
      
      easyChoiceSimplified0.enter();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.raiseStart();
      easyChoiceSimplified0.runCycle();
      easyChoiceSimplified0.runCycle();
      assertTrue(easyChoiceSimplified0.isActive());
  }
}
