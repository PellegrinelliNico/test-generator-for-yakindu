/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:05:30 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TrafficLight_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLight_Unit_ESTest extends TrafficLight_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.raiseLocal_Timer_reset();
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.timer = null;
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      assertNull(trafficLight_Unit_Timer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      trafficLight_Unit_Timer0.setRed_period((-2281L));
      assertEquals((-2281L), trafficLight_Unit_Timer0.getRed_period());
      
      TrafficLight_Unit.Timer trafficLight_Unit_Timer1 = trafficLight_Unit0.timer();
      assertEquals(15L, trafficLight_Unit_Timer1.getGreen_period());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = new TrafficLight_Unit.Timer(trafficLight_Unit0);
      trafficLight_Unit0.timer = trafficLight_Unit_Timer0;
      trafficLight_Unit_Timer0.setGreen_period((-33L));
      assertEquals((-33L), trafficLight_Unit_Timer0.getGreen_period());
      
      TrafficLight_Unit.Timer trafficLight_Unit_Timer1 = trafficLight_Unit0.timer();
      assertEquals((-33L), trafficLight_Unit_Timer1.getGreen_period());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = new TrafficLight_Unit.Timer(trafficLight_Unit0);
      trafficLight_Unit0.timer = trafficLight_Unit_Timer0;
      TrafficLight_Unit.Timer trafficLight_Unit_Timer1 = trafficLight_Unit0.timer();
      assertEquals(0L, trafficLight_Unit_Timer1.getRed_period());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      trafficLight_Unit_Timer0.setCounter((-1824L));
      assertEquals((-1824L), trafficLight_Unit_Timer0.getCounter());
      
      TrafficLight_Unit.Timer trafficLight_Unit_Timer1 = trafficLight_Unit0.timer();
      assertEquals(15L, trafficLight_Unit_Timer1.getGreen_period());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.setStateConfVectorPosition(787L);
      long long0 = trafficLight_Unit0.getStateConfVectorPosition();
      assertEquals(787L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.setStateConfVectorPosition((-339L));
      long long0 = trafficLight_Unit0.getStateConfVectorPosition();
      assertEquals((-339L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.setIsExecuting(true);
      boolean boolean0 = trafficLight_Unit0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      boolean boolean0 = trafficLight_Unit0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Device trafficLight_Unit_Device0 = trafficLight_Unit0.device;
      assertFalse(trafficLight_Unit_Device0.getIsOn());
      
      trafficLight_Unit_Device0.setIsOn(true);
      TrafficLight_Unit.Device trafficLight_Unit_Device1 = trafficLight_Unit0.device();
      assertFalse(trafficLight_Unit_Device1.getCrossingButton_triggered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Device trafficLight_Unit_Device0 = new TrafficLight_Unit.Device();
      trafficLight_Unit0.device = trafficLight_Unit_Device0;
      trafficLight_Unit_Device0.setCrossingButton_triggered(true);
      assertTrue(trafficLight_Unit_Device0.getCrossingButton_triggered());
      
      TrafficLight_Unit.Device trafficLight_Unit_Device1 = trafficLight_Unit0.device();
      assertTrue(trafficLight_Unit_Device1.getCrossingButton_triggered());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light();
      trafficLight_Unit_Light0.setPedestrian("com.yakindu.core.rx.Observable");
      assertEquals("", trafficLight_Unit_Light0.getColor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light();
      trafficLight_Unit_Light0.setColor("");
      assertEquals("", trafficLight_Unit_Light0.getPedestrian());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State.$NULLSTATE$;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.State trafficLight_Unit_State0 = TrafficLight_Unit.State._TRAFFICLIGHT_UNIT__OFF;
      boolean boolean0 = trafficLight_Unit0.isStateActive(trafficLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      boolean boolean0 = trafficLight_Unit0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      boolean boolean0 = trafficLight_Unit0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.setIsExecuting(true);
      trafficLight_Unit0.exit();
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      // Undeclared exception!
      try { 
        trafficLight_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light;
      Observable<Void> observable0 = trafficLight_Unit_Light0.getRed();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light;
      trafficLight_Unit_Light0.raiseGreen();
      assertEquals("", trafficLight_Unit_Light0.getColor());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light;
      Observable<Void> observable0 = trafficLight_Unit_Light0.getGreen();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = new TrafficLight_Unit.Light(trafficLight_Unit0);
      Observable<Void> observable0 = trafficLight_Unit_Light0.getYellow();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light();
      trafficLight_Unit_Light0.raiseYellow();
      assertEquals("", trafficLight_Unit_Light0.getColor());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light;
      trafficLight_Unit_Light0.raiseRed();
      assertEquals("", trafficLight_Unit_Light0.getPedestrian());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light;
      String string0 = trafficLight_Unit_Light0.getPedestrian();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Device trafficLight_Unit_Device0 = trafficLight_Unit0.device;
      boolean boolean0 = trafficLight_Unit_Device0.getIsOn();
      assertFalse(boolean0);
      assertFalse(trafficLight_Unit_Device0.getCrossingButton_triggered());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TrafficLight_Unit.Device trafficLight_Unit_Device0 = new TrafficLight_Unit.Device();
      boolean boolean0 = trafficLight_Unit_Device0.getCrossingButton_triggered();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = new TrafficLight_Unit.Timer(trafficLight_Unit0);
      long long0 = trafficLight_Unit_Timer0.getRed_period();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      long long0 = trafficLight_Unit_Timer0.getGreen_period();
      assertEquals(10L, trafficLight_Unit_Timer0.getCounter());
      assertEquals(5L, trafficLight_Unit_Timer0.getRed_period());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer;
      trafficLight_Unit_Timer0.getReset();
      assertEquals(15L, trafficLight_Unit_Timer0.getGreen_period());
      assertEquals(5L, trafficLight_Unit_Timer0.getRed_period());
      assertEquals(10L, trafficLight_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      long long0 = trafficLight_Unit_Timer0.getCounter();
      assertEquals(10L, long0);
      assertEquals(15L, trafficLight_Unit_Timer0.getGreen_period());
      assertEquals(5L, trafficLight_Unit_Timer0.getRed_period());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      // Undeclared exception!
      try { 
        trafficLight_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      // Undeclared exception!
      try { 
        trafficLight_Unit0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.raiseLocal_Light_yellow();
      boolean boolean0 = trafficLight_Unit0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Light trafficLight_Unit_Light0 = trafficLight_Unit0.light();
      String string0 = trafficLight_Unit_Light0.getColor();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.raiseLocal_Light_red();
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      TrafficLight_Unit.Timer trafficLight_Unit_Timer0 = trafficLight_Unit0.timer();
      trafficLight_Unit_Timer0.raiseReset();
      assertEquals(15L, trafficLight_Unit_Timer0.getGreen_period());
      assertEquals(5L, trafficLight_Unit_Timer0.getRed_period());
      assertEquals(10L, trafficLight_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      long long0 = trafficLight_Unit0.getStateConfVectorPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      boolean boolean0 = trafficLight_Unit0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      // Undeclared exception!
      try { 
        trafficLight_Unit0.raiseTimeEvent(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      ITimerService iTimerService0 = trafficLight_Unit0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.exit();
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.setTimerService((ITimerService) null);
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      trafficLight_Unit0.raiseLocal_Light_green();
      assertFalse(trafficLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      // Undeclared exception!
      try { 
        trafficLight_Unit0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_Unit", e);
      }
  }
}
