/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:08:43 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._TwoWayTrafficControl2Simplified;
import statechart.__ReleaseProcess;
import statechart.___TrafficLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _TwoWayTrafficControl2Simplified_ESTest extends _TwoWayTrafficControl2Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      // Undeclared exception!
      try { 
        _TwoWayTrafficControl2Simplified0.isStateActive((_TwoWayTrafficControl2Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._TwoWayTrafficControl2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      _TwoWayTrafficControl2Simplified0.setProcess(__ReleaseProcess0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.enter();
      _TwoWayTrafficControl2Simplified0.runCycle();
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified0.exit();
      assertFalse(_TwoWayTrafficControl2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.enter();
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
      
      _TwoWayTrafficControl2Simplified0.exit();
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OPERATE;
      _TwoWayTrafficControl2Simplified0.enter();
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.enter();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OFF;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.$NULLSTATE$;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OPERATE_R_PROCESS_B;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OPERATE_R_PROCESS_A;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_STANDBY;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OPERATE;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified.State _TwoWayTrafficControl2Simplified_State0 = _TwoWayTrafficControl2Simplified.State.MAIN_OFF;
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isStateActive(_TwoWayTrafficControl2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.raiseOn();
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.enter();
      _TwoWayTrafficControl2Simplified0.runCycle();
      _TwoWayTrafficControl2Simplified0.runCycle();
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified0.runCycle();
      assertFalse(_TwoWayTrafficControl2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
      
      _TwoWayTrafficControl2Simplified0.enter();
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified0.raiseStandby();
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified0.raiseOperate();
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      _TwoWayTrafficControl2Simplified0.raiseOff();
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      _TwoWayTrafficControl2Simplified0.raiseOn();
      _TwoWayTrafficControl2Simplified0.setTrafficLightA(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.setTrafficLightB(___TrafficLight0);
      _TwoWayTrafficControl2Simplified0.enter();
      _TwoWayTrafficControl2Simplified0.runCycle();
      assertTrue(_TwoWayTrafficControl2Simplified0.isActive());
      
      _TwoWayTrafficControl2Simplified0.exit();
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      boolean boolean0 = _TwoWayTrafficControl2Simplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_TwoWayTrafficControl2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _TwoWayTrafficControl2Simplified _TwoWayTrafficControl2Simplified0 = new _TwoWayTrafficControl2Simplified();
      // Undeclared exception!
      try { 
        _TwoWayTrafficControl2Simplified0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._TwoWayTrafficControl2Simplified", e);
      }
  }
}
