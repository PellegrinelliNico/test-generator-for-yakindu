/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 20:07:40 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.MusicPlayer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MusicPlayer_ESTest extends MusicPlayer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Timer musicPlayer_Timer0 = musicPlayer0.timer;
      musicPlayer_Timer0.setSec(1L);
      assertEquals(1L, musicPlayer_Timer0.getSec());
      
      MusicPlayer.Timer musicPlayer_Timer1 = musicPlayer0.timer();
      assertEquals(1L, musicPlayer_Timer1.getSec());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      boolean boolean0 = musicPlayer0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock();
      musicPlayer_Clock0.setMin(298L);
      assertEquals(298L, musicPlayer_Clock0.getMin());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = musicPlayer0.power;
      musicPlayer_Power0.setConnectPower(false);
      assertFalse(musicPlayer_Power0.getConnectPower());
      assertEquals(100L, musicPlayer_Power0.getBattery());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = musicPlayer0.internet();
      musicPlayer_Internet0.setConnectedWifi(true);
      assertTrue(musicPlayer_Internet0.getConnectedWifi());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network();
      musicPlayer_Network0.setSongTime((-1L));
      assertEquals((-1L), musicPlayer_Network0.getSongTime());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      assertEquals(60L, musicPlayer_Clock0.getReduceTime());
      
      musicPlayer_Clock0.setReduceTime(0L);
      assertTrue(musicPlayer_Clock0.getStop());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.USB musicPlayer_USB0 = musicPlayer0.uSB();
      musicPlayer_USB0.setSongTime((-917L));
      assertEquals((-917L), musicPlayer_USB0.getSongTime());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.uSB.setNumOfSongs(0L);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      assertEquals(5L, musicPlayer_ModePlay0.getSkipTime());
      
      musicPlayer_ModePlay0.setSkipTime(0L);
      assertEquals(70L, musicPlayer_ModePlay0.getVolume());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Modes musicPlayer_Modes0 = musicPlayer0.modes;
      musicPlayer_Modes0.setMode(834L);
      assertEquals(834L, musicPlayer_Modes0.getMode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Timer musicPlayer_Timer0 = musicPlayer0.timer();
      musicPlayer_Timer0.setSec(1763L);
      assertEquals(1763L, musicPlayer_Timer0.getSec());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      musicPlayer_Clock0.setMinGen(70L);
      assertEquals(70L, musicPlayer_Clock0.getMinGen());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network();
      musicPlayer_Network0.setCurSong(710L);
      assertEquals(710L, musicPlayer_Network0.getCurSong());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.USB musicPlayer_USB0 = musicPlayer0.uSB;
      musicPlayer_USB0.setCurSong((-1705L));
      assertEquals((-1705L), musicPlayer_USB0.getCurSong());
      
      MusicPlayer.USB musicPlayer_USB1 = musicPlayer0.uSB();
      assertEquals(10L, musicPlayer_USB1.getNumOfSongs());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MusicPlayer.Timer musicPlayer_Timer0 = new MusicPlayer.Timer();
      assertEquals(0L, musicPlayer_Timer0.getSec());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network();
      musicPlayer_Network0.setNumOfSongs(1L);
      assertEquals(1L, musicPlayer_Network0.getNumOfSongs());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      musicPlayer_ModePlay0.setVolume((-1559L));
      assertEquals((-1559L), musicPlayer_ModePlay0.getVolume());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      musicPlayer_Clock0.setStop(false);
      assertFalse(musicPlayer_Clock0.getStop());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = musicPlayer0.internet();
      musicPlayer_Internet0.setLoggedIn(true);
      assertTrue(musicPlayer_Internet0.getLoggedIn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = musicPlayer0.radio();
      musicPlayer_Radio0.setAM(false);
      assertEquals(0.0, musicPlayer_Radio0.getStation(), 0.01);
      assertFalse(musicPlayer_Radio0.getAM());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Modes musicPlayer_Modes0 = new MusicPlayer.Modes(musicPlayer0);
      assertEquals(0L, musicPlayer_Modes0.getMode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      musicPlayer_Clock0.setHr(0L);
      assertTrue(musicPlayer_Clock0.getStop());
      assertEquals(60L, musicPlayer_Clock0.getReduceTime());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      musicPlayer_Clock0.setSetTime((-2796L));
      assertEquals((-2796L), musicPlayer_Clock0.getSetTime());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      musicPlayer_Clock0.setStopwatchtime(733L);
      assertEquals(733L, musicPlayer_Clock0.getStopwatchtime());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      musicPlayer_ModePlay0.setA(false);
      assertFalse(musicPlayer_ModePlay0.getA());
      assertEquals(5L, musicPlayer_ModePlay0.getSkipTime());
      assertEquals(70L, musicPlayer_ModePlay0.getVolume());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock();
      musicPlayer_Clock0.setHrGen((-720L));
      assertEquals((-720L), musicPlayer_Clock0.getHrGen());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_AUX;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_CHANGESTATE;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_USB_R1_STOP;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.State musicPlayer_State0 = MusicPlayer.State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY;
      boolean boolean0 = musicPlayer0.isStateActive(musicPlayer_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      boolean boolean0 = musicPlayer0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      boolean boolean0 = musicPlayer0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      // Undeclared exception!
      try { 
        musicPlayer0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      long long0 = musicPlayer0.getStateConfVectorPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      boolean boolean0 = musicPlayer0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.exit();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      // Undeclared exception!
      try { 
        musicPlayer0.raiseMyEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.setStateConfVectorPosition(1763L);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = musicPlayer0.power();
      assertEquals(100L, musicPlayer_Power0.getBattery());
      
      musicPlayer_Power0.setBattery(0L);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.setIsExecuting(false);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.getTimerService();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      musicPlayer0.setTimerService((ITimerService) null);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      // Undeclared exception!
      try { 
        musicPlayer0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      // Undeclared exception!
      try { 
        musicPlayer0.raiseTimeEvent((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = musicPlayer0.radio();
      musicPlayer_Radio0.setStation(0.0);
      assertEquals(0.0, musicPlayer_Radio0.getStation(), 0.01);
      assertFalse(musicPlayer0.isActive());
      assertFalse(musicPlayer_Radio0.getAM());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Modes musicPlayer_Modes0 = musicPlayer0.modes;
      long long0 = musicPlayer_Modes0.getMode();
      assertFalse(musicPlayer0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Modes musicPlayer_Modes0 = musicPlayer0.modes();
      // Undeclared exception!
      try { 
        musicPlayer_Modes0.raiseChangeMode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MusicPlayer.USB musicPlayer_USB0 = new MusicPlayer.USB();
      long long0 = musicPlayer_USB0.getSongTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.USB musicPlayer_USB0 = musicPlayer0.uSB();
      long long0 = musicPlayer_USB0.getCurSong();
      assertEquals(10L, musicPlayer_USB0.getNumOfSongs());
      assertFalse(musicPlayer0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.USB musicPlayer_USB0 = musicPlayer0.uSB;
      long long0 = musicPlayer_USB0.getNumOfSongs();
      assertEquals(1L, musicPlayer_USB0.getCurSong());
      assertEquals(10L, long0);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Timer musicPlayer_Timer0 = musicPlayer0.timer();
      musicPlayer_Timer0.getSec();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = new MusicPlayer.Internet(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Internet0.raiseLogout();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = new MusicPlayer.Internet(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Internet0.raiseConnectWifi();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = musicPlayer0.internet;
      boolean boolean0 = musicPlayer_Internet0.getLoggedIn();
      assertFalse(boolean0);
      assertFalse(musicPlayer_Internet0.getConnectedWifi());
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = musicPlayer0.internet();
      // Undeclared exception!
      try { 
        musicPlayer_Internet0.raiseDisconnectWifi();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = musicPlayer0.internet();
      boolean boolean0 = musicPlayer_Internet0.getConnectedWifi();
      assertFalse(musicPlayer_Internet0.getLoggedIn());
      assertFalse(musicPlayer0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Internet musicPlayer_Internet0 = new MusicPlayer.Internet(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Internet0.raiseLogin();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseSkipForward();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseBack();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = new MusicPlayer.ModePlay(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseVolumeDown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay;
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseSkipBackwards();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseStop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = new MusicPlayer.ModePlay(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raiseVolumeUp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      long long0 = musicPlayer_ModePlay0.getVolume();
      assertEquals(70L, long0);
      assertFalse(musicPlayer_ModePlay0.getA());
      assertEquals(5L, musicPlayer_ModePlay0.getSkipTime());
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay();
      boolean boolean0 = musicPlayer_ModePlay0.getA();
      assertEquals(5L, musicPlayer_ModePlay0.getSkipTime());
      assertFalse(musicPlayer0.isActive());
      assertFalse(boolean0);
      assertEquals(70L, musicPlayer_ModePlay0.getVolume());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = new MusicPlayer.ModePlay(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raisePause();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay;
      long long0 = musicPlayer_ModePlay0.getSkipTime();
      assertEquals(70L, musicPlayer_ModePlay0.getVolume());
      assertFalse(musicPlayer_ModePlay0.getA());
      assertEquals(5L, long0);
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.ModePlay musicPlayer_ModePlay0 = musicPlayer0.modePlay;
      // Undeclared exception!
      try { 
        musicPlayer_ModePlay0.raisePlay();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = new MusicPlayer.Network(musicPlayer0);
      musicPlayer_Network0.getNumOfSongs();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network;
      musicPlayer_Network0.getSongTime();
      assertEquals(10L, musicPlayer_Network0.getNumOfSongs());
      assertFalse(musicPlayer0.isActive());
      assertEquals(1L, musicPlayer_Network0.getCurSong());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network();
      // Undeclared exception!
      try { 
        musicPlayer_Network0.raiseConnectionMade();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Network musicPlayer_Network0 = musicPlayer0.network;
      long long0 = musicPlayer_Network0.getCurSong();
      assertFalse(musicPlayer0.isActive());
      assertEquals(1L, long0);
      assertEquals(10L, musicPlayer_Network0.getNumOfSongs());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      musicPlayer_Clock0.getMin();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      musicPlayer_Clock0.getMinGen();
      assertTrue(musicPlayer_Clock0.getStop());
      assertFalse(musicPlayer0.isActive());
      assertEquals(60L, musicPlayer_Clock0.getReduceTime());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseChooseTM();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      long long0 = musicPlayer_Clock0.getReduceTime();
      assertFalse(musicPlayer0.isActive());
      assertEquals(60L, long0);
      assertTrue(musicPlayer_Clock0.getStop());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock();
      musicPlayer_Clock0.getHrGen();
      assertTrue(musicPlayer_Clock0.getStop());
      assertFalse(musicPlayer0.isActive());
      assertEquals(60L, musicPlayer_Clock0.getReduceTime());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      long long0 = musicPlayer_Clock0.getSetTime();
      assertFalse(musicPlayer0.isActive());
      assertEquals(60L, musicPlayer_Clock0.getReduceTime());
      assertEquals(60L, long0);
      assertTrue(musicPlayer_Clock0.getStop());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseClockSet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      musicPlayer_Clock0.getHr();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock;
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseChooseSW();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseResetTimer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = musicPlayer0.clock();
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseStopAlarmClock();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      musicPlayer_Clock0.getStopwatchtime();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Clock musicPlayer_Clock0 = new MusicPlayer.Clock(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Clock0.raiseClockDSP();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = new MusicPlayer.Radio(musicPlayer0);
      double double0 = musicPlayer_Radio0.getStation();
      assertFalse(musicPlayer0.isActive());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = new MusicPlayer.Radio(musicPlayer0);
      musicPlayer_Radio0.getAM();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = musicPlayer0.radio;
      // Undeclared exception!
      try { 
        musicPlayer_Radio0.raiseRaiseFreq();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Radio musicPlayer_Radio0 = new MusicPlayer.Radio(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Radio0.raiseLowerFreq();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = new MusicPlayer.Power(musicPlayer0);
      musicPlayer_Power0.getConnectPower();
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = musicPlayer0.power;
      long long0 = musicPlayer_Power0.getBattery();
      assertEquals(100L, long0);
      assertFalse(musicPlayer_Power0.getConnectPower());
      assertFalse(musicPlayer0.isActive());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = new MusicPlayer.Power(musicPlayer0);
      // Undeclared exception!
      try { 
        musicPlayer_Power0.raisePowerOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MusicPlayer musicPlayer0 = new MusicPlayer();
      MusicPlayer.Power musicPlayer_Power0 = musicPlayer0.power;
      // Undeclared exception!
      try { 
        musicPlayer_Power0.raisePowerOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayer", e);
      }
  }
}
