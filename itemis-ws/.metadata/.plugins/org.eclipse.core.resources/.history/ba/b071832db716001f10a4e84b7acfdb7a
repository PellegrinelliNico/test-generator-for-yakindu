/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:11:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._01_LightSwitchSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _01_LightSwitchSimplified_ESTest extends _01_LightSwitchSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      // Undeclared exception!
      try { 
        _01_LightSwitchSimplified0.isStateActive((_01_LightSwitchSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._01_LightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified0.raiseSwitch();
      _01_LightSwitchSimplified0.triggerWithoutEvent();
      assertTrue(_01_LightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified0.triggerWithoutEvent();
      assertTrue(_01_LightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.exit();
      assertFalse(_01_LightSwitchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified0.raiseSwitch();
      _01_LightSwitchSimplified.State _01_LightSwitchSimplified_State0 = _01_LightSwitchSimplified.State.MAIN_ON;
      boolean boolean0 = _01_LightSwitchSimplified0.isStateActive(_01_LightSwitchSimplified_State0);
      assertTrue(_01_LightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified.State _01_LightSwitchSimplified_State0 = _01_LightSwitchSimplified.State.MAIN_OFF;
      boolean boolean0 = _01_LightSwitchSimplified0.isStateActive(_01_LightSwitchSimplified_State0);
      assertTrue(_01_LightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified.State _01_LightSwitchSimplified_State0 = _01_LightSwitchSimplified.State.$NULLSTATE$;
      boolean boolean0 = _01_LightSwitchSimplified0.isStateActive(_01_LightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified.State _01_LightSwitchSimplified_State0 = _01_LightSwitchSimplified.State.MAIN_ON;
      boolean boolean0 = _01_LightSwitchSimplified0.isStateActive(_01_LightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified.State _01_LightSwitchSimplified_State0 = _01_LightSwitchSimplified.State.MAIN_OFF;
      boolean boolean0 = _01_LightSwitchSimplified0.isStateActive(_01_LightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified0.raiseSwitch();
      _01_LightSwitchSimplified0.raiseSwitch();
      assertTrue(_01_LightSwitchSimplified0.isActive());
      
      _01_LightSwitchSimplified0.exit();
      assertFalse(_01_LightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      boolean boolean0 = _01_LightSwitchSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      boolean boolean0 = _01_LightSwitchSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.triggerWithoutEvent();
      assertFalse(_01_LightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      boolean boolean0 = _01_LightSwitchSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_01_LightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _01_LightSwitchSimplified _01_LightSwitchSimplified0 = new _01_LightSwitchSimplified();
      _01_LightSwitchSimplified0.enter();
      _01_LightSwitchSimplified0.raiseSwitch();
      assertTrue(_01_LightSwitchSimplified0.isActive());
      
      _01_LightSwitchSimplified0.exit();
      assertFalse(_01_LightSwitchSimplified0.isActive());
  }
}
