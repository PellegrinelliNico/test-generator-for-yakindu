/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 20:33:29 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Statechart1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart1_ESTest extends Statechart1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      assertFalse(statechart1_0.getYellow_light());
      
      statechart1_0.setYellow_light(true);
      boolean boolean0 = statechart1_0.getYellow_light();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      assertFalse(statechart1_0.getWarning_light());
      
      statechart1_0.setWarning_light(true);
      boolean boolean0 = statechart1_0.getWarning_light();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setStateConfVectorPosition(10000L);
      long long0 = statechart1_0.getStateConfVectorPosition();
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertEquals(10000L, long0);
      assertFalse(statechart1_0.getDoor());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setSpeed((-1379L));
      long long0 = statechart1_0.getSpeed();
      assertEquals((-1379L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getIsExecuting();
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertFalse(boolean0);
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.isStateActive((Statechart1.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setFlashing_light(false);
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setSpeed(270L);
      long long0 = statechart1_0.getSpeed();
      assertEquals(270L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setDoor(false);
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      assertTrue(statechart1_0.getIn_station());
      
      statechart1_0.setIn_station(false);
      boolean boolean0 = statechart1_0.getIn_station();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.$NULLSTATE$;
      statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_MOVING;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON;
      statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF;
      statechart1_0.isStateActive(statechart1_State0);
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_EMERGENCY;
      statechart1_0.isStateActive(statechart1_State0);
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getFlashing_light());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON;
      statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertFalse(boolean0);
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertTrue(statechart1_0.getIn_station());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_DOOR_OPEN;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      Statechart1.State statechart1_State0 = Statechart1.State.MAIN_REGION_STOP;
      boolean boolean0 = statechart1_0.isStateActive(statechart1_State0);
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.nextEvent();
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.isActive();
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(boolean0);
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseLeave_station();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setTimerService((ITimerService) null);
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setStateConfVectorPosition((-1L));
      long long0 = statechart1_0.getStateConfVectorPosition();
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals((-1L), long0);
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.getStateConfVectorPosition();
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getDoor());
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getDoor();
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(boolean0);
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseSpeed_down();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      assertFalse(statechart1_0.isActive());
      
      statechart1_0.exit();
      assertFalse(statechart1_0.getFlashing_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getDoor());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseEmergency_button();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getFlashing_light();
      assertFalse(statechart1_0.isActive());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(boolean0);
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      long long0 = statechart1_0.getSpeed();
      assertFalse(statechart1_0.getYellow_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getWarning_light());
      assertEquals(0L, long0);
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.isActive());
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseYellow_light_on();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseRed_light_on();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.isFinal();
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(boolean0);
      assertFalse(statechart1_0.isActive());
      assertFalse(statechart1_0.getWarning_light());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getIn_station();
      assertFalse(statechart1_0.isActive());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getDoor());
      assertTrue(boolean0);
      assertFalse(statechart1_0.getYellow_light());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseEnter_station();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.setIsExecuting(true);
      statechart1_0.exit();
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.isActive());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertTrue(statechart1_0.getIn_station());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseSpeed_up();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseDoor_open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseRestart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      // Undeclared exception!
      try { 
        statechart1_0.raiseTimeEvent(528);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart1", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      statechart1_0.getTimerService();
      assertFalse(statechart1_0.isActive());
      assertFalse(statechart1_0.getWarning_light());
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getYellow_light());
      assertEquals(0L, statechart1_0.getSpeed());
      assertTrue(statechart1_0.getIn_station());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getWarning_light();
      assertEquals(0L, statechart1_0.getSpeed());
      assertFalse(statechart1_0.getFlashing_light());
      assertTrue(statechart1_0.getIn_station());
      assertFalse(statechart1_0.getYellow_light());
      assertFalse(statechart1_0.isActive());
      assertFalse(boolean0);
      assertFalse(statechart1_0.getDoor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Statechart1 statechart1_0 = new Statechart1();
      boolean boolean0 = statechart1_0.getYellow_light();
      assertFalse(statechart1_0.isActive());
      assertFalse(boolean0);
      assertFalse(statechart1_0.getDoor());
      assertFalse(statechart1_0.getFlashing_light());
      assertFalse(statechart1_0.getWarning_light());
      assertTrue(statechart1_0.getIn_station());
      assertEquals(0L, statechart1_0.getSpeed());
  }
}
