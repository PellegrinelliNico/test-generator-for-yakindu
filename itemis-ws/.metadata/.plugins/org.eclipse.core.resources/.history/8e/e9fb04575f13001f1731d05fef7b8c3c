/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 19:13:52 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._Trolley;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _Trolley_ESTest extends _Trolley_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setWasDepartureState(false);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseLocal_closeDoors();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      assertEquals(1L, _Trolley0.getStopsAt());
      
      _Trolley0.setStopsAt(0L);
      _Trolley0.getStopsAt();
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setStopsAt((-432L));
      long long0 = _Trolley0.getStopsAt();
      assertEquals((-432L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      
      _Trolley0.setRemainingCapacity((-1L));
      long long0 = _Trolley0.getRemainingCapacity();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getIsExecuting();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setIsEmergencyActive(true);
      boolean boolean0 = _Trolley0.getIsEmergencyActive();
      assertTrue(boolean0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setIsDoorObstructed(true);
      boolean boolean0 = _Trolley0.getIsDoorObstructed();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setIsDoorAvailable(true);
      boolean boolean0 = _Trolley0.getIsDoorAvailable();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertTrue(boolean0);
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setCurrentStation(1121L);
      long long0 = _Trolley0.getCurrentStation();
      assertEquals(1121L, long0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.isStateActive((_Trolley.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      assertEquals(0L, _Trolley0.getNumPassengers());
      
      _Trolley0.setNumPassengers(1L);
      long long0 = _Trolley0.getNumPassengers();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.getRequestStopValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event RequestStop is not raised!
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.getApproachingStationValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event ApproachingStation is not raised!
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.$NULLSTATE$;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN;
      boolean boolean0 = _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY;
      boolean boolean0 = _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED;
      boolean boolean0 = _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE;
      boolean boolean0 = _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE;
      _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley.State _Trolley_State0 = _Trolley.State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED;
      boolean boolean0 = _Trolley0.isStateActive(_Trolley_State0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.nextEvent();
      assertFalse(boolean0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.isActive();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseAtTargetSpeed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setTimerService((ITimerService) null);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setIsExecuting(false);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      long long0 = _Trolley0.getStopsAt();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.getWasDepartureState();
      assertFalse(boolean0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getCurrentStation();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      long long0 = _Trolley0.getRemainingCapacity();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, long0);
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseStopDoorsSignal();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getTimerService();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getStateConfVectorPosition();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.setStateConfVectorPosition((-1724L));
      long long0 = _Trolley0.getStateConfVectorPosition();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals((-1724L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseStopEmergency();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseSetTargetSpeed(0.0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseStartDoorsSignal();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseCloseDoorsIn();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseTimeEvent((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseOpenDoorsIn();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      long long0 = _Trolley0.getNumPassengers();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseOpenDoors();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.isFinal();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getCloseDoors();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseStopAdded();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getRefreshUI();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getOpenDoors();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseRequestStop(6L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getStartDoorsSignal();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseStartEmergency();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.getIsDoorObstructed();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getSetTargetSpeed();
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseUnboard();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseBoard();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      assertFalse(_Trolley0.isActive());
      
      _Trolley0.exit();
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.getIsDoorAvailable();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(boolean0);
      assertFalse(_Trolley0.isActive());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseRefreshUI();
      assertFalse(_Trolley0.isActive());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      // Undeclared exception!
      try { 
        _Trolley0.raiseApproachingStation(795L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Trolley", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseCloseDoors();
      assertFalse(_Trolley0.isActive());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(1L, _Trolley0.getStopsAt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseDoorFree();
      assertFalse(_Trolley0.isActive());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.getStopDoorsSignal();
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertFalse(_Trolley0.isActive());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      boolean boolean0 = _Trolley0.getIsEmergencyActive();
      assertFalse(_Trolley0.isActive());
      assertEquals(1L, _Trolley0.getStopsAt());
      assertFalse(boolean0);
      assertEquals(6L, _Trolley0.getRemainingCapacity());
      assertEquals(0L, _Trolley0.getNumPassengers());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      _Trolley _Trolley0 = new _Trolley();
      _Trolley0.raiseDoorObstructed();
      boolean boolean0 = _Trolley0.nextEvent();
      assertFalse(_Trolley0.isActive());
      assertTrue(boolean0);
      assertEquals(1L, _Trolley0.getStopsAt());
      assertEquals(0L, _Trolley0.getNumPassengers());
      assertEquals(6L, _Trolley0.getRemainingCapacity());
  }
}
