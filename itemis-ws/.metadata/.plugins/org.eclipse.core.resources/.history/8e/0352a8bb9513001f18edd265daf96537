/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:37:21 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrafficLight_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLight_UnitSimplified_ESTest extends TrafficLight_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.triggerWithoutEvent();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.raiseTimeEvent(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.isStateActive((TrafficLight_UnitSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseTimeEvent(0);
      assertTrue(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.Timer trafficLight_UnitSimplified_Timer0 = new TrafficLight_UnitSimplified.Timer(trafficLight_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.Light trafficLight_UnitSimplified_Light0 = new TrafficLight_UnitSimplified.Light(trafficLight_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLight_UnitSimplified.Device trafficLight_UnitSimplified_Device0 = new TrafficLight_UnitSimplified.Device();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      trafficLight_UnitSimplified0.raiseTimeEvent(0);
      assertFalse(trafficLight_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOff();
      assertFalse(trafficLight_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      trafficLight_UnitSimplified0.exit();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      assertTrue(trafficLight_UnitSimplified0.isActive());
      
      trafficLight_UnitSimplified0.exit();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertTrue(trafficLight_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertTrue(trafficLight_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State.$NULLSTATE$;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      TrafficLight_UnitSimplified.State trafficLight_UnitSimplified_State0 = TrafficLight_UnitSimplified.State._TRAFFICLIGHT_UNIT__OFF;
      boolean boolean0 = trafficLight_UnitSimplified0.isStateActive(trafficLight_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      boolean boolean0 = trafficLight_UnitSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      boolean boolean0 = trafficLight_UnitSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      trafficLight_UnitSimplified0.exit();
      assertFalse(trafficLight_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      trafficLight_UnitSimplified0.light();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      boolean boolean0 = trafficLight_UnitSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      trafficLight_UnitSimplified0.device();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      trafficLight_UnitSimplified0.timer();
      assertFalse(trafficLight_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      // Undeclared exception!
      try { 
        trafficLight_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLight_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TrafficLight_UnitSimplified trafficLight_UnitSimplified0 = new TrafficLight_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLight_UnitSimplified0.setTimerService(iTimerService0);
      trafficLight_UnitSimplified0.enter();
      trafficLight_UnitSimplified0.raiseOn();
      trafficLight_UnitSimplified0.raiseOff();
      assertFalse(trafficLight_UnitSimplified0.isFinal());
  }
}
