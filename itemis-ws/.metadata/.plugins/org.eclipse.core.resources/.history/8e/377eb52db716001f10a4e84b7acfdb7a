/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:14:48 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.ZowiSCT;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZowiSCT_ESTest extends ZowiSCT_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.zowi = null;
      ZowiSCT.Zowi zowiSCT_Zowi0 = zowiSCT0.zowi();
      assertNull(zowiSCT_Zowi0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.setRoundCounter(12L);
      long long0 = zowiSCT0.getRoundCounter();
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.setRoundCounter((-695L));
      long long0 = zowiSCT0.getRoundCounter();
      assertEquals((-695L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.setIsExecuting(true);
      boolean boolean0 = zowiSCT0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      boolean boolean0 = zowiSCT0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      // Undeclared exception!
      try { 
        zowiSCT0.raiseTimeEvent((-2540));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2540
         //
         verifyException("statechart.ZowiSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      // Undeclared exception!
      try { 
        zowiSCT0.isStateActive((ZowiSCT.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ZowiSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_OBSTACLEDETECTED;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_ISSOMEONEHERE;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_AWAKE;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.$NULLSTATE$;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ZowiSCT.State zowiSCT_State0 = ZowiSCT.State.MAIN_REGION_WELCOMEZOWI;
      boolean boolean0 = zowiSCT0.isStateActive(zowiSCT_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      boolean boolean0 = zowiSCT0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.setIsExecuting(true);
      zowiSCT0.exit();
      assertFalse(zowiSCT0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      // Undeclared exception!
      try { 
        zowiSCT0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ZowiSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      // Undeclared exception!
      try { 
        zowiSCT0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ZowiSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getNoise();
      assertEquals(700L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.setTimerService((ITimerService) null);
      assertFalse(zowiSCT0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_bigSurprise();
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      ITimerService iTimerService0 = zowiSCT0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getMaxRounds();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_FORWARD();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_sadClosed();
      assertEquals(24L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.raiseTimeEvent(0);
      assertEquals((-1L), ZowiSCT.s_BACKWARD);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      boolean boolean0 = zowiSCT0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_S_superHappy();
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.exit();
      assertEquals(3L, ZowiSCT.maxRounds);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_BACKWARD();
      assertEquals((-1L), long0);
      assertFalse(zowiSCT0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getRoundCounter();
      assertEquals(0L, long0);
      assertFalse(zowiSCT0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      long long0 = zowiSCT0.getS_heart();
      assertEquals(13L, long0);
      assertFalse(zowiSCT0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      zowiSCT0.zowi();
      assertFalse(zowiSCT0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZowiSCT.Zowi zowiSCT_Zowi0 = new ZowiSCT.Zowi();
      zowiSCT_Zowi0.setOperationCallback((ZowiSCT.Zowi.OperationCallback) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZowiSCT zowiSCT0 = new ZowiSCT();
      double double0 = zowiSCT0.getDistance();
      assertEquals(20.0, double0, 0.01);
      assertFalse(zowiSCT0.isActive());
  }
}
