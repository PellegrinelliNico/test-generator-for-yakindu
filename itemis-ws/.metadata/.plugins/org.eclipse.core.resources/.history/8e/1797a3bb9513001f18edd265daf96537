/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:20:55 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.AirConditioner_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AirConditioner_UnitSimplified_ESTest extends AirConditioner_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_down();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      AirConditioner_UnitSimplified.Metric airConditioner_UnitSimplified_Metric0 = airConditioner_UnitSimplified0.metric();
      airConditioner_UnitSimplified_Metric0.raiseConvertToFahrenheit();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      AirConditioner_UnitSimplified.Heat airConditioner_UnitSimplified_Heat0 = new AirConditioner_UnitSimplified.Heat(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified_Heat0.raiseIncrease();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      AirConditioner_UnitSimplified.Heat airConditioner_UnitSimplified_Heat0 = new AirConditioner_UnitSimplified.Heat(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified_Heat0.raiseDecrease();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified_Cool0.raiseIncrease();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.raiseTimeEvent(0);
      assertFalse(airConditioner_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.raiseTimeEvent(907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 907
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.raiseTemp_up();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.raiseTemp_down();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.isStateActive((AirConditioner_UnitSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
      airConditioner_UnitSimplified0.raiseTemp_down();
      AirConditioner_UnitSimplified.Metric airConditioner_UnitSimplified_Metric0 = new AirConditioner_UnitSimplified.Metric(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified_Metric0.raiseConvertToCelsius();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_up();
      assertFalse(airConditioner_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_up();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseTemp_down();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      airConditioner_UnitSimplified0.exit();
      assertFalse(airConditioner_UnitSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      assertTrue(airConditioner_UnitSimplified0.isActive());
      
      airConditioner_UnitSimplified0.exit();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      assertTrue(airConditioner_UnitSimplified0.isActive());
      
      airConditioner_UnitSimplified0.exit();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_MONITORING;
      airConditioner_UnitSimplified0.raiseToggle();
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_down();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_DETERMINETEMPCHANGE;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_MAINTAINING;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP;
      airConditioner_UnitSimplified0.raiseToggle();
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__OFF;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertTrue(airConditioner_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State.$NULLSTATE$;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_DECREASETEMP;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_INCREASETEMP;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_CONVERTINGTEMP_INITIALIZECONVERTER;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_COOLDOWN;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_DETERMINETEMPCHANGE;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_ROOMTEMPCHANGING_TEMPERATURECHANGE_HEATINGUP;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_MONITORINGTEMP_MAINTAINING;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__MONITORROOMTEMP_CHANGINGTEMP_MONITORING;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.State airConditioner_UnitSimplified_State0 = AirConditioner_UnitSimplified.State._AIRCONDITIONER__OFF;
      boolean boolean0 = airConditioner_UnitSimplified0.isStateActive(airConditioner_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.triggerWithoutEvent();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      boolean boolean0 = airConditioner_UnitSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      airConditioner_UnitSimplified0.heat();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = new AirConditioner_UnitSimplified.Cool(airConditioner_UnitSimplified0);
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified_Cool0.raiseDecrease();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.exit();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified0.raiseTimeEvent(907);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseTemp_up();
      airConditioner_UnitSimplified0.raiseTemp_up();
      assertTrue(airConditioner_UnitSimplified0.isActive());
      
      airConditioner_UnitSimplified0.exit();
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(airConditioner_UnitSimplified0.isActive());
      
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseToggle();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      airConditioner_UnitSimplified0.enter();
      airConditioner_UnitSimplified0.raiseToggle();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.triggerWithoutEvent();
      airConditioner_UnitSimplified0.raiseTemp_down();
      airConditioner_UnitSimplified0.raiseTemp_down();
      assertTrue(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      boolean boolean0 = airConditioner_UnitSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(airConditioner_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      airConditioner_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(airConditioner_UnitSimplified0.isActive());
      
      airConditioner_UnitSimplified0.enter();
      boolean boolean0 = airConditioner_UnitSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AirConditioner_UnitSimplified airConditioner_UnitSimplified0 = new AirConditioner_UnitSimplified();
      AirConditioner_UnitSimplified.Cool airConditioner_UnitSimplified_Cool0 = airConditioner_UnitSimplified0.cool();
      // Undeclared exception!
      try { 
        airConditioner_UnitSimplified_Cool0.raiseIncrease();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.AirConditioner_UnitSimplified", e);
      }
  }
}
