/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:27:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.FireAlarm_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FireAlarm_Unit_ESTest extends FireAlarm_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setSmoke_warning((-337L));
      assertEquals((-337L), fireAlarm_Unit_Sensors0.getSmoke_warning());
      
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors1 = fireAlarm_Unit0.sensors();
      assertEquals((-337L), fireAlarm_Unit_Sensors1.getSmoke_warning());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.message = null;
      fireAlarm_Unit0.message();
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.setStateConfVectorPosition(1172L);
      fireAlarm_Unit0.getStateConfVectorPosition();
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      fireAlarm_Unit_Sensors0.setSmoke_value(2930L);
      assertEquals(2930L, fireAlarm_Unit_Sensors0.getSmoke_value());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = new FireAlarm_Unit.Timer(fireAlarm_Unit0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setCarbon_value(100L);
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_value());
      
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors1 = fireAlarm_Unit0.sensors();
      assertFalse(fireAlarm_Unit_Sensors1.getTriggerSignal_received());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setHeat_threshold((-648L));
      assertEquals((-648L), fireAlarm_Unit_Sensors0.getHeat_threshold());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.setWarned(false);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setSmoke_presence(true);
      assertTrue(fireAlarm_Unit_Sensors0.getSmoke_presence());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setSmoke_threshold((-1383L));
      assertEquals((-1383L), fireAlarm_Unit_Sensors0.getSmoke_threshold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      
      fireAlarm_Unit_Sensors0.setCarbon_warning(0L);
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setCarbon_threshold(8L);
      assertEquals(8L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setTriggerSignal_received(true);
      assertTrue(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer();
      assertEquals(8L, fireAlarm_Unit_Timer0.getFinal_warning_period());
      
      fireAlarm_Unit_Timer0.setFinal_warning_period(10L);
      assertEquals(10L, fireAlarm_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer();
      assertEquals(15L, fireAlarm_Unit_Timer0.getWarning_period());
      
      fireAlarm_Unit_Timer0.setWarning_period(1L);
      assertEquals(10L, fireAlarm_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.sensors.setHeat_presence(false);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setHeat_increment(100L);
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_increment());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.sensors.setCarbon_presence(false);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = fireAlarm_Unit0.alarm;
      fireAlarm_Unit_Alarm0.setThreshold_reached(true);
      assertTrue(fireAlarm_Unit_Alarm0.getThreshold_reached());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Message fireAlarm_Unit_Message0 = fireAlarm_Unit0.message();
      fireAlarm_Unit_Message0.setSensor("");
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = fireAlarm_Unit0.alarm;
      fireAlarm_Unit_Alarm0.setSound(false);
      assertFalse(fireAlarm_Unit_Alarm0.getSound());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Alarm0.getThreshold_reached());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      fireAlarm_Unit_Sensors0.setIndex(0L);
      assertEquals(0L, fireAlarm_Unit_Sensors0.getCarbon_value());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      fireAlarm_Unit_Sensors0.setHear_warning(2069L);
      assertEquals(2069L, fireAlarm_Unit_Sensors0.getHear_warning());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      fireAlarm_Unit_Sensors0.setHeat_value(0L);
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      fireAlarm_Unit_Sensors0.setSmoke_increment(1329L);
      assertEquals(1329L, fireAlarm_Unit_Sensors0.getSmoke_increment());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.setCarbon_increment((-4634L));
      assertEquals((-4634L), fireAlarm_Unit_Sensors0.getCarbon_increment());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer();
      fireAlarm_Unit_Timer0.setCounter(4L);
      assertEquals(4L, fireAlarm_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State.$NULLSTATE$;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      assertFalse(fireAlarm_Unit0.isActive());
      
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING__R1__FINAL_WARNING_ENDED;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING__R1__FINAL_WARNING_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__HEATSENSOR__MONITORING_HEAT_LEVEL_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__CARBONSENSOR__MONITORING_CARBON_LEVEL_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_VALUE_MONITORING_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED__WARNING_BEFORE_SOUNDING_SOUNDALARM;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED__WARNING_BEFORE_SOUNDING_SENSORWARNING;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__SMOKESENSOR__MONITORING_SMOKE_LEVEL_;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_DANGER__911_ACTIVATED___911_EMERGENCY_ACTIVATED;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING_LEVEL_FINAL_WARNING;
      fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING_LEVEL_INITIAL_WARNING;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(boolean0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_SAFE;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__ALARM_SWITCH_ALARM_ON;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING_;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(boolean0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.State fireAlarm_Unit_State0 = FireAlarm_Unit.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__ALARM_SWITCH_ALARM_OFF;
      boolean boolean0 = fireAlarm_Unit0.isStateActive(fireAlarm_Unit_State0);
      assertFalse(boolean0);
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      boolean boolean0 = fireAlarm_Unit0.nextEvent();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      boolean boolean0 = fireAlarm_Unit0.isActive();
      assertFalse(boolean0);
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.setIsExecuting(true);
      fireAlarm_Unit0.exit();
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      assertFalse(fireAlarm_Unit0.isActive());
      
      fireAlarm_Unit0.exit();
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      // Undeclared exception!
      try { 
        fireAlarm_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = fireAlarm_Unit0.alarm();
      boolean boolean0 = fireAlarm_Unit_Alarm0.getSound();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Alarm0.getThreshold_reached());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = fireAlarm_Unit0.alarm();
      boolean boolean0 = fireAlarm_Unit_Alarm0.getThreshold_reached();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Alarm0.getSound());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = new FireAlarm_Unit.Alarm(fireAlarm_Unit0);
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Alarm0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Message fireAlarm_Unit_Message0 = fireAlarm_Unit0.message;
      fireAlarm_Unit_Message0.getStatus();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FireAlarm_Unit.Message fireAlarm_Unit_Message0 = new FireAlarm_Unit.Message();
      String string0 = fireAlarm_Unit_Message0.getSensor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer;
      long long0 = fireAlarm_Unit_Timer0.getCounter();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit0.isActive());
      assertEquals(8L, fireAlarm_Unit_Timer0.getFinal_warning_period());
      assertEquals(15L, fireAlarm_Unit_Timer0.getWarning_period());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer;
      long long0 = fireAlarm_Unit_Timer0.getWarning_period();
      assertEquals(10L, fireAlarm_Unit_Timer0.getCounter());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(8L, fireAlarm_Unit_Timer0.getFinal_warning_period());
      assertEquals(15L, long0);
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer;
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Timer0.raiseEnable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer;
      long long0 = fireAlarm_Unit_Timer0.getFinal_warning_period();
      assertFalse(fireAlarm_Unit0.isActive());
      assertEquals(15L, fireAlarm_Unit_Timer0.getWarning_period());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(8L, long0);
      assertEquals(10L, fireAlarm_Unit_Timer0.getCounter());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      // Undeclared exception!
      try { 
        fireAlarm_Unit0.timer.raiseReset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.setTimerService((ITimerService) null);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.getIsExecuting();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.getTimerService();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Message fireAlarm_Unit_Message0 = fireAlarm_Unit0.message();
      fireAlarm_Unit_Message0.setStatus("3rwp");
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      boolean boolean0 = fireAlarm_Unit0.isFinal();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Alarm fireAlarm_Unit_Alarm0 = fireAlarm_Unit0.alarm();
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Alarm0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Timer fireAlarm_Unit_Timer0 = fireAlarm_Unit0.timer();
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Timer0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      boolean boolean0 = fireAlarm_Unit0.getWarned();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      // Undeclared exception!
      try { 
        fireAlarm_Unit0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      // Undeclared exception!
      try { 
        fireAlarm_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      fireAlarm_Unit0.getStateConfVectorPosition();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Mode fireAlarm_Unit_Mode0 = fireAlarm_Unit0.mode();
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Mode0.raiseDanger();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Mode fireAlarm_Unit_Mode0 = new FireAlarm_Unit.Mode(fireAlarm_Unit0);
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Mode0.raiseWarning();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Mode fireAlarm_Unit_Mode0 = new FireAlarm_Unit.Mode(fireAlarm_Unit0);
      // Undeclared exception!
      try { 
        fireAlarm_Unit_Mode0.raiseSafe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      long long0 = fireAlarm_Unit_Sensors0.getCarbon_warning();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(50L, long0);
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.getSmoke_value();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertFalse(fireAlarm_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      long long0 = fireAlarm_Unit_Sensors0.getSmoke_warning();
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(50L, long0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      long long0 = fireAlarm_Unit0.sensors.getHeat_increment();
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      long long0 = fireAlarm_Unit_Sensors0.getCarbon_threshold();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      long long0 = fireAlarm_Unit_Sensors0.getSmoke_threshold();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      long long0 = fireAlarm_Unit_Sensors0.getHear_warning();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      long long0 = fireAlarm_Unit_Sensors0.getIndex();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      fireAlarm_Unit_Sensors0.getHeat_value();
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertFalse(fireAlarm_Unit0.isActive());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      fireAlarm_Unit_Sensors0.getCarbon_value();
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = new FireAlarm_Unit.Sensors();
      boolean boolean0 = fireAlarm_Unit_Sensors0.getHeat_presence();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      boolean boolean0 = fireAlarm_Unit_Sensors0.getSmoke_presence();
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertFalse(fireAlarm_Unit0.isActive());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertFalse(boolean0);
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      boolean boolean0 = fireAlarm_Unit_Sensors0.getTriggerSignal_received();
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertFalse(fireAlarm_Unit0.isActive());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      boolean boolean0 = fireAlarm_Unit_Sensors0.getCarbon_presence();
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors();
      long long0 = fireAlarm_Unit_Sensors0.getCarbon_increment();
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(1L, long0);
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      long long0 = fireAlarm_Unit_Sensors0.getSmoke_increment();
      assertEquals(100L, fireAlarm_Unit_Sensors0.getHeat_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertEquals(1L, long0);
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      FireAlarm_Unit.Sensors fireAlarm_Unit_Sensors0 = fireAlarm_Unit0.sensors;
      long long0 = fireAlarm_Unit_Sensors0.getHeat_threshold();
      assertEquals(50L, fireAlarm_Unit_Sensors0.getHear_warning());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getSmoke_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getSmoke_warning());
      assertFalse(fireAlarm_Unit_Sensors0.getTriggerSignal_received());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getSmoke_threshold());
      assertFalse(fireAlarm_Unit0.getWarned());
      assertFalse(fireAlarm_Unit_Sensors0.getSmoke_presence());
      assertEquals(100L, long0);
      assertFalse(fireAlarm_Unit0.isActive());
      assertFalse(fireAlarm_Unit_Sensors0.getCarbon_presence());
      assertFalse(fireAlarm_Unit_Sensors0.getHeat_presence());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getHeat_increment());
      assertEquals(1L, fireAlarm_Unit_Sensors0.getCarbon_increment());
      assertEquals(50L, fireAlarm_Unit_Sensors0.getCarbon_warning());
      assertEquals(100L, fireAlarm_Unit_Sensors0.getCarbon_threshold());
  }
}
