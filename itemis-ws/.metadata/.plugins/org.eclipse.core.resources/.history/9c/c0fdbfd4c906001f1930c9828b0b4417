package temp;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import com.google.inject.Injector;
import com.yakindu.sct.domain.extension.DomainRegistry;
import com.yakindu.sct.domain.extension.IDomain;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import java.io.File;
import com.yakindu.base.base.NamedElement;
import com.yakindu.base.types.AnnotatableElement;
import com.yakindu.base.types.Annotation;
import com.yakindu.base.types.Declaration;
import com.yakindu.base.types.Property;
import com.yakindu.base.types.Type;
import com.yakindu.base.types.TypeParameter;
import com.yakindu.base.types.TypeSpecifier;
import com.fasterxml.jackson.core.JsonFactory;
import com.yakindu.sctunit.coverage.JSONToMeasurement;
import com.yakindu.sctunit.coverage.Measurement;
import com.yakindu.sctunit.coverage.MeasurementExtension;
import com.yakindu.sctunit.coverage.StatechartMeasurementBuilder;
import com.yakindu.sctunit.sCTUnit.SCTUnitClass;
import com.yakindu.sctunit.sCTUnit.SCTUnitSuite;
import com.yakindu.sctunit.sCTUnit.SCTUnitFactory;
import com.yakindu.sctunit.sCTUnit.impl.SCTUnitSuiteImpl;
import com.yakindu.sctunit.sCTUnit.impl.SCTUnitFactoryImpl;
import com.yakindu.sctunit.simulation.core.debugmodel.SCTUnitDebugTarget;

public class Prova {

	public static void main(String[] args) throws IOException {
		String covPath = "src/temp/ExamplStc-2024-04-24-104757.cov";

		String cov = new String(Files.readAllBytes(Paths.get(covPath)), StandardCharsets.UTF_8);

		URI uri = URI.createFileURI(covPath);
		
//		SCTUnitFactory factory = new SCTUnitFactoryImpl();
//		SCTUnitSuite element = null;
//
//		StatechartMeasurementBuilder builder = new StatechartMeasurementBuilder();
//		Measurement measurement = builder.buildMeasurement(element, getSCTUnitClasses(element));
//
//		MeasurementExtension measurementExtension = new MeasurementExtension(measurement);
//
//		Measurement.StateTransitionCoverage coverage = measurementExtension.coverage(measurement);
//		String value = (int) ((1.0F - coverage.coverage) * 100.0F) + "%";
//
//		System.out.println("Coverage: " + value);

//		String domainID = DomainRegistry.determineDomainID(uri);
//		IDomain domain = DomainRegistry.getDomain(domainID);
//		Injector injector;
//		injector = getInjector(domain);

//		ResourceSet set = new ResourceSetImpl();
//		set.getResources().add((Resource) uri);

//		ResourceSet set = new ResourceSetImpl();
//		Resource resource = set.getResource(uri, false);
//
//
//		ResourceSet resourceSet = new ResourceSetImpl();
//		resourceSet.getResourceFactoryRegistry()
//			.getExtensionToFactoryMap()
//			.put("json", new JsonFactory());
//		
//
		JSONToMeasurement j2m = new JSONToMeasurement(cov);
		Measurement measurement = j2m.generateMeasurement();
		
		MeasurementExtension measurementExtension = new MeasurementExtension(measurement);

		Measurement.StateTransitionCoverage coverage = measurementExtension.coverage(measurement);
		String value = (int) ((1.0F - coverage.coverage) * 100.0F) + "%";

		System.out.println("Coverage: " + value);
	}

	protected static ArrayList<SCTUnitClass> getSCTUnitClasses(SCTUnitSuite suite) {
		ArrayList<SCTUnitClass> sctunitClasses = new ArrayList<SCTUnitClass>();
		suite.getFeatures().forEach((x) -> {
			sctunitClasses.add((SCTUnitClass) ((Property) x).getType());
		});
		return sctunitClasses;
	}

}
