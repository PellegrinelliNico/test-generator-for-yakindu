/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:52:54 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.LEDLight_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.SmartLightSystem;
import statechart.Ultrasonic_MotionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartLightSystem_ESTest extends SmartLightSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorInput smartLightSystem_SensorInput0 = new SmartLightSystem.SensorInput();
      smartLightSystem0.sensorInput = smartLightSystem_SensorInput0;
      smartLightSystem0.sensorInput();
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      assertFalse(smartLightSystem0.getWiFi_connection());
      
      smartLightSystem0.setWiFi_connection(true);
      boolean boolean0 = smartLightSystem0.getWiFi_connection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      assertEquals(50L, smartLightSystem0.getTemp_value());
      
      smartLightSystem0.setTemp_value(0L);
      smartLightSystem0.getTemp_value();
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setMessage("ap#Rno4");
      smartLightSystem0.getMessage();
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getIsExecuting();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      // Undeclared exception!
      try { 
        smartLightSystem0.isStateActive((SmartLightSystem.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartLightSystem0.setActuator(actuator_Component0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartLightSystem0.setTemp(deviceTemp_Component0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      smartLightSystem0.setLights(lEDLight_Unit0);
      smartLightSystem0.getLights();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setPower_total((-1663L));
      assertEquals((-1663L), smartLightSystem0.getPower_total());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setPower((Power_Component) null);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = new SmartLightSystem.System(smartLightSystem0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorOutput smartLightSystem_SensorOutput0 = smartLightSystem0.sensorOutput();
      smartLightSystem_SensorOutput0.setCounter(816L);
      assertEquals(816L, smartLightSystem_SensorOutput0.getCounter());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      Ultrasonic_MotionDetector ultrasonic_MotionDetector0 = new Ultrasonic_MotionDetector();
      smartLightSystem0.setMotionDetector(ultrasonic_MotionDetector0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setTemp_value((-2516L));
      long long0 = smartLightSystem0.getTemp_value();
      assertEquals((-2516L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setPower_required((-627L));
      long long0 = smartLightSystem0.getPower_required();
      assertEquals((-627L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorInput smartLightSystem_SensorInput0 = smartLightSystem0.sensorInput();
      smartLightSystem_SensorInput0.setDetection_time((-1663L));
      assertEquals((-1663L), smartLightSystem_SensorInput0.getDetection_time());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setPower_input(3600L);
      assertEquals(3600L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system;
      smartLightSystem_System0.setIsOn(false);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem_System0.getIsOn());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      Network_Component network_Component0 = new Network_Component();
      smartLightSystem0.setWiFi(network_Component0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      Controller_Component controller_Component0 = new Controller_Component();
      smartLightSystem0.setController(controller_Component0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorOutput smartLightSystem_SensorOutput0 = smartLightSystem0.sensorOutput();
      smartLightSystem_SensorOutput0.setActivity(false);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem_SensorOutput0.getActivity());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State.$NULLSTATE$;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY__INITIALIZE_SENSOR_COMPONENT_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(boolean0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY_OFF;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF;
      smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.State smartLightSystem_State0 = SmartLightSystem.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF;
      boolean boolean0 = smartLightSystem0.isStateActive(smartLightSystem_State0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      boolean boolean0 = smartLightSystem0.nextEvent();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      boolean boolean0 = smartLightSystem0.isActive();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(boolean0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      // Undeclared exception!
      try { 
        smartLightSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartLightSystem.SensorInput smartLightSystem_SensorInput0 = new SmartLightSystem.SensorInput();
      long long0 = smartLightSystem_SensorInput0.getTimeout_time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SmartLightSystem.SensorInput smartLightSystem_SensorInput0 = new SmartLightSystem.SensorInput();
      long long0 = smartLightSystem_SensorInput0.getDetection_time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SmartLightSystem.SensorOutput smartLightSystem_SensorOutput0 = new SmartLightSystem.SensorOutput();
      long long0 = smartLightSystem_SensorOutput0.getCounter();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getController();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      long long0 = smartLightSystem0.getTemp_value();
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getWiFi();
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setStateConfVectorPosition(1747L);
      long long0 = smartLightSystem0.getStateConfVectorPosition();
      assertEquals(1747L, long0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorInput smartLightSystem_SensorInput0 = smartLightSystem0.sensorInput();
      smartLightSystem_SensorInput0.setTimeout_time((-1663L));
      assertEquals((-1663L), smartLightSystem_SensorInput0.getTimeout_time());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      boolean boolean0 = smartLightSystem0.getWiFi_connection();
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(boolean0);
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      assertFalse(smartLightSystem0.isActive());
      
      smartLightSystem0.exit();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getPower_total();
      assertFalse(smartLightSystem0.isActive());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setTimerService((ITimerService) null);
      assertFalse(smartLightSystem0.isActive());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getActuator();
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getMessage();
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getMotionDetector();
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getStateConfVectorPosition();
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.isActive());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.SensorOutput smartLightSystem_SensorOutput0 = smartLightSystem0.sensorOutput();
      boolean boolean0 = smartLightSystem_SensorOutput0.getActivity();
      assertFalse(boolean0);
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      long long0 = smartLightSystem0.getPower_required();
      assertEquals(10L, long0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.setIsExecuting(true);
      boolean boolean0 = smartLightSystem0.getIsExecuting();
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertTrue(boolean0);
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getTimerService();
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.isActive());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(10L, smartLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getLights();
      assertFalse(smartLightSystem0.isActive());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      // Undeclared exception!
      try { 
        smartLightSystem0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      long long0 = smartLightSystem0.getPower_input();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertEquals(15L, long0);
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(smartLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      boolean boolean0 = smartLightSystem0.isFinal();
      assertFalse(boolean0);
      assertFalse(smartLightSystem0.isActive());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getPower();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(smartLightSystem0.isActive());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      // Undeclared exception!
      try { 
        smartLightSystem0.raiseTimeEvent((-1848));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      smartLightSystem0.getTemp();
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.getWiFi_connection());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertEquals(50L, smartLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system();
      // Undeclared exception!
      try { 
        smartLightSystem_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system();
      // Undeclared exception!
      try { 
        smartLightSystem_System0.raiseConnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system;
      // Undeclared exception!
      try { 
        smartLightSystem_System0.raiseDisconnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system();
      // Undeclared exception!
      try { 
        smartLightSystem_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SmartLightSystem smartLightSystem0 = new SmartLightSystem();
      SmartLightSystem.System smartLightSystem_System0 = smartLightSystem0.system;
      boolean boolean0 = smartLightSystem_System0.getIsOn();
      assertEquals(10L, smartLightSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(15L, smartLightSystem0.getPower_input());
      assertFalse(smartLightSystem0.isActive());
      assertEquals(50L, smartLightSystem0.getTemp_value());
      assertFalse(smartLightSystem0.getWiFi_connection());
  }
}
