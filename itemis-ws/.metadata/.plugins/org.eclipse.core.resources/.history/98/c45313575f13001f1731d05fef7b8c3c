/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 19:10:20 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._Physics;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _Physics_ESTest extends _Physics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setX((-2129.031373521));
      double double0 = _Physics0.getX();
      assertEquals((-2129.031373521), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setV(3898.203981132219);
      double double0 = _Physics0.getV();
      assertEquals(3898.203981132219, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setV((-1286.54106302));
      double double0 = _Physics0.getV();
      assertEquals((-1286.54106302), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setStateConfVectorPosition((-16L));
      long long0 = _Physics0.getStateConfVectorPosition();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals((-16L), long0);
      assertEquals(50.0, _Physics0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setIsExecuting(true);
      boolean boolean0 = _Physics0.getIsExecuting();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      boolean boolean0 = _Physics0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setA(4053.017616);
      double double0 = _Physics0.getA();
      assertEquals(4053.017616, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setA((-794.874972570861));
      double double0 = _Physics0.getA();
      assertEquals((-794.874972570861), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.isStateActive((_Physics.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._Physics", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      assertEquals(50.0, _Physics0.getX(), 0.01);
      
      _Physics0.setX(0.0);
      double double0 = _Physics0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.getSetAccelerationValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event SetAcceleration is not raised!
         //
         verifyException("statechart._Physics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics.State _Physics_State0 = _Physics.State.$NULLSTATE$;
      boolean boolean0 = _Physics0.isStateActive(_Physics_State0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics.State _Physics_State0 = _Physics.State.PHYSICS_PHYSICS;
      boolean boolean0 = _Physics0.isStateActive(_Physics_State0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics.State _Physics_State0 = _Physics.State.PHYSICS_PHYSICS_R2_DEFAULT;
      boolean boolean0 = _Physics0.isStateActive(_Physics_State0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics.State _Physics_State0 = _Physics.State.PHYSICS_PHYSICS_R1_DEFAULT;
      boolean boolean0 = _Physics0.isStateActive(_Physics_State0);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      boolean boolean0 = _Physics0.nextEvent();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertFalse(boolean0);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      boolean boolean0 = _Physics0.isActive();
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Physics", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.raiseUpdate();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.raiseSetAcceleration(1156.17542305);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Physics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.raiseTimeEvent(1005);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Physics", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      double double0 = _Physics0.getX();
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setTimerService((ITimerService) null);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      boolean boolean0 = _Physics0.isFinal();
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      double double0 = _Physics0.getV();
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.getTimerService();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      double double0 = _Physics0.getA();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.getUpdate();
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setIsExecuting(true);
      _Physics0.exit();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      assertFalse(_Physics0.isActive());
      
      _Physics0.exit();
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.getStateConfVectorPosition();
      assertEquals(0.0, _Physics0.getA(), 0.01);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertFalse(_Physics0.isActive());
      assertEquals(0.0, _Physics0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      _Physics0.setStateConfVectorPosition(5L);
      long long0 = _Physics0.getStateConfVectorPosition();
      assertEquals(0.0, _Physics0.getV(), 0.01);
      assertFalse(_Physics0.isActive());
      assertEquals(5L, long0);
      assertEquals(50.0, _Physics0.getX(), 0.01);
      assertEquals(0.0, _Physics0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _Physics _Physics0 = new _Physics();
      // Undeclared exception!
      try { 
        _Physics0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._Physics", e);
      }
  }
}
