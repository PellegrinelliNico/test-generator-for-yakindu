/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:21:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._02_DimmableLightSwitch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _02_DimmableLightSwitch_ESTest extends _02_DimmableLightSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.setBrightness(1L);
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      assertTrue(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(true);
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      boolean boolean0 = _02_DimmableLightSwitch0.nextEvent();
      assertTrue(boolean0);
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.nextEvent();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(true);
      boolean boolean0 = _02_DimmableLightSwitch0.getIsExecuting();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      boolean boolean0 = _02_DimmableLightSwitch0.getIsExecuting();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      long long0 = _02_DimmableLightSwitch0.getBrightness();
      assertTrue(_02_DimmableLightSwitch0.isActive());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      
      _02_DimmableLightSwitch0.setBrightness((-1L));
      long long0 = _02_DimmableLightSwitch0.getBrightness();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      // Undeclared exception!
      try { 
        _02_DimmableLightSwitch0.isStateActive((_02_DimmableLightSwitch.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._02_DimmableLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      long long0 = _02_DimmableLightSwitch0.getBrightness();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.setBrightness((-1L));
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      assertTrue(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.triggerWithoutEvent();
      assertTrue(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      assertTrue(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.exit();
      assertEquals(10L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      assertTrue(_02_DimmableLightSwitch0.isActive());
      
      _02_DimmableLightSwitch0.exit();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch.State _02_DimmableLightSwitch_State0 = _02_DimmableLightSwitch.State.MAIN_ON;
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      boolean boolean0 = _02_DimmableLightSwitch0.isStateActive(_02_DimmableLightSwitch_State0);
      assertTrue(_02_DimmableLightSwitch0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch.State _02_DimmableLightSwitch_State0 = _02_DimmableLightSwitch.State.MAIN_OFF;
      _02_DimmableLightSwitch0.enter();
      boolean boolean0 = _02_DimmableLightSwitch0.isStateActive(_02_DimmableLightSwitch_State0);
      assertTrue(_02_DimmableLightSwitch0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch.State _02_DimmableLightSwitch_State0 = _02_DimmableLightSwitch.State.$NULLSTATE$;
      boolean boolean0 = _02_DimmableLightSwitch0.isStateActive(_02_DimmableLightSwitch_State0);
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch.State _02_DimmableLightSwitch_State0 = _02_DimmableLightSwitch.State.MAIN_ON;
      boolean boolean0 = _02_DimmableLightSwitch0.isStateActive(_02_DimmableLightSwitch_State0);
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch.State _02_DimmableLightSwitch_State0 = _02_DimmableLightSwitch.State.MAIN_OFF;
      boolean boolean0 = _02_DimmableLightSwitch0.isStateActive(_02_DimmableLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(true);
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(false);
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      boolean boolean0 = _02_DimmableLightSwitch0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      boolean boolean0 = _02_DimmableLightSwitch0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(true);
      _02_DimmableLightSwitch0.exit();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      assertFalse(_02_DimmableLightSwitch0.isActive());
      
      _02_DimmableLightSwitch0.exit();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      boolean boolean0 = _02_DimmableLightSwitch0.isFinal();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertFalse(boolean0);
      assertFalse(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.setIsExecuting(true);
      _02_DimmableLightSwitch0.enter();
      assertEquals(0L, _02_DimmableLightSwitch0.getBrightness());
      assertFalse(_02_DimmableLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _02_DimmableLightSwitch _02_DimmableLightSwitch0 = new _02_DimmableLightSwitch();
      _02_DimmableLightSwitch0.enter();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseSwitch();
      _02_DimmableLightSwitch0.raiseChangeBrightness();
      assertEquals(9L, _02_DimmableLightSwitch0.getBrightness());
  }
}
