/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:49:10 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Blink1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Blink1_ESTest extends Blink1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setOutput(0L);
      blink1_0.getOutput();
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setOutput((-1887L));
      long long0 = blink1_0.getOutput();
      assertEquals((-1887L), long0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setLow(2L);
      long long0 = blink1_0.getLow();
      assertEquals(2L, long0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setLow((-1945L));
      long long0 = blink1_0.getLow();
      assertEquals((-1945L), long0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setLed_pin(0L);
      blink1_0.getLed_pin();
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setLed_pin((-1709L));
      long long0 = blink1_0.getLed_pin();
      assertEquals((-1709L), long0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setIsExecuting(true);
      boolean boolean0 = blink1_0.getIsExecuting();
      assertEquals(2000L, blink1_0.getDelay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      boolean boolean0 = blink1_0.getIsExecuting();
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setHigh(0L);
      blink1_0.getHigh();
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setHigh((-1471L));
      long long0 = blink1_0.getHigh();
      assertEquals(2000L, blink1_0.getDelay());
      assertEquals((-1471L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setDelay(0L);
      long long0 = blink1_0.getDelay();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setDelay((-602L));
      long long0 = blink1_0.getDelay();
      assertEquals((-602L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      // Undeclared exception!
      try { 
        blink1_0.isStateActive((Blink1.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Blink1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.State blink1_State0 = Blink1.State.$NULLSTATE$;
      boolean boolean0 = blink1_0.isStateActive(blink1_State0);
      assertFalse(boolean0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.State blink1_State0 = Blink1.State.ESP_BLINK;
      boolean boolean0 = blink1_0.isStateActive(blink1_State0);
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.State blink1_State0 = Blink1.State.ESP_BLINK_BLINKY_OFF;
      boolean boolean0 = blink1_0.isStateActive(blink1_State0);
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.State blink1_State0 = Blink1.State.ESP_IDLE;
      boolean boolean0 = blink1_0.isStateActive(blink1_State0);
      assertFalse(boolean0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.State blink1_State0 = Blink1.State.ESP_BLINK_BLINKY_ON;
      boolean boolean0 = blink1_0.isStateActive(blink1_State0);
      assertFalse(boolean0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      boolean boolean0 = blink1_0.nextEvent();
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      boolean boolean0 = blink1_0.isActive();
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      // Undeclared exception!
      try { 
        blink1_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Blink1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setTimerService((ITimerService) null);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      // Undeclared exception!
      try { 
        blink1_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Blink1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      // Undeclared exception!
      try { 
        blink1_0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Blink1", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      Blink1.OperationCallback blink1_OperationCallback0 = mock(Blink1.OperationCallback.class, new ViolatedAssumptionAnswer());
      blink1_0.setOperationCallback(blink1_OperationCallback0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      assertFalse(blink1_0.isActive());
      
      blink1_0.exit();
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      long long0 = blink1_0.getOutput();
      assertEquals(2L, long0);
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(blink1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.getTic();
      assertFalse(blink1_0.isActive());
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      long long0 = blink1_0.getLow();
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(blink1_0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.raiseTic();
      assertFalse(blink1_0.isActive());
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      long long0 = blink1_0.getLed_pin();
      assertFalse(blink1_0.isActive());
      assertEquals(2000L, blink1_0.getDelay());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      boolean boolean0 = blink1_0.isFinal();
      assertFalse(blink1_0.isActive());
      assertFalse(boolean0);
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      long long0 = blink1_0.getHigh();
      assertEquals(2000L, blink1_0.getDelay());
      assertEquals(1L, long0);
      assertFalse(blink1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      // Undeclared exception!
      try { 
        blink1_0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Blink1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      long long0 = blink1_0.getDelay();
      assertEquals(2000L, long0);
      assertFalse(blink1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.setIsExecuting(true);
      blink1_0.exit();
      assertFalse(blink1_0.isActive());
      assertEquals(2000L, blink1_0.getDelay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Blink1 blink1_0 = new Blink1();
      blink1_0.getTimerService();
      assertEquals(2000L, blink1_0.getDelay());
      assertFalse(blink1_0.isActive());
  }
}
