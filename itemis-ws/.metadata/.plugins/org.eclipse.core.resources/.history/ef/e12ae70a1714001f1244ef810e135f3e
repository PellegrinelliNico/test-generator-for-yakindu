/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 21:29:39 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Test41;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Test41_ESTest extends Test41_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.panel = null;
      Test41.Panel test41_Panel0 = test41_0.panel();
      assertNull(test41_Panel0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.raiseVier();
      boolean boolean0 = test41_0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Test41 test41_0 = new Test41();
      boolean boolean0 = test41_0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setZ(1036L);
      long long0 = test41_0.getZ();
      assertEquals(1036L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setZ((-627L));
      long long0 = test41_0.getZ();
      assertEquals((-627L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setPau(1401L);
      long long0 = test41_0.getPau();
      assertEquals(1401L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setPau((-1952L));
      long long0 = test41_0.getPau();
      assertEquals((-1952L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setIsExecuting(true);
      boolean boolean0 = test41_0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Test41 test41_0 = new Test41();
      boolean boolean0 = test41_0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.panel = null;
      // Undeclared exception!
      try { 
        test41_0.triggerWithoutEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Test41 test41_0 = new Test41();
      // Undeclared exception!
      try { 
        test41_0.isStateActive((Test41.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Test41", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.Panel test41_Panel0 = new Test41.Panel(test41_0);
      test41_0.panel = test41_Panel0;
      test41_0.enter();
      test41_Panel0.raiseBtn_pressed();
      test41_0.triggerWithoutEvent();
      assertTrue(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      test41_0.triggerWithoutEvent();
      assertTrue(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      Test41.Panel test41_Panel0 = test41_0.panel();
      test41_Panel0.raiseBtn_pressed();
      test41_Panel0.raiseBtn_pressed();
      assertTrue(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      Test41.Panel test41_Panel0 = test41_0.panel();
      test41_Panel0.raiseBtn_pressed();
      assertTrue(test41_0.isActive());
      
      test41_0.exit();
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.exit();
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB;
      Test41.Panel test41_Panel0 = test41_0.panel;
      test41_0.enter();
      test41_Panel0.raiseBtn_pressed();
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertTrue(test41_0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertTrue(test41_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEA;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertTrue(test41_0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.State test41_State0 = Test41.State.$NULLSTATE$;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Test41 test41_0 = new Test41();
      assertFalse(test41_0.isActive());
      
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB_REGION_1_STATED;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertFalse(test41_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB_REGION_1_STATEC;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertFalse(test41_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEA;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertFalse(test41_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setIsExecuting(true);
      test41_0.triggerWithoutEvent();
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Test41 test41_0 = new Test41();
      assertFalse(test41_0.isActive());
      
      test41_0.enter();
      boolean boolean0 = test41_0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Test41 test41_0 = new Test41();
      boolean boolean0 = test41_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setIsExecuting(true);
      test41_0.exit();
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Test41 test41_0 = new Test41();
      long long0 = test41_0.getPau();
      assertFalse(test41_0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Test41 test41_0 = new Test41();
      boolean boolean0 = test41_0.isFinal();
      assertFalse(boolean0);
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Test41 test41_0 = new Test41();
      long long0 = test41_0.getZ();
      assertEquals(0L, long0);
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Test41 test41_0 = new Test41();
      Test41.Panel test41_Panel0 = new Test41.Panel(test41_0);
      test41_0.panel = test41_Panel0;
      assertFalse(test41_0.isActive());
      
      test41_0.enter();
      test41_Panel0.raiseBtn_pressed();
      test41_0.raiseVier();
      test41_0.panel.raiseBtn_pressed();
      assertTrue(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Test41 test41_0 = new Test41();
      assertFalse(test41_0.isActive());
      
      test41_0.enter();
      test41_0.panel.raiseBtn_pressed();
      Test41.State test41_State0 = Test41.State.MAIN_REGION_STATEB_REGION_1_STATEC;
      boolean boolean0 = test41_0.isStateActive(test41_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.setIsExecuting(true);
      test41_0.enter();
      assertFalse(test41_0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Test41 test41_0 = new Test41();
      test41_0.enter();
      assertTrue(test41_0.isActive());
      
      test41_0.exit();
      assertFalse(test41_0.isActive());
  }
}
