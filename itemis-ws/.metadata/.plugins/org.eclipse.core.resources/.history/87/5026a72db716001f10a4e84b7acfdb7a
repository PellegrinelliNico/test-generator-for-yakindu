/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:28:36 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._03_deep_historySimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _03_deep_historySimplified_ESTest extends _03_deep_historySimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified0.raiseTimeEvent(0);
      assertFalse(_03_deep_historySimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = new _03_deep_historySimplified.Sensor();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = new _03_deep_historySimplified.User();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _03_deep_historySimplified.Lum_sensor _03_deep_historySimplified_Lum_sensor0 = new _03_deep_historySimplified.Lum_sensor();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified0.exit();
      assertFalse(_03_deep_historySimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.exit();
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      assertTrue(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.exit();
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.enter();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified0.enter();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseMode_button();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.enter();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_MOTIONDETECTED;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_IDLE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE;
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOn_button();
      _03_deep_historySimplified0.runCycle();
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseMode_button();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE_R1_IDLE;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified0.runCycle();
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOn_button();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOn_button();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_MANUALMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertTrue(_03_deep_historySimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.$NULLSTATE$;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_MOTIONDETECTED;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_IDLE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE_R1_TWILIGHTDETECTED;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE_R1_IDLE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.State _03_deep_historySimplified_State0 = _03_deep_historySimplified.State.MAIN_REGION_MANUALMODE;
      boolean boolean0 = _03_deep_historySimplified0.isStateActive(_03_deep_historySimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.runCycle();
      assertFalse(_03_deep_historySimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      assertFalse(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOn_button();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      assertFalse(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.enter();
      boolean boolean0 = _03_deep_historySimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      boolean boolean0 = _03_deep_historySimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      // Undeclared exception!
      try { 
        _03_deep_historySimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_deep_historySimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      // Undeclared exception!
      try { 
        _03_deep_historySimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_deep_historySimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOff_button();
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      // Undeclared exception!
      try { 
        _03_deep_historySimplified0.raiseTimeEvent(593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 593
         //
         verifyException("statechart._03_deep_historySimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseMode_button();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.exit();
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      boolean boolean0 = _03_deep_historySimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      assertFalse(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.Sensor _03_deep_historySimplified_Sensor0 = _03_deep_historySimplified0.sensor();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified_Sensor0.raiseMotion();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseOn_button();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.exit();
      assertFalse(_03_deep_historySimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.User _03_deep_historySimplified_User0 = _03_deep_historySimplified0.user();
      _03_deep_historySimplified_User0.raiseMode_button();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_deep_historySimplified0.setTimerService(iTimerService0);
      assertFalse(_03_deep_historySimplified0.isActive());
      
      _03_deep_historySimplified0.enter();
      _03_deep_historySimplified0.runCycle();
      _03_deep_historySimplified0.runCycle();
      assertTrue(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.Lum_sensor _03_deep_historySimplified_Lum_sensor0 = _03_deep_historySimplified0.lum_sensor();
      _03_deep_historySimplified_Lum_sensor0.raiseDark();
      assertFalse(_03_deep_historySimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      _03_deep_historySimplified _03_deep_historySimplified0 = new _03_deep_historySimplified();
      _03_deep_historySimplified.Lum_sensor _03_deep_historySimplified_Lum_sensor0 = _03_deep_historySimplified0.lum_sensor();
      _03_deep_historySimplified_Lum_sensor0.raiseBright();
      assertFalse(_03_deep_historySimplified0.isActive());
  }
}
