/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:25:39 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Light_switch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Light_switch_ESTest extends Light_switch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.user = null;
      Light_switch.User light_switch_User0 = light_switch0.user();
      assertNull(light_switch_User0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.light = null;
      Light_switch.Light light_switch_Light0 = light_switch0.light();
      assertNull(light_switch_Light0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.Light light_switch_Light0 = new Light_switch.Light();
      light_switch0.light = light_switch_Light0;
      light_switch_Light0.setBrightness((-1831L));
      assertEquals((-1831L), light_switch_Light0.getBrightness());
      
      Light_switch.Light light_switch_Light1 = light_switch0.light();
      assertEquals((-1831L), light_switch_Light1.getBrightness());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.setIsExecuting(true);
      boolean boolean0 = light_switch0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      boolean boolean0 = light_switch0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      // Undeclared exception!
      try { 
        light_switch0.isStateActive((Light_switch.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Light_switch", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.User light_switch_User0 = new Light_switch.User(light_switch0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.Light light_switch_Light0 = light_switch0.light;
      light_switch_Light0.setBrightness(26L);
      assertEquals(26L, light_switch_Light0.getBrightness());
      
      Light_switch.Light light_switch_Light1 = light_switch0.light();
      assertEquals(26L, light_switch_Light1.getBrightness());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.State light_switch_State0 = Light_switch.State.$NULLSTATE$;
      boolean boolean0 = light_switch0.isStateActive(light_switch_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.State light_switch_State0 = Light_switch.State.MAIN_REGION_ON;
      boolean boolean0 = light_switch0.isStateActive(light_switch_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.State light_switch_State0 = Light_switch.State.MAIN_REGION_OFF;
      boolean boolean0 = light_switch0.isStateActive(light_switch_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      boolean boolean0 = light_switch0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      boolean boolean0 = light_switch0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      // Undeclared exception!
      try { 
        light_switch0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switch", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Light_switch.Light light_switch_Light0 = new Light_switch.Light();
      long long0 = light_switch_Light0.getBrightness();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Light_switch.Light light_switch_Light0 = new Light_switch.Light();
      light_switch_Light0.raiseOff();
      assertEquals(0L, light_switch_Light0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.Light light_switch_Light0 = light_switch0.light();
      light_switch_Light0.raiseOn();
      assertEquals(0L, light_switch_Light0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Light_switch.Light light_switch_Light0 = new Light_switch.Light();
      Observable<Void> observable0 = light_switch_Light0.getOff();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Light_switch.Light light_switch_Light0 = new Light_switch.Light();
      Observable<Void> observable0 = light_switch_Light0.getOn();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.User light_switch_User0 = light_switch0.user;
      // Undeclared exception!
      try { 
        light_switch_User0.raiseOff_button();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switch", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.User light_switch_User0 = light_switch0.user;
      // Undeclared exception!
      try { 
        light_switch_User0.raiseOn_button();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switch", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.User light_switch_User0 = light_switch0.user();
      assertNotNull(light_switch_User0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.setTimerService((ITimerService) null);
      assertFalse(light_switch0.isFinal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      Light_switch.Light light_switch_Light0 = light_switch0.light();
      Light_switch.Light.OperationCallback light_switch_Light_OperationCallback0 = mock(Light_switch.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switch_Light0.setOperationCallback(light_switch_Light_OperationCallback0);
      assertEquals(0L, light_switch_Light0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      // Undeclared exception!
      try { 
        light_switch0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switch", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      ITimerService iTimerService0 = light_switch0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      boolean boolean0 = light_switch0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.setIsExecuting(true);
      light_switch0.exit();
      assertFalse(light_switch0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      light_switch0.exit();
      assertFalse(light_switch0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Light_switch light_switch0 = new Light_switch();
      // Undeclared exception!
      try { 
        light_switch0.raiseTimeEvent(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switch", e);
      }
  }
}
