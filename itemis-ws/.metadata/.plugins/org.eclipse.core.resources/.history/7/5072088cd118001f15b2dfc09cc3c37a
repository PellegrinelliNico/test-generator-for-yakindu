/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 08:25:23 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Hub_PowerManager;
import statechart.Network_Component;
import statechart.SmartFireSystem;
import statechart.SmartHubSystem;
import statechart.SmartLightHUB;
import statechart.SmartMicrowaveSystem;
import statechart.SmartTVSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartHubSystem_ESTest extends SmartHubSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_SmartTV_isON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_SmartTV_isOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_SmartMicrowave_isON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_SmartMicrowave_isOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_HUB_emergency_toggle();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_HUB_AllSystemsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      smartHubSystem_Network0.setSTV_connection(true);
      assertTrue(smartHubSystem_Network0.getSTV_connection());
      
      SmartHubSystem.Network smartHubSystem_Network1 = smartHubSystem0.network();
      assertTrue(smartHubSystem_Network1.getSTV_connection());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setTotalSystemsON((-307L));
      long long0 = smartHubSystem0.getTotalSystemsON();
      assertEquals((-307L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setStateConfVectorPosition(1768L);
      long long0 = smartHubSystem0.getStateConfVectorPosition();
      assertEquals(1768L, long0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getIsExecuting();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      // Undeclared exception!
      try { 
        smartHubSystem0.isStateActive((SmartHubSystem.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB;
      smartHubSystem_SmartLightsHUB0.setOn(true);
      assertTrue(smartHubSystem_SmartLightsHUB0.getOn());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = new SmartHubSystem.HUB(smartHubSystem0);
      smartHubSystem_HUB0.setTotalDevices(0L);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartTVSystem smartTVSystem0 = new SmartTVSystem();
      smartHubSystem0.setSTV(smartTVSystem0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB;
      smartHubSystem_HUB0.setEmergency(false);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_HUB0.getEmergency());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = smartHubSystem0.smartFire();
      smartHubSystem_SmartFire0.setKWh((-1860L));
      assertEquals((-1860L), smartHubSystem_SmartFire0.getKWh());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartHubSystem0.setSL_HUB(smartLightHUB0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power();
      smartHubSystem_Power0.setThreshold((-433L));
      assertEquals((-433L), smartHubSystem_Power0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = smartHubSystem0.smartMicrowave;
      smartHubSystem_SmartMicrowave0.setOn(false);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(10L, smartHubSystem_SmartMicrowave0.getKWh());
      assertFalse(smartHubSystem_SmartMicrowave0.getOn());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = smartHubSystem0.smartTV();
      smartHubSystem_SmartTV0.setOn(true);
      assertTrue(smartHubSystem_SmartTV0.getOn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartHubSystem0.setSF(smartFireSystem0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = new SmartHubSystem.SmartLightsHUB(smartHubSystem0);
      smartHubSystem_SmartLightsHUB0.setKWh(3L);
      assertEquals(3L, smartHubSystem_SmartLightsHUB0.getKWh());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setAllSystemsOn(true);
      assertTrue(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      Hub_PowerManager hub_PowerManager0 = new Hub_PowerManager();
      smartHubSystem0.setPowerManager(hub_PowerManager0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = smartHubSystem0.smartTV();
      smartHubSystem_SmartTV0.setKWh((-1355L));
      assertEquals((-1355L), smartHubSystem_SmartTV0.getKWh());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power;
      smartHubSystem_Power0.setIndex(3992L);
      assertEquals(3992L, smartHubSystem_Power0.getIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SmartHubSystem.Power smartHubSystem_Power0 = new SmartHubSystem.Power();
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.power = smartHubSystem_Power0;
      smartHubSystem0.power();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = new SmartHubSystem.SmartFire(smartHubSystem0);
      smartHubSystem_SmartFire0.setAlarm_isOn(true);
      assertTrue(smartHubSystem_SmartFire0.getAlarm_isOn());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      smartHubSystem_Network0.setSL_connection(true);
      assertTrue(smartHubSystem_Network0.getSL_connection());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power();
      smartHubSystem_Power0.setThresholdReached(true);
      assertTrue(smartHubSystem_Power0.getThresholdReached());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setWiFi((Network_Component) null);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartHubSystem0.setSMW(smartMicrowaveSystem0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SmartHubSystem.Network smartHubSystem_Network0 = new SmartHubSystem.Network();
      smartHubSystem_Network0.setSTV_connection(false);
      assertFalse(smartHubSystem_Network0.getSTV_connection());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power;
      smartHubSystem_Power0.setTotal(694L);
      assertEquals(694L, smartHubSystem_Power0.getTotal());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      smartHubSystem_Network0.setSMW_connection(false);
      assertFalse(smartHubSystem_Network0.getSF_connection());
      assertFalse(smartHubSystem_Network0.getSTV_connection());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_Network0.getSL_connection());
      assertFalse(smartHubSystem_Network0.getSMW_connection());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SmartHubSystem.Network smartHubSystem_Network0 = new SmartHubSystem.Network();
      smartHubSystem_Network0.setSF_connection(true);
      assertTrue(smartHubSystem_Network0.getSF_connection());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = new SmartHubSystem.SmartMicrowave(smartHubSystem0);
      smartHubSystem_SmartMicrowave0.setKWh((-983L));
      assertEquals((-983L), smartHubSystem_SmartMicrowave0.getKWh());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State.$NULLSTATE$;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM4REGION_SMARTMICROWAVE_STATUS_SMARTMICROWAVESTATUS_ON;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM2REGION_SMARTTV_STATUS_SMARTTVSTATUS_ON;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM2REGION_SMARTTV_STATUS;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM3REGION_SMARTLIGHT_STATUS_SMARTLIGHTSTATUS_ON;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      assertFalse(smartHubSystem0.isActive());
      
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SMARTHUBREGION_SMARTHUBSYSTEMSTATUS;
      boolean boolean0 = smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(boolean0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM4REGION_SMARTMICROWAVE_STATUS_SMARTMICROWAVESTATUS_ON_SENSORSTATUS_IDLE;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM3REGION_SMARTLIGHT_STATUS_SMARTLIGHTSTATUS_ON_SENSORSTATUS_ALLLIGHTSOFF;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_HUBWIFIREGION_NO_CONNECTION;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_HUBWIFIREGION_WIFI_CONNECTION;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_POWERMANAGERREGION_IOT_ENERGYSAVERMANAGER_TURNINGOFF_DEVICE_OVERTHRESHOLD_SYSTEM3;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_POWERMANAGERREGION_POWERCONSUMPTIONCALCULATOR;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SMARTHUBREGION_SMARTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM3_SMW_OFF;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SMARTHUBREGION_SMARTHUBSYSTEMSTATUS_HUBSTATUSREGION_EMERGENCY_STATE;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SMARTHUBREGION_SMARTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM1_STV_ON;
      boolean boolean0 = smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(boolean0);
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.State smartHubSystem_State0 = SmartHubSystem.State._SMARTHUBSYSTEM__HUBON_SYSTEM4REGION_SMARTMICROWAVE_STATUS_SMARTMICROWAVESTATUS_ON_SENSORSTATUS_ACTIVE;
      smartHubSystem0.isStateActive(smartHubSystem_State0);
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      boolean boolean0 = smartHubSystem0.nextEvent();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseLocal_SmartLightsHUB_isOFF();
      boolean boolean0 = smartHubSystem0.nextEvent();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      boolean boolean0 = smartHubSystem0.isActive();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      // Undeclared exception!
      try { 
        smartHubSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      boolean boolean0 = smartHubSystem_Network0.getSMW_connection();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
      assertFalse(smartHubSystem_Network0.getSTV_connection());
      assertFalse(smartHubSystem_Network0.getSF_connection());
      assertFalse(smartHubSystem_Network0.getSL_connection());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      boolean boolean0 = smartHubSystem_Network0.getSL_connection();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_Network0.getSF_connection());
      assertFalse(smartHubSystem_Network0.getSMW_connection());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(boolean0);
      assertFalse(smartHubSystem_Network0.getSTV_connection());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SmartHubSystem.Network smartHubSystem_Network0 = new SmartHubSystem.Network();
      boolean boolean0 = smartHubSystem_Network0.getSF_connection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network;
      boolean boolean0 = smartHubSystem_Network0.getSTV_connection();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
      assertFalse(smartHubSystem_Network0.getSMW_connection());
      assertFalse(smartHubSystem_Network0.getSF_connection());
      assertFalse(smartHubSystem_Network0.getSL_connection());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power;
      smartHubSystem_Power0.getTotal();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_Power0.getThresholdReached());
      assertFalse(smartHubSystem0.isActive());
      assertEquals(90L, smartHubSystem_Power0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power();
      smartHubSystem_Power0.getIndex();
      assertEquals(90L, smartHubSystem_Power0.getThreshold());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_Power0.getThresholdReached());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power;
      long long0 = smartHubSystem_Power0.getThreshold();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_Power0.getThresholdReached());
      assertEquals(90L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      // Undeclared exception!
      try { 
        smartHubSystem0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getHubON();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Power smartHubSystem_Power0 = smartHubSystem0.power();
      boolean boolean0 = smartHubSystem_Power0.getThresholdReached();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getSF();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      boolean boolean0 = smartHubSystem0.getAllSystemsOn();
      assertFalse(boolean0);
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getSMW();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      // Undeclared exception!
      try { 
        smartHubSystem0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getPowerManager();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getSTV();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setIsExecuting(false);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.isFinal();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getHubOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getTimerService();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getWiFi();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.setTimerService((ITimerService) null);
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getStateConfVectorPosition();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      // Undeclared exception!
      try { 
        smartHubSystem0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getSL_HUB();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseHubON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      assertFalse(smartHubSystem0.isActive());
      
      smartHubSystem0.exit();
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.getTotalSystemsON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.Network smartHubSystem_Network0 = smartHubSystem0.network();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_Network0.getSTV_connection());
      assertFalse(smartHubSystem_Network0.getSF_connection());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_Network0.getSL_connection());
      assertFalse(smartHubSystem_Network0.getSMW_connection());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      smartHubSystem0.raiseHubOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = new SmartHubSystem.SmartLightsHUB(smartHubSystem0);
      // Undeclared exception!
      try { 
        smartHubSystem_SmartLightsHUB0.raiseLightSwitch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      smartHubSystem_SmartLightsHUB0.getIsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(15L, smartHubSystem_SmartLightsHUB0.getKWh());
      assertFalse(smartHubSystem_SmartLightsHUB0.getOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      boolean boolean0 = smartHubSystem_SmartLightsHUB0.getOn();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
      assertEquals(15L, smartHubSystem_SmartLightsHUB0.getKWh());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      smartHubSystem_SmartLightsHUB0.raiseIsON();
      assertFalse(smartHubSystem_SmartLightsHUB0.getOn());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(15L, smartHubSystem_SmartLightsHUB0.getKWh());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      long long0 = smartHubSystem_SmartLightsHUB0.getKWh();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(15L, long0);
      assertFalse(smartHubSystem_SmartLightsHUB0.getOn());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = new SmartHubSystem.SmartLightsHUB(smartHubSystem0);
      smartHubSystem_SmartLightsHUB0.getIsON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      smartHubSystem_SmartLightsHUB0.raiseIsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(15L, smartHubSystem_SmartLightsHUB0.getKWh());
      assertFalse(smartHubSystem_SmartLightsHUB0.getOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartLightsHUB smartHubSystem_SmartLightsHUB0 = smartHubSystem0.smartLightsHUB();
      // Undeclared exception!
      try { 
        smartHubSystem_SmartLightsHUB0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB;
      smartHubSystem_HUB0.getAllSystemsON();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_HUB0.getEmergency());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = new SmartHubSystem.HUB(smartHubSystem0);
      smartHubSystem_HUB0.getTotalDevices();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB;
      smartHubSystem_HUB0.raiseAllSystemsON();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_HUB0.getEmergency());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB;
      boolean boolean0 = smartHubSystem_HUB0.getEmergency();
      assertFalse(boolean0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = new SmartHubSystem.HUB(smartHubSystem0);
      smartHubSystem_HUB0.raiseAllSystemsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB;
      // Undeclared exception!
      try { 
        smartHubSystem_HUB0.raiseTurnOFFSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = new SmartHubSystem.HUB(smartHubSystem0);
      smartHubSystem_HUB0.getEmergency_toggle();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB();
      smartHubSystem_HUB0.getAllSystemsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_HUB0.getEmergency());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = new SmartHubSystem.HUB(smartHubSystem0);
      // Undeclared exception!
      try { 
        smartHubSystem_HUB0.raiseTurnONSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.HUB smartHubSystem_HUB0 = smartHubSystem0.hUB();
      smartHubSystem_HUB0.raiseEmergency_toggle();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_HUB0.getEmergency());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = smartHubSystem0.smartMicrowave;
      // Undeclared exception!
      try { 
        smartHubSystem_SmartMicrowave0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = smartHubSystem0.smartMicrowave();
      smartHubSystem_SmartMicrowave0.getIsOFF();
      assertFalse(smartHubSystem_SmartMicrowave0.getOn());
      assertEquals(10L, smartHubSystem_SmartMicrowave0.getKWh());
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = smartHubSystem0.smartMicrowave;
      smartHubSystem_SmartMicrowave0.raiseIsON();
      assertFalse(smartHubSystem0.isActive());
      assertEquals(10L, smartHubSystem_SmartMicrowave0.getKWh());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_SmartMicrowave0.getOn());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = new SmartHubSystem.SmartMicrowave(smartHubSystem0);
      smartHubSystem_SmartMicrowave0.getIsON();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = smartHubSystem0.smartMicrowave();
      long long0 = smartHubSystem_SmartMicrowave0.getKWh();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertEquals(10L, long0);
      assertFalse(smartHubSystem_SmartMicrowave0.getOn());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = new SmartHubSystem.SmartMicrowave(smartHubSystem0);
      smartHubSystem_SmartMicrowave0.getOn();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartMicrowave smartHubSystem_SmartMicrowave0 = new SmartHubSystem.SmartMicrowave(smartHubSystem0);
      smartHubSystem_SmartMicrowave0.raiseIsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = new SmartHubSystem.SmartTV(smartHubSystem0);
      smartHubSystem_SmartTV0.raiseIsOFF();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = smartHubSystem0.smartTV();
      smartHubSystem_SmartTV0.getIsOFF();
      assertFalse(smartHubSystem0.isActive());
      assertEquals(50L, smartHubSystem_SmartTV0.getKWh());
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_SmartTV0.getOn());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = new SmartHubSystem.SmartTV(smartHubSystem0);
      smartHubSystem_SmartTV0.raiseIsON();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = smartHubSystem0.smartTV();
      boolean boolean0 = smartHubSystem_SmartTV0.getOn();
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(boolean0);
      assertEquals(50L, smartHubSystem_SmartTV0.getKWh());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = new SmartHubSystem.SmartTV(smartHubSystem0);
      smartHubSystem_SmartTV0.getIsON();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = new SmartHubSystem.SmartTV(smartHubSystem0);
      // Undeclared exception!
      try { 
        smartHubSystem_SmartTV0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartTV smartHubSystem_SmartTV0 = smartHubSystem0.smartTV();
      long long0 = smartHubSystem_SmartTV0.getKWh();
      assertFalse(smartHubSystem0.isActive());
      assertFalse(smartHubSystem_SmartTV0.getOn());
      assertEquals(50L, long0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = smartHubSystem0.smartFire();
      boolean boolean0 = smartHubSystem_SmartFire0.getAlarm_isOn();
      assertFalse(smartHubSystem0.isActive());
      assertEquals(20L, smartHubSystem_SmartFire0.getKWh());
      assertFalse(boolean0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = smartHubSystem0.smartFire;
      long long0 = smartHubSystem_SmartFire0.getKWh();
      assertEquals(20L, long0);
      assertFalse(smartHubSystem0.getAllSystemsOn());
      assertFalse(smartHubSystem_SmartFire0.getAlarm_isOn());
      assertFalse(smartHubSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = new SmartHubSystem.SmartFire(smartHubSystem0);
      // Undeclared exception!
      try { 
        smartHubSystem_SmartFire0.raiseIsOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = smartHubSystem0.smartFire();
      // Undeclared exception!
      try { 
        smartHubSystem_SmartFire0.raiseHUB_reset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SmartHubSystem smartHubSystem0 = new SmartHubSystem();
      SmartHubSystem.SmartFire smartHubSystem_SmartFire0 = smartHubSystem0.smartFire;
      // Undeclared exception!
      try { 
        smartHubSystem_SmartFire0.raiseIsON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartHubSystem", e);
      }
  }
}
