/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:13:12 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TwoWayTrafficControl;
import statechart.___TrafficLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TwoWayTrafficControl_ESTest extends TwoWayTrafficControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseTrafficLightB_released();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseTrafficLightA_released();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseTrafficLightA_blocked();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseTimeEvent(0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightB(___TrafficLight0);
      twoWayTrafficControl0.getTrafficLightB();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightA(___TrafficLight0);
      twoWayTrafficControl0.getTrafficLightA();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setSafePeriod((-1650L));
      long long0 = twoWayTrafficControl0.getSafePeriod();
      assertEquals((-1650L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setIsExecuting(true);
      boolean boolean0 = twoWayTrafficControl0.getIsExecuting();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      boolean boolean0 = twoWayTrafficControl0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      // Undeclared exception!
      try { 
        twoWayTrafficControl0.isStateActive((TwoWayTrafficControl.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TwoWayTrafficControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setTrafficLightB((___TrafficLight) null);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setTrafficLightA((___TrafficLight) null);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setSafePeriod(0L);
      long long0 = twoWayTrafficControl0.getSafePeriod();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightB(___TrafficLight0);
      twoWayTrafficControl0.setTrafficLightB(___TrafficLight0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightA(___TrafficLight0);
      twoWayTrafficControl0.setTrafficLightA(___TrafficLight0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.$NULLSTATE$;
      twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_RELEASE_A;
      twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_B_RELEASED;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_RELEASE_B;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_STANDBY;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OPERATE_R_A_RELEASED;
      twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      TwoWayTrafficControl.State twoWayTrafficControl_State0 = TwoWayTrafficControl.State.MAIN_OFF;
      boolean boolean0 = twoWayTrafficControl0.isStateActive(twoWayTrafficControl_State0);
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      boolean boolean0 = twoWayTrafficControl0.isActive();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      // Undeclared exception!
      try { 
        twoWayTrafficControl0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TwoWayTrafficControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      // Undeclared exception!
      try { 
        twoWayTrafficControl0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TwoWayTrafficControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseOn();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setIsExecuting(true);
      twoWayTrafficControl0.exit();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      boolean boolean0 = twoWayTrafficControl0.isFinal();
      assertFalse(boolean0);
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseTrafficLightB_blocked();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseStandby();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      assertFalse(twoWayTrafficControl0.isActive());
      
      twoWayTrafficControl0.exit();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.getTimerService();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(twoWayTrafficControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.getTrafficLightB();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(twoWayTrafficControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      long long0 = twoWayTrafficControl0.getSafePeriod();
      assertFalse(twoWayTrafficControl0.isActive());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.setTimerService((ITimerService) null);
      assertFalse(twoWayTrafficControl0.isActive());
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseOperate();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(twoWayTrafficControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.raiseOff();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(twoWayTrafficControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      // Undeclared exception!
      try { 
        twoWayTrafficControl0.raiseTimeEvent(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("statechart.TwoWayTrafficControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      twoWayTrafficControl0.getTrafficLightA();
      assertEquals(10L, twoWayTrafficControl0.getSafePeriod());
      assertFalse(twoWayTrafficControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightA(___TrafficLight0);
      ___TrafficLight0.raiseReleased();
      assertTrue(___TrafficLight.oN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightA(___TrafficLight0);
      ___TrafficLight0.raiseBlocked();
      assertFalse(___TrafficLight0.isFinal());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TwoWayTrafficControl twoWayTrafficControl0 = new TwoWayTrafficControl();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      twoWayTrafficControl0.setTrafficLightB(___TrafficLight0);
      ___TrafficLight0.raiseReleased();
      assertFalse(___TrafficLight.oFF);
  }
}
