/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 21:32:20 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Tracker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tracker_ESTest extends Tracker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      tracker0.setIsExecuting(true);
      boolean boolean0 = tracker0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      boolean boolean0 = tracker0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      // Undeclared exception!
      try { 
        tracker0.isStateActive((Tracker.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Tracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.$NULLSTATE$;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_DRIVING;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_IDLE;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_DRIVING_TRACKING_OCCUPY;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_DRIVING_TRACKING_FIRST;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_DRIVING_TRACKING_FREE;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.State tracker_State0 = Tracker.State.MAIN_REGION_PREPARING;
      boolean boolean0 = tracker0.isStateActive(tracker_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      boolean boolean0 = tracker0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      boolean boolean0 = tracker0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      // Undeclared exception!
      try { 
        tracker0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Tracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      ITimerService iTimerService0 = tracker0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      tracker0.raiseCompleted();
      boolean boolean0 = tracker0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      // Undeclared exception!
      try { 
        tracker0.raiseTimeEvent(1613);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Tracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      tracker0.setTimerService((ITimerService) null);
      assertEquals(300L, Tracker.step);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      tracker0.exit();
      assertFalse(tracker0.isFinal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      Tracker.OperationCallback tracker_OperationCallback0 = mock(Tracker.OperationCallback.class, new ViolatedAssumptionAnswer());
      tracker0.setOperationCallback(tracker_OperationCallback0);
      assertFalse(tracker0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      boolean boolean0 = tracker0.isFinal();
      assertFalse(tracker0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      tracker0.setIsExecuting(true);
      tracker0.exit();
      assertFalse(tracker0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      // Undeclared exception!
      try { 
        tracker0.raiseReceived();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Tracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      long long0 = tracker0.getStep();
      assertFalse(tracker0.isActive());
      assertEquals(300L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      long long0 = tracker0.getStart();
      assertFalse(tracker0.isActive());
      assertEquals(1000L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tracker tracker0 = new Tracker();
      // Undeclared exception!
      try { 
        tracker0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Tracker", e);
      }
  }
}
