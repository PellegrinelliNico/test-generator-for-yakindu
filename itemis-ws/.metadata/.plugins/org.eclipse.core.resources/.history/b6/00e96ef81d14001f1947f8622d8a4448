/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:33:55 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart13Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart13Simplified_ESTest extends Statechart13Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.triggerWithoutEvent();
      assertFalse(statechart13Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.raiseTimeEvent((-2191));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        statechart13Simplified0.raiseTimeEvent((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.raiseCarDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.raiseButtonReleased();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.raiseButtonPressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.isStateActive((Statechart13Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        statechart13Simplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseButtonPressed();
      statechart13Simplified0.raiseButtonReleased();
      statechart13Simplified0.raiseButtonReleased();
      assertTrue(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseButtonPressed();
      statechart13Simplified0.raiseCarDetected();
      assertTrue(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseButtonPressed();
      statechart13Simplified0.raiseButtonReleased();
      assertTrue(statechart13Simplified0.isActive());
      
      statechart13Simplified0.exit();
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseButtonPressed();
      assertTrue(statechart13Simplified0.isActive());
      
      statechart13Simplified0.exit();
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      statechart13Simplified0.exit();
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertTrue(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart13Simplified0.isActive());
      
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseTimeEvent(0);
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertTrue(statechart13Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart13Simplified0.isActive());
      
      statechart13Simplified0.enter();
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertTrue(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart13Simplified0.isActive());
      
      statechart13Simplified0.enter();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertTrue(statechart13Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.$NULLSTATE$;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_SMART_MODE;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R2_DUMB_MODE;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE;
      statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      Statechart13Simplified.State statechart13Simplified_State0 = Statechart13Simplified.State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED;
      boolean boolean0 = statechart13Simplified0.isStateActive(statechart13Simplified_State0);
      assertFalse(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      boolean boolean0 = statechart13Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      // Undeclared exception!
      try { 
        statechart13Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart13Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseTimeEvent(0);
      statechart13Simplified0.raiseCarDetected();
      assertFalse(statechart13Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseTimeEvent(0);
      assertTrue(statechart13Simplified0.isActive());
      
      statechart13Simplified0.exit();
      assertFalse(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      boolean boolean0 = statechart13Simplified0.isFinal();
      assertFalse(statechart13Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart13Simplified0.isActive());
      
      statechart13Simplified0.enter();
      statechart13Simplified0.raiseButtonPressed();
      statechart13Simplified0.raiseButtonReleased();
      statechart13Simplified0.raiseButtonPressed();
      assertTrue(statechart13Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Statechart13Simplified statechart13Simplified0 = new Statechart13Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart13Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart13Simplified0.isActive());
      
      statechart13Simplified0.enter();
      boolean boolean0 = statechart13Simplified0.isActive();
      assertTrue(boolean0);
  }
}
