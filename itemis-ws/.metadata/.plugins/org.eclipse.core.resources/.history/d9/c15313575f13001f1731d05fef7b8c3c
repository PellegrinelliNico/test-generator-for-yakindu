/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 21:06:34 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Statechart7;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart7_ESTest extends Statechart7_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonCancel statechart7_ButtonCancel0 = statechart7_0.buttonCancel();
      // Undeclared exception!
      try { 
        statechart7_ButtonCancel0.raiseON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.setIsExecuting(true);
      boolean boolean0 = statechart7_0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      boolean boolean0 = statechart7_0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.setActivate(760L);
      long long0 = statechart7_0.getActivate();
      assertEquals(760L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.buttonMotor = null;
      statechart7_0.buttonMotor();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      // Undeclared exception!
      try { 
        statechart7_0.isStateActive((Statechart7.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonMotor statechart7_ButtonMotor0 = new Statechart7.ButtonMotor(statechart7_0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonValve statechart7_ButtonValve0 = new Statechart7.ButtonValve(statechart7_0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.setActivate((-4L));
      long long0 = statechart7_0.getActivate();
      assertEquals((-4L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.$NULLSTATE$;
      statechart7_0.isStateActive(statechart7_State0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_STATEVALVEON3;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_STATEVALVEON2;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_STATEVALVEON1;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertFalse(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_DECISIONTIMEOPEN;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_DECISIONMOTOR;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertFalse(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_DECISIONVALVE;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertFalse(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_STATEMOTORON;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.State statechart7_State0 = Statechart7.State.MAIN_REGION_DECISIONACTIVATE;
      boolean boolean0 = statechart7_0.isStateActive(statechart7_State0);
      assertFalse(boolean0);
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      boolean boolean0 = statechart7_0.nextEvent();
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      boolean boolean0 = statechart7_0.isActive();
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      // Undeclared exception!
      try { 
        statechart7_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart7.ButtonCancel statechart7_ButtonCancel0 = new Statechart7.ButtonCancel((Statechart7) null);
      // Undeclared exception!
      try { 
        statechart7_ButtonCancel0.raiseON();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart7.Motor statechart7_Motor0 = new Statechart7.Motor();
      Observable<Void> observable0 = statechart7_Motor0.getON();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart7.Motor statechart7_Motor0 = new Statechart7.Motor();
      statechart7_Motor0.raiseOFF();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart7.Motor statechart7_Motor0 = new Statechart7.Motor();
      Observable<Void> observable0 = statechart7_Motor0.getOFF();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart7.Motor statechart7_Motor0 = new Statechart7.Motor();
      statechart7_Motor0.raiseON();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonValve statechart7_ButtonValve0 = statechart7_0.buttonValve;
      // Undeclared exception!
      try { 
        statechart7_ButtonValve0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonMotor statechart7_ButtonMotor0 = statechart7_0.buttonMotor();
      // Undeclared exception!
      try { 
        statechart7_ButtonMotor0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.Valve statechart7_Valve0 = statechart7_0.valve;
      statechart7_Valve0.raiseOPEN();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.Valve statechart7_Valve0 = statechart7_0.valve;
      statechart7_Valve0.raiseCLOSE();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart7.Valve statechart7_Valve0 = new Statechart7.Valve();
      Observable<Void> observable0 = statechart7_Valve0.getCLOSE();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.Valve statechart7_Valve0 = statechart7_0.valve;
      statechart7_Valve0.getOPEN();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonMotor statechart7_ButtonMotor0 = statechart7_0.buttonMotor();
      // Undeclared exception!
      try { 
        statechart7_ButtonMotor0.raiseON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.getTimerService();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      assertFalse(statechart7_0.isActive());
      
      statechart7_0.exit();
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      long long0 = statechart7_0.getActivate();
      assertFalse(statechart7_0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      // Undeclared exception!
      try { 
        statechart7_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.valve();
      assertFalse(statechart7_0.isActive());
      assertEquals(0L, statechart7_0.getActivate());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.motor();
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(statechart7_0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.setTimerService((ITimerService) null);
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(statechart7_0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonValve statechart7_ButtonValve0 = statechart7_0.buttonValve();
      // Undeclared exception!
      try { 
        statechart7_ButtonValve0.raiseON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      statechart7_0.setIsExecuting(true);
      statechart7_0.exit();
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(statechart7_0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      Statechart7.ButtonCancel statechart7_ButtonCancel0 = statechart7_0.buttonCancel();
      // Undeclared exception!
      try { 
        statechart7_ButtonCancel0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      boolean boolean0 = statechart7_0.isFinal();
      assertFalse(statechart7_0.isActive());
      assertEquals(0L, statechart7_0.getActivate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Statechart7 statechart7_0 = new Statechart7();
      // Undeclared exception!
      try { 
        statechart7_0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart7", e);
      }
  }
}
