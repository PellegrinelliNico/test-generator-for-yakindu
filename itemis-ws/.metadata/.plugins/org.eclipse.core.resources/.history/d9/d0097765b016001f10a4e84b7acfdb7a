/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 13:14:57 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.__ReleaseProcess;
import statechart.___TrafficLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class __ReleaseProcess_ESTest extends __ReleaseProcess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.raiseTrafficLight_released();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.raiseTimeEvent(0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      __ReleaseProcess0.setTrafficLight(___TrafficLight0);
      __ReleaseProcess0.getTrafficLight();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setSafePeriod(0L);
      long long0 = __ReleaseProcess0.getSafePeriod();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setSafePeriod((-1283L));
      long long0 = __ReleaseProcess0.getSafePeriod();
      assertEquals((-1283L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setIsExecuting(true);
      boolean boolean0 = __ReleaseProcess0.getIsExecuting();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      boolean boolean0 = __ReleaseProcess0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      // Undeclared exception!
      try { 
        __ReleaseProcess0.isStateActive((__ReleaseProcess.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.__ReleaseProcess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setTrafficLight((___TrafficLight) null);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      __ReleaseProcess0.setTrafficLight(___TrafficLight0);
      __ReleaseProcess0.setTrafficLight(___TrafficLight0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess.State __ReleaseProcess_State0 = __ReleaseProcess.State.$NULLSTATE$;
      boolean boolean0 = __ReleaseProcess0.isStateActive(__ReleaseProcess_State0);
      assertFalse(boolean0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess.State __ReleaseProcess_State0 = __ReleaseProcess.State.PROCESS__FINAL_;
      boolean boolean0 = __ReleaseProcess0.isStateActive(__ReleaseProcess_State0);
      assertFalse(boolean0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess.State __ReleaseProcess_State0 = __ReleaseProcess.State.PROCESS_RELEASED;
      boolean boolean0 = __ReleaseProcess0.isStateActive(__ReleaseProcess_State0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess.State __ReleaseProcess_State0 = __ReleaseProcess.State.PROCESS_START_RELEASE;
      boolean boolean0 = __ReleaseProcess0.isStateActive(__ReleaseProcess_State0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess.State __ReleaseProcess_State0 = __ReleaseProcess.State.PROCESS_SAFE;
      boolean boolean0 = __ReleaseProcess0.isStateActive(__ReleaseProcess_State0);
      assertFalse(boolean0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      boolean boolean0 = __ReleaseProcess0.isFinal();
      assertFalse(boolean0);
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      boolean boolean0 = __ReleaseProcess0.isActive();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      // Undeclared exception!
      try { 
        __ReleaseProcess0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.__ReleaseProcess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      // Undeclared exception!
      try { 
        __ReleaseProcess0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.__ReleaseProcess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      __ReleaseProcess0.setTrafficLight(___TrafficLight0);
      ___TrafficLight0.raiseBlocked();
      assertFalse(___TrafficLight.oFF);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.getFinished();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      assertFalse(__ReleaseProcess0.isActive());
      
      __ReleaseProcess0.exit();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setTimerService((ITimerService) null);
      assertFalse(__ReleaseProcess0.isActive());
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.raiseFinished();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(__ReleaseProcess0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.setIsExecuting(true);
      __ReleaseProcess0.exit();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(__ReleaseProcess0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      long long0 = __ReleaseProcess0.getSafePeriod();
      assertFalse(__ReleaseProcess0.isActive());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.raiseTrafficLight_blocked();
      assertFalse(__ReleaseProcess0.isActive());
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.getTrafficLight();
      assertFalse(__ReleaseProcess0.isActive());
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      // Undeclared exception!
      try { 
        __ReleaseProcess0.raiseTimeEvent((-2332));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2332
         //
         verifyException("statechart.__ReleaseProcess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      __ReleaseProcess0.getTimerService();
      assertEquals(10L, __ReleaseProcess0.getSafePeriod());
      assertFalse(__ReleaseProcess0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      __ReleaseProcess __ReleaseProcess0 = new __ReleaseProcess();
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      __ReleaseProcess0.setTrafficLight(___TrafficLight0);
      ___TrafficLight0.raiseReleased();
      assertTrue(___TrafficLight.oN);
  }
}
