/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 05:49:20 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.___TrafficLight;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ___TrafficLight_ESTest extends ___TrafficLight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseTimeEvent(0);
      assertTrue(___TrafficLight.oN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.lights = null;
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights();
      assertNull(___TrafficLight_Lights0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.setIsExecuting(true);
      boolean boolean0 = ___TrafficLight0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      boolean boolean0 = ___TrafficLight0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.config = null;
      ___TrafficLight.Config ___TrafficLight_Config0 = ___TrafficLight0.config();
      assertNull(___TrafficLight_Config0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Config ___TrafficLight_Config0 = ___TrafficLight0.config();
      ___TrafficLight_Config0.setReleasePeriod((-2617L));
      assertEquals((-2617L), ___TrafficLight_Config0.getReleasePeriod());
      
      ___TrafficLight.Config ___TrafficLight_Config1 = ___TrafficLight0.config();
      assertEquals(2L, ___TrafficLight_Config1.getPreparePeriod());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Config ___TrafficLight_Config0 = new ___TrafficLight.Config();
      ___TrafficLight0.config = ___TrafficLight_Config0;
      ___TrafficLight.Config ___TrafficLight_Config1 = ___TrafficLight0.config();
      assertEquals(0L, ___TrafficLight_Config1.getReleasePeriod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Config ___TrafficLight_Config0 = ___TrafficLight0.config;
      assertEquals(2L, ___TrafficLight_Config0.getPreparePeriod());
      
      ___TrafficLight_Config0.setPreparePeriod((-1L));
      ___TrafficLight.Config ___TrafficLight_Config1 = ___TrafficLight0.config();
      assertEquals(6L, ___TrafficLight_Config1.getReleasePeriod());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      // Undeclared exception!
      try { 
        ___TrafficLight0.isStateActive((___TrafficLight.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.___TrafficLight", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ___TrafficLight.Lights ___TrafficLight_Lights0 = new ___TrafficLight.Lights();
      assertFalse(___TrafficLight_Lights0.getYellow());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      ___TrafficLight_Lights0.setRed(false);
      assertFalse(___TrafficLight_Lights0.getRed());
      assertFalse(___TrafficLight_Lights0.getGreen());
      assertFalse(___TrafficLight_Lights0.getYellow());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      assertFalse(___TrafficLight_Lights0.getYellow());
      
      ___TrafficLight_Lights0.setYellow(true);
      ___TrafficLight.Lights ___TrafficLight_Lights1 = ___TrafficLight0.lights();
      assertFalse(___TrafficLight_Lights1.getRed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      assertFalse(___TrafficLight_Lights0.getGreen());
      
      ___TrafficLight_Lights0.setGreen(true);
      ___TrafficLight.Lights ___TrafficLight_Lights1 = ___TrafficLight0.lights();
      assertFalse(___TrafficLight_Lights1.getRed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.$NULLSTATE$;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_ON;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_ON_MAIN_PREPAREBLOCK;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_ON_MAIN_ATTENTION;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_ON_MAIN_BLOCKED;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_ON_MAIN_RELEASED;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.State ___TrafficLight_State0 = ___TrafficLight.State.MAIN_OFF;
      boolean boolean0 = ___TrafficLight0.isStateActive(___TrafficLight_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      boolean boolean0 = ___TrafficLight0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.setIsExecuting(true);
      ___TrafficLight0.exit();
      assertTrue(___TrafficLight.oN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      // Undeclared exception!
      try { 
        ___TrafficLight0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.___TrafficLight", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      // Undeclared exception!
      try { 
        ___TrafficLight0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.___TrafficLight", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      Observable<Void> observable0 = ___TrafficLight0.getBlocked();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ITimerService iTimerService0 = ___TrafficLight0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.exit();
      assertTrue(___TrafficLight.oN);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      boolean boolean0 = ___TrafficLight0.getOFF();
      assertFalse(___TrafficLight0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseAttention();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseBlock();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.getReleased();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseSwitchOn();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights();
      assertFalse(___TrafficLight_Lights0.getRed());
      
      ___TrafficLight_Lights0.setRed(true);
      ___TrafficLight0.lights();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      // Undeclared exception!
      try { 
        ___TrafficLight0.raiseTimeEvent(1336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1336
         //
         verifyException("statechart.___TrafficLight", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseReleased();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      boolean boolean0 = ___TrafficLight0.isFinal();
      assertFalse(___TrafficLight0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.setTimerService((ITimerService) null);
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseRelease();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      boolean boolean0 = ___TrafficLight0.getON();
      assertFalse(___TrafficLight0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseSwitchOff();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight0.raiseBlocked();
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      long long0 = ___TrafficLight0.config.getReleasePeriod();
      assertEquals(6L, long0);
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Config ___TrafficLight_Config0 = ___TrafficLight0.config;
      long long0 = ___TrafficLight_Config0.getPreparePeriod();
      assertFalse(___TrafficLight0.isActive());
      assertEquals(2L, long0);
      assertEquals(6L, ___TrafficLight_Config0.getReleasePeriod());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      boolean boolean0 = ___TrafficLight_Lights0.getYellow();
      assertFalse(___TrafficLight_Lights0.getRed());
      assertFalse(___TrafficLight_Lights0.getGreen());
      assertFalse(boolean0);
      assertFalse(___TrafficLight0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      boolean boolean0 = ___TrafficLight_Lights0.getRed();
      assertFalse(___TrafficLight0.isActive());
      assertFalse(boolean0);
      assertFalse(___TrafficLight_Lights0.getGreen());
      assertFalse(___TrafficLight_Lights0.getYellow());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ___TrafficLight ___TrafficLight0 = new ___TrafficLight();
      ___TrafficLight.Lights ___TrafficLight_Lights0 = ___TrafficLight0.lights;
      boolean boolean0 = ___TrafficLight_Lights0.getGreen();
      assertFalse(___TrafficLight0.isActive());
      assertFalse(___TrafficLight_Lights0.getRed());
      assertFalse(___TrafficLight_Lights0.getYellow());
      assertFalse(boolean0);
  }
}
