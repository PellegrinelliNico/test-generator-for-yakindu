testclass ExamplStcTest for statechart ExamplStc {
	@Test
	operation test03 () {
	    enter
	    assert is_active
	}

	@Test
	operation test08 () {
	    enter
	    raise Work
	    assert is_active
	}

	@Test
	operation test09 () {
	    enter
	    raise power_on
	    assert is_active
	}

	@Test
	operation test10 () {
	    enter
	    raise used1
	    assert is_active
	}

	@Test
	operation test11 () {
	    enter
	    raise power_on
	    raise analyze
	    assert is_active
	}

	@Test
	operation test12 () {
	    enter
	    raise used1
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test14 () {
	    enter
	    raise power_on
	    raise analyze
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test15 () {
	    enter
	    raise power_on
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test16 () {
	    enter
	    raise used1
	    assert is_active
	    assert active (ExamplStc.out_region.OUT2)
	}

	@Test
	operation test17 () {
	    enter
	    assert is_active
	    assert active (ExamplStc.out_region.OUT1)
	}

	@Test
	operation test18 () {
	    enter
	    assert is_active
	    assert !active (ExamplStc.main_region.On.r_0.Simplified_analyses012)
	}

	@Test
	operation test19 () {
	    enter
	    raise power_on
	    raise analyze
	    assert is_active
	    assert active (ExamplStc.main_region.On)
	}

	@Test
	operation test20 () {
	    enter
	    assert is_active
	    assert !active (ExamplStc.main_region.On)
	}

	@Test
	operation test21 () {
	    enter
	    assert is_active
	    assert active (ExamplStc.main_region.Off_)
	}

	@Test
	operation test41 () {
	    assert !is_active
	    enter
	    assert is_active
	}

	@Test
	operation test44 () {
	    enter
	    raise power_on
	    raise Work
	    raise end_all
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test46 () {
	    enter
	    raise power_on
	    raise Work
	    raise end
	    assert is_active
	}

	@Test
	operation test50 () {
	    enter
	    raise used1
	    raise used2
	    assert is_active
	}

	@Test
	operation test51 () {
	    assert !is_active
	    enter
	    raise power_on
	    raise Work
	    raise end_all
	    raise end
	    assert is_active
	}

	@Test
	operation test52 () {
	    assert !is_active
	    enter
	    raise power_on
	    raise analyze
	    raise end_all
	    assert is_active
	}

}