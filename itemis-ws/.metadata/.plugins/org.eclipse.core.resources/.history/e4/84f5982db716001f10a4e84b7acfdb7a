/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:04:33 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._light;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _light_ESTest extends _light_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setMax_brightness((-2568L));
      long long0 = _light0.getMax_brightness();
      assertEquals((-2568L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setIsExecuting(true);
      boolean boolean0 = _light0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _light _light0 = new _light();
      boolean boolean0 = _light0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setBrightness(587L);
      long long0 = _light0.getBrightness();
      assertEquals(10L, _light0.getMax_brightness());
      assertEquals(587L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setBrightness((-1295L));
      long long0 = _light0.getBrightness();
      assertEquals(10L, _light0.getMax_brightness());
      assertEquals((-1295L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.isStateActive((_light.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._light", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setMax_brightness(0L);
      long long0 = _light0.getMax_brightness();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _light _light0 = new _light();
      _light.State _light_State0 = _light.State.$NULLSTATE$;
      boolean boolean0 = _light0.isStateActive(_light_State0);
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _light _light0 = new _light();
      _light.State _light_State0 = _light.State.MAIN_REGION_ON;
      boolean boolean0 = _light0.isStateActive(_light_State0);
      assertFalse(boolean0);
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _light _light0 = new _light();
      _light.State _light_State0 = _light.State.MAIN_REGION_OFF;
      boolean boolean0 = _light0.isStateActive(_light_State0);
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _light _light0 = new _light();
      boolean boolean0 = _light0.nextEvent();
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _light _light0 = new _light();
      boolean boolean0 = _light0.isActive();
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._light", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._light", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _light _light0 = new _light();
      long long0 = _light0.getMax_brightness();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _light _light0 = new _light();
      long long0 = _light0.getBrightness();
      assertEquals(10L, _light0.getMax_brightness());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _light _light0 = new _light();
      _light0.getTimerService();
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _light _light0 = new _light();
      boolean boolean0 = _light0.isFinal();
      assertFalse(boolean0);
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _light _light0 = new _light();
      _light0.raiseBrightness_changed((-1L));
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.raiseTimeEvent(33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._light", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _light _light0 = new _light();
      assertFalse(_light0.isActive());
      
      _light0.exit();
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setTimerService((ITimerService) null);
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(_light0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._light", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _light _light0 = new _light();
      _light0.getBrightness_changed();
      assertEquals(10L, _light0.getMax_brightness());
      assertFalse(_light0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _light _light0 = new _light();
      _light0.setIsExecuting(true);
      _light0.exit();
      assertFalse(_light0.isActive());
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _light _light0 = new _light();
      // Undeclared exception!
      try { 
        _light0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._light", e);
      }
  }
}
