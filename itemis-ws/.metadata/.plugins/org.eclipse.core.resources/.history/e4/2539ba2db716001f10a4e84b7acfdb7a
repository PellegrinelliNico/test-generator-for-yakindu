/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:00:52 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Actuator_Component_ESTest extends Actuator_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power();
      actuator_Component_Power0.setRequired(1L);
      Actuator_Component.Device actuator_Component_Device0 = actuator_Component0.device;
      actuator_Component_Device0.setActuated(true);
      actuator_Component0.device = actuator_Component_Device0;
      actuator_Component0.power = actuator_Component_Power0;
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_;
      actuator_Component_Power0.setDeviceInput((-1L));
      actuator_Component0.isStateActive(actuator_Component_State0);
      actuator_Component0.nextEvent();
      actuator_Component0.nextEvent();
      actuator_Component0.getTimerService();
      actuator_Component0.setTimerService((ITimerService) null);
      actuator_Component0.setTimerService((ITimerService) null);
      actuator_Component_Power0.setRequired(1L);
      Actuator_Component.State.values();
      actuator_Component0.getIsTriggered();
      Actuator_Component.Device actuator_Component_Device1 = actuator_Component0.device();
      actuator_Component0.setIsTriggered(true);
      actuator_Component0.power.getRequired();
      actuator_Component0.power();
      actuator_Component_Device1.setActuated(true);
      actuator_Component0.exit();
      actuator_Component_Device0.setActuated(true);
      actuator_Component0.getIsTriggered();
      actuator_Component0.getIsExecuting();
      actuator_Component0.isActive();
      actuator_Component0.isActive();
      actuator_Component_Device1.getActuated();
      Actuator_Component.State actuator_Component_State1 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_;
      actuator_Component0.isStateActive(actuator_Component_State1);
      actuator_Component0.isStateActive(actuator_Component_State0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Actuator_Component.Device actuator_Component_Device0 = new Actuator_Component.Device();
      actuator_Component_Device0.setActuated(false);
      actuator_Component_Device0.setActuated(false);
      actuator_Component_Device0.setActuated(true);
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.setIsExecuting(false);
      actuator_Component0.getTimerService();
      actuator_Component0.setTimerService((ITimerService) null);
      actuator_Component_Device0.setActuated(true);
      actuator_Component0.setIsTriggered(false);
      actuator_Component_Device0.setActuated(false);
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power;
      actuator_Component0.exit();
      actuator_Component_Power0.setRequired(265L);
      actuator_Component_Device0.setActuated(false);
      actuator_Component_Power0.getRequired();
      actuator_Component_Power0.setRequired(214L);
      actuator_Component0.isActive();
      actuator_Component_Power0.getDeviceInput();
      actuator_Component_Power0.setDeviceInput(265L);
      actuator_Component0.power();
      actuator_Component_Device0.setActuated(true);
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_;
      actuator_Component0.isStateActive(actuator_Component_State0);
      actuator_Component0.getTimerService();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.setIsExecuting(true);
      Actuator_Component.Power actuator_Component_Power0 = new Actuator_Component.Power();
      actuator_Component0.power = actuator_Component_Power0;
      actuator_Component0.exit();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_;
      actuator_Component0.isStateActive(actuator_Component_State0);
      actuator_Component_Power0.setRequired(388);
      // Undeclared exception!
      try { 
        actuator_Component0.raiseTimeEvent(388);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }
}
