/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:00:03 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Controller;
import statechart._led;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Controller controller0 = new Controller();
      _led _led0 = new _led();
      _led0.enter();
      controller0.setRed(_led0);
      _led _led1 = controller0.getRed();
      assertFalse(_led1.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      boolean boolean0 = controller0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Controller controller0 = new Controller();
      boolean boolean0 = controller0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Controller controller0 = new Controller();
      _led _led0 = new _led();
      _led0.enter();
      controller0.setGreen(_led0);
      _led _led1 = controller0.getGreen();
      assertTrue(_led1.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Controller controller0 = new Controller();
      // Undeclared exception!
      try { 
        controller0.isStateActive((Controller.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Controller controller0 = new Controller();
      _led _led0 = new _led();
      controller0.setRed(_led0);
      _led _led1 = controller0.getRed();
      assertFalse(_led1.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Controller controller0 = new Controller();
      _led _led0 = new _led();
      controller0.setGreen(_led0);
      _led _led1 = controller0.getGreen();
      assertSame(_led1, _led0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Controller controller0 = new Controller();
      Controller.State controller_State0 = Controller.State.$NULLSTATE$;
      boolean boolean0 = controller0.isStateActive(controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Controller controller0 = new Controller();
      Controller.State controller_State0 = Controller.State.MAIN_REGION_GREEN_ON;
      boolean boolean0 = controller0.isStateActive(controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Controller controller0 = new Controller();
      Controller.State controller_State0 = Controller.State.MAIN_REGION_RED_ON;
      boolean boolean0 = controller0.isStateActive(controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Controller controller0 = new Controller();
      boolean boolean0 = controller0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Controller controller0 = new Controller();
      boolean boolean0 = controller0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Controller controller0 = new Controller();
      // Undeclared exception!
      try { 
        controller0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Controller controller0 = new Controller();
      // Undeclared exception!
      try { 
        controller0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Controller controller0 = new Controller();
      _led _led0 = controller0.getRed();
      assertNull(_led0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.setTimerService((ITimerService) null);
      assertFalse(controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.setIsExecuting(true);
      controller0.exit();
      assertFalse(controller0.isFinal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Controller controller0 = new Controller();
      // Undeclared exception!
      try { 
        controller0.raiseTimeEvent(698);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.exit();
      assertFalse(controller0.isFinal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.getGreen();
      assertFalse(controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Controller controller0 = new Controller();
      boolean boolean0 = controller0.isFinal();
      assertFalse(controller0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Controller controller0 = new Controller();
      controller0.getTimerService();
      assertFalse(controller0.isActive());
  }
}
