/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 19:23:16 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Base;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base_ESTest extends Base_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base base0 = new Base();
      base0.setIsExecuting(true);
      boolean boolean0 = base0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base base0 = new Base();
      boolean boolean0 = base0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.isStateActive((Base.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.getLocal_setLEDValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Local_setLED is not raised!
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base base0 = new Base();
      Base.State base_State0 = Base.State.MAIN_REGION_YELLOW;
      boolean boolean0 = base0.isStateActive(base_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base base0 = new Base();
      Base.State base_State0 = Base.State.MAIN_REGION_GREEN;
      boolean boolean0 = base0.isStateActive(base_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base base0 = new Base();
      Base.State base_State0 = Base.State.$NULLSTATE$;
      boolean boolean0 = base0.isStateActive(base_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base base0 = new Base();
      Base.State base_State0 = Base.State.MAIN_REGION_RED;
      boolean boolean0 = base0.isStateActive(base_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base base0 = new Base();
      boolean boolean0 = base0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseSetLED(false);
      boolean boolean0 = base0.nextEvent();
      boolean boolean1 = base0.getLocal_setLEDValue();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base base0 = new Base();
      boolean boolean0 = base0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseSetLED(true);
      boolean boolean0 = base0.nextEvent();
      assertTrue(boolean0);
      
      boolean boolean1 = base0.getLocal_setLEDValue();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseSetRed(true);
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.raiseCarDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.raiseButtonPressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseSetYellow(false);
      assertFalse(base0.isFinal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base base0 = new Base();
      base0.setTimerService((ITimerService) null);
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base base0 = new Base();
      Observable<Boolean> observable0 = base0.getSetRed();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base base0 = new Base();
      ITimerService iTimerService0 = base0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base base0 = new Base();
      Observable<Boolean> observable0 = base0.getSetYellow();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base base0 = new Base();
      Observable<Boolean> observable0 = base0.getSetGreen();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base base0 = new Base();
      boolean boolean0 = base0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base base0 = new Base();
      base0.exit();
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base base0 = new Base();
      base0.getSetLED();
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.raiseButtonReleased();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base base0 = new Base();
      base0.setIsExecuting(true);
      base0.exit();
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseLocal_setLED(true);
      assertFalse(base0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base base0 = new Base();
      // Undeclared exception!
      try { 
        base0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base base0 = new Base();
      base0.raiseSetGreen(true);
      assertFalse(base0.isActive());
  }
}
