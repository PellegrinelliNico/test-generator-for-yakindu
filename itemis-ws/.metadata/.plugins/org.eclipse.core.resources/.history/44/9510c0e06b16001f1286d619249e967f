/*
 * This file was automatically generated by EvoSuite
 * Fri May 17 07:48:12 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Power_ComponentSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Power_ComponentSimplified_ESTest extends Power_ComponentSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.isStateActive((Power_ComponentSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.isActive();
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.enter();
      ITimerService iTimerService1 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.raiseOff();
      power_ComponentSimplified0.raiseOff();
      power_ComponentSimplified0.setTimerService(iTimerService1);
      power_ComponentSimplified0.raiseOff();
      power_ComponentSimplified0.raiseOff();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State.$NULLSTATE$;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      int int0 = (-1);
      power_ComponentSimplified0.raiseOn();
      Power_ComponentSimplified.State power_ComponentSimplified_State1 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___NOPOWERCONSUMED_;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State1);
      power_ComponentSimplified0.exit();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent(4838);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4838
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.enter();
      power_ComponentSimplified0.raiseOn();
      power_ComponentSimplified0.raiseOff();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State.$NULLSTATE$;
      ITimerService iTimerService1 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService1);
      power_ComponentSimplified0.raiseOff();
      ITimerService iTimerService2 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService2);
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      power_ComponentSimplified0.raiseOn();
      power_ComponentSimplified0.isActive();
      power_ComponentSimplified0.triggerWithoutEvent();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent(3576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3576
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      boolean boolean0 = power_ComponentSimplified0.isFinal();
      assertFalse(power_ComponentSimplified0.isActive());
      assertFalse(boolean0);
      
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___NOPOWERCONSUMED_;
      boolean boolean1 = power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Power_ComponentSimplified.State.values();
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      assertFalse(power_ComponentSimplified0.isActive());
      
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.exit();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.enter();
      power_ComponentSimplified0.triggerWithoutEvent();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT;
      boolean boolean0 = power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      assertTrue(power_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State.$NULLSTATE$;
      boolean boolean0 = power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      assertFalse(boolean0);
      assertFalse(power_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      power_ComponentSimplified0.setTimerService((ITimerService) null);
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State.$NULLSTATE$;
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.raiseOff();
      power_ComponentSimplified0.exit();
      int int0 = 804;
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent(804);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 804
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.device();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      // Undeclared exception!
      try { 
        Power_ComponentSimplified.State.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___CONSUMING_POWER_;
      boolean boolean0 = power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      assertFalse(power_ComponentSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Power_ComponentSimplified.Device power_ComponentSimplified_Device0 = new Power_ComponentSimplified.Device();
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      power_ComponentSimplified0.device();
      assertFalse(power_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.enter();
      power_ComponentSimplified0.raiseOn();
      power_ComponentSimplified0.raiseOff();
      power_ComponentSimplified0.raiseOn();
      assertTrue(power_ComponentSimplified0.isActive());
      
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.raiseTimeEvent(0);
      ITimerService iTimerService1 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService1);
      Power_ComponentSimplified.State.values();
      Power_ComponentSimplified.State.values();
      power_ComponentSimplified0.exit();
      ITimerService iTimerService2 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService2);
      assertFalse(power_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.triggerWithoutEvent();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent((-2612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2612
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Power_ComponentSimplified.Device power_ComponentSimplified_Device0 = new Power_ComponentSimplified.Device();
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.enter();
      power_ComponentSimplified0.enter();
      assertTrue(power_ComponentSimplified0.isActive());
      
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.triggerWithoutEvent();
      power_ComponentSimplified0.triggerWithoutEvent();
      boolean boolean0 = power_ComponentSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      power_ComponentSimplified0.exit();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___NOPOWERCONSUMED_;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.isActive();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      power_ComponentSimplified0.exit();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___CONSUMING_POWER_;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      power_ComponentSimplified0.setTimerService(iTimerService0);
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.raiseOff();
      Power_ComponentSimplified.State power_ComponentSimplified_State1 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT;
      power_ComponentSimplified0.device();
      power_ComponentSimplified0.raiseOn();
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State1);
      power_ComponentSimplified0.enter();
      power_ComponentSimplified0.device();
      power_ComponentSimplified0.raiseOn();
      Power_ComponentSimplified.State power_ComponentSimplified_State2 = Power_ComponentSimplified.State.$NULLSTATE$;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State2);
      power_ComponentSimplified0.isActive();
      ITimerService iTimerService1 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.exit();
      power_ComponentSimplified0.isFinal();
      assertFalse(power_ComponentSimplified0.isActive());
      
      power_ComponentSimplified0.enter();
      assertTrue(power_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      // Undeclared exception!
      try { 
        power_ComponentSimplified0.raiseTimeEvent((-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Power_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Power_ComponentSimplified power_ComponentSimplified0 = new Power_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      power_ComponentSimplified0.setTimerService(iTimerService0);
      assertFalse(power_ComponentSimplified0.isActive());
      
      power_ComponentSimplified0.enter();
      Power_ComponentSimplified.State power_ComponentSimplified_State0 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT__CALCULATING_POWER_CONSUMPTION___NOPOWERCONSUMED_;
      power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State0);
      power_ComponentSimplified0.triggerWithoutEvent();
      Power_ComponentSimplified.State power_ComponentSimplified_State1 = Power_ComponentSimplified.State._POWER_COMPONENT__POWER_COMPONENT;
      boolean boolean0 = power_ComponentSimplified0.isStateActive(power_ComponentSimplified_State1);
      assertTrue(power_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }
}
