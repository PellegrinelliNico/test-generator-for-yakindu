/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 11 14:20:15 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.SimpleTrafficLightSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTrafficLightSimplified_ESTest extends SimpleTrafficLightSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.raiseTimeEvent(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.raiseTimeEvent((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.raiseBreak();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.isStateActive((SimpleTrafficLightSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified0.triggerWithoutEvent();
      assertTrue(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTrafficLightSimplified.Lights simpleTrafficLightSimplified_Lights0 = new SimpleTrafficLightSimplified.Lights();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      SimpleTrafficLightSimplified.Pedestrian simpleTrafficLightSimplified_Pedestrian0 = new SimpleTrafficLightSimplified.Pedestrian(simpleTrafficLightSimplified0);
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified_Pedestrian0.raisePushButton();
      assertTrue(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      simpleTrafficLightSimplified0.exit();
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      simpleTrafficLightSimplified0.enter();
      assertTrue(simpleTrafficLightSimplified0.isActive());
      
      simpleTrafficLightSimplified0.exit();
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified0.raiseBreak();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_NOT_WORKING;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertTrue(simpleTrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      simpleTrafficLightSimplified0.enter();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING_R1_RED;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertTrue(simpleTrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      simpleTrafficLightSimplified0.enter();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertTrue(simpleTrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.$NULLSTATE$;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_NOT_WORKING;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING_R1_GREEN;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING_R1_RED;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.State simpleTrafficLightSimplified_State0 = SimpleTrafficLightSimplified.State.MAIN_REGION_WORKING_R1_YELLOW;
      boolean boolean0 = simpleTrafficLightSimplified0.isStateActive(simpleTrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      SimpleTrafficLightSimplified.Pedestrian simpleTrafficLightSimplified_Pedestrian0 = new SimpleTrafficLightSimplified.Pedestrian(simpleTrafficLightSimplified0);
      simpleTrafficLightSimplified_Pedestrian0.raisePushButton();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      boolean boolean0 = simpleTrafficLightSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      // Undeclared exception!
      try { 
        simpleTrafficLightSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SimpleTrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      simpleTrafficLightSimplified0.lights();
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      assertFalse(simpleTrafficLightSimplified0.isActive());
      
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified0.raiseBreak();
      simpleTrafficLightSimplified0.raiseBreak();
      assertTrue(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      simpleTrafficLightSimplified0.pedestrian();
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      boolean boolean0 = simpleTrafficLightSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      assertFalse(simpleTrafficLightSimplified0.isActive());
      
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified0.raiseTimeEvent(1);
      simpleTrafficLightSimplified0.raiseBreak();
      assertTrue(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      simpleTrafficLightSimplified0.enter();
      simpleTrafficLightSimplified0.raiseBreak();
      assertTrue(simpleTrafficLightSimplified0.isActive());
      
      simpleTrafficLightSimplified0.exit();
      assertFalse(simpleTrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTrafficLightSimplified simpleTrafficLightSimplified0 = new SimpleTrafficLightSimplified();
      SimpleTrafficLightSimplified.OperationCallback simpleTrafficLightSimplified_OperationCallback0 = mock(SimpleTrafficLightSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setOperationCallback(simpleTrafficLightSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      simpleTrafficLightSimplified0.setTimerService(iTimerService0);
      assertFalse(simpleTrafficLightSimplified0.isActive());
      
      simpleTrafficLightSimplified0.enter();
      boolean boolean0 = simpleTrafficLightSimplified0.isActive();
      assertTrue(boolean0);
  }
}
