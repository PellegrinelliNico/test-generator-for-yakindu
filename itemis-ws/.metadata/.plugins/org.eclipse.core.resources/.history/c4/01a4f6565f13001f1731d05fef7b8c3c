/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 20:31:49 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.SignalControllerSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignalControllerSimplified_ESTest extends SignalControllerSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.triggerWithoutEvent();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.raiseTimeEvent(0);
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.raiseFailed();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.raiseExtend();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.raiseEnable();
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.raiseDisable();
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.raiseCompletedShunt();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.raiseCompletedMain();
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      signalControllerSimplified0.raiseCompletedDistant();
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.raiseClear();
      assertFalse(signalControllerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.isStateActive((SignalControllerSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      signalControllerSimplified0.exit();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.enter();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
      signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertTrue(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.$NULLSTATE$;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_FAILED;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.State signalControllerSimplified_State0 = SignalControllerSimplified.State.MAIN_REGION_WAIT_FOR_START;
      boolean boolean0 = signalControllerSimplified0.isStateActive(signalControllerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseCompletedMain();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.raiseStart();
      assertFalse(signalControllerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      boolean boolean0 = signalControllerSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      assertFalse(signalControllerSimplified0.isActive());
      
      signalControllerSimplified0.enter();
      boolean boolean0 = signalControllerSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        signalControllerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseEnable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      boolean boolean0 = signalControllerSimplified0.isFinal();
      assertFalse(signalControllerSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseCompletedDistant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseCompletedShunt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseExtend();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      // Undeclared exception!
      try { 
        signalControllerSimplified0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalControllerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SignalControllerSimplified signalControllerSimplified0 = new SignalControllerSimplified();
      SignalControllerSimplified.OperationCallback signalControllerSimplified_OperationCallback0 = mock(SignalControllerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setOperationCallback(signalControllerSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      signalControllerSimplified0.setTimerService(iTimerService0);
      signalControllerSimplified0.enter();
      assertTrue(signalControllerSimplified0.isActive());
      
      signalControllerSimplified0.exit();
      assertFalse(signalControllerSimplified0.isActive());
  }
}
