/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:34:21 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Parent;
import statechart._Child;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parent_ESTest extends Parent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.raiseC_myOutEvent();
      assertFalse(parent0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.setIsExecuting(true);
      parent0.raiseMyEvent();
      boolean boolean0 = parent0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parent parent0 = new Parent();
      boolean boolean0 = parent0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.setIsExecuting(true);
      boolean boolean0 = parent0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parent parent0 = new Parent();
      boolean boolean0 = parent0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      _Child0.enter();
      parent0.setC(_Child0);
      _Child _Child1 = parent0.getC();
      assertSame(_Child1, _Child0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      _Child _Child1 = parent0.getC();
      assertSame(_Child1, _Child0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parent parent0 = new Parent();
      // Undeclared exception!
      try { 
        parent0.isStateActive((Parent.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Parent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parent parent0 = new Parent();
      // Undeclared exception!
      try { 
        parent0.enter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Parent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.setC((_Child) null);
      assertFalse(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = parent0.getC();
      assertNull(_Child0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      parent0.setC(_Child0);
      parent0.enter();
      parent0.raiseMyEvent();
      parent0.triggerWithoutEvent();
      assertTrue(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      parent0.enter();
      parent0.triggerWithoutEvent();
      assertTrue(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      parent0.setC(_Child0);
      parent0.enter();
      parent0.raiseMyEvent();
      assertTrue(parent0.isActive());
      
      parent0.exit();
      assertFalse(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      parent0.enter();
      assertTrue(parent0.isActive());
      
      parent0.exit();
      assertFalse(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      parent0.setC(_Child0);
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      parent0.setC(_Child0);
      parent0.enter();
      parent0.raiseMyEvent();
      Parent.State parent_State0 = Parent.State.MAIN_REGION_STATEB;
      boolean boolean0 = parent0.isStateActive(parent_State0);
      assertTrue(parent0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parent parent0 = new Parent();
      Parent.State parent_State0 = Parent.State.MAIN_REGION_STATEA;
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      parent0.enter();
      boolean boolean0 = parent0.isStateActive(parent_State0);
      assertTrue(parent0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parent parent0 = new Parent();
      Parent.State parent_State0 = Parent.State.$NULLSTATE$;
      boolean boolean0 = parent0.isStateActive(parent_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parent parent0 = new Parent();
      Parent.State parent_State0 = Parent.State.MAIN_REGION_STATEB;
      boolean boolean0 = parent0.isStateActive(parent_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parent parent0 = new Parent();
      Parent.State parent_State0 = Parent.State.MAIN_REGION_STATEA;
      boolean boolean0 = parent0.isStateActive(parent_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      parent0.enter();
      boolean boolean0 = parent0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parent parent0 = new Parent();
      boolean boolean0 = parent0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.setIsExecuting(true);
      parent0.exit();
      assertFalse(parent0.isFinal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.exit();
      assertFalse(parent0.isFinal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parent parent0 = new Parent();
      parent0.setIsExecuting(true);
      parent0.enter();
      assertFalse(parent0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parent parent0 = new Parent();
      boolean boolean0 = parent0.isFinal();
      assertFalse(parent0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parent parent0 = new Parent();
      _Child _Child0 = new _Child();
      parent0.setC(_Child0);
      assertFalse(parent0.isActive());
      
      parent0.enter();
      parent0.raiseMyEvent();
      assertTrue(parent0.isActive());
  }
}
