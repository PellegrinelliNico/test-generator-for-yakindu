/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:53:17 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.BlinkyStateMachineSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlinkyStateMachineSimplified_ESTest extends BlinkyStateMachineSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      blinkyStateMachineSimplified0.raiseTimeEvent(1);
      assertFalse(blinkyStateMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.isStateActive((BlinkyStateMachineSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      blinkyStateMachineSimplified0.exit();
      assertFalse(blinkyStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.enter();
      assertTrue(blinkyStateMachineSimplified0.isActive());
      
      blinkyStateMachineSimplified0.exit();
      assertFalse(blinkyStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.enter();
      blinkyStateMachineSimplified0.runCycle();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.MAIN_REGION_RED_LED_ON;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertTrue(blinkyStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.enter();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.MAIN_REGION_INITIALIZATION;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertTrue(blinkyStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.$NULLSTATE$;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.MAIN_REGION_RED_LED_ON;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.MAIN_REGION_RED_LED_OFF;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.State blinkyStateMachineSimplified_State0 = BlinkyStateMachineSimplified.State.MAIN_REGION_INITIALIZATION;
      boolean boolean0 = blinkyStateMachineSimplified0.isStateActive(blinkyStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      blinkyStateMachineSimplified0.enter();
      blinkyStateMachineSimplified0.runCycle();
      blinkyStateMachineSimplified0.runCycle();
      assertTrue(blinkyStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      blinkyStateMachineSimplified0.runCycle();
      assertFalse(blinkyStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      boolean boolean0 = blinkyStateMachineSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal operation callback must be set.
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal operation callback must be set.
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      // Undeclared exception!
      try { 
        blinkyStateMachineSimplified0.raiseTimeEvent((-1021));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1021
         //
         verifyException("statechart.BlinkyStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      boolean boolean0 = blinkyStateMachineSimplified0.isFinal();
      assertFalse(blinkyStateMachineSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      blinkyStateMachineSimplified0.enter();
      blinkyStateMachineSimplified0.runCycle();
      assertTrue(blinkyStateMachineSimplified0.isActive());
      
      blinkyStateMachineSimplified0.exit();
      assertFalse(blinkyStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlinkyStateMachineSimplified blinkyStateMachineSimplified0 = new BlinkyStateMachineSimplified();
      BlinkyStateMachineSimplified.InternalOperationCallback blinkyStateMachineSimplified_InternalOperationCallback0 = mock(BlinkyStateMachineSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      blinkyStateMachineSimplified0.setTimerService(iTimerService0);
      blinkyStateMachineSimplified0.setInternalOperationCallback(blinkyStateMachineSimplified_InternalOperationCallback0);
      assertFalse(blinkyStateMachineSimplified0.isActive());
      
      blinkyStateMachineSimplified0.enter();
      boolean boolean0 = blinkyStateMachineSimplified0.isActive();
      assertTrue(boolean0);
  }
}
