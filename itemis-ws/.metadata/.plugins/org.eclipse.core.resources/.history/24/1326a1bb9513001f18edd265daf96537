/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 12:57:32 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Controller_ComponentSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ComponentSimplified_ESTest extends Controller_ComponentSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      Controller_ComponentSimplified.Actuator controller_ComponentSimplified_Actuator0 = new Controller_ComponentSimplified.Actuator(controller_ComponentSimplified0);
      controller_ComponentSimplified_Actuator0.raiseTrigger();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.triggerWithoutEvent();
      assertFalse(controller_ComponentSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.raiseTimeEvent(3152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3152
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.isStateActive((Controller_ComponentSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Controller_ComponentSimplified.Sensors controller_ComponentSimplified_Sensors0 = new Controller_ComponentSimplified.Sensors();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseOff();
      controller_ComponentSimplified0.raiseOff();
      assertTrue(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseOn();
      assertTrue(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseTimeEvent(0);
      assertTrue(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseOff();
      assertTrue(controller_ComponentSimplified0.isActive());
      
      controller_ComponentSimplified0.exit();
      assertFalse(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      assertTrue(controller_ComponentSimplified0.isActive());
      
      controller_ComponentSimplified0.exit();
      assertFalse(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseOff();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___OFF_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertTrue(controller_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON___CONTROLLER_RECEIVING_AND_SENDING_SIGNALS___READING_SENSOR_DATA_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertTrue(controller_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      controller_ComponentSimplified0.enter();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertTrue(controller_ComponentSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State.$NULLSTATE$;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___OFF_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON___CONTROLLER_RECEIVING_AND_SENDING_SIGNALS___TRIGGER_ACTUATOR_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON___CONTROLLER_RECEIVING_AND_SENDING_SIGNALS___CONTROLLER_PROCESSING_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      Controller_ComponentSimplified.State controller_ComponentSimplified_State0 = Controller_ComponentSimplified.State._CONTROLLER_COMPONENT___CONTROLLER_ISON___CONTROLLER_RECEIVING_AND_SENDING_SIGNALS___READING_SENSOR_DATA_;
      boolean boolean0 = controller_ComponentSimplified0.isStateActive(controller_ComponentSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      boolean boolean0 = controller_ComponentSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      controller_ComponentSimplified0.exit();
      assertFalse(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      controller_ComponentSimplified0.actuator();
      assertFalse(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      controller_ComponentSimplified0.sensors();
      assertFalse(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      boolean boolean0 = controller_ComponentSimplified0.isFinal();
      assertFalse(controller_ComponentSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      assertFalse(controller_ComponentSimplified0.isActive());
      
      controller_ComponentSimplified0.enter();
      controller_ComponentSimplified0.raiseOff();
      controller_ComponentSimplified0.raiseOn();
      assertTrue(controller_ComponentSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.raiseTimeEvent(3152);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      // Undeclared exception!
      try { 
        controller_ComponentSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Controller_ComponentSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Controller_ComponentSimplified controller_ComponentSimplified0 = new Controller_ComponentSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      controller_ComponentSimplified0.setTimerService(iTimerService0);
      assertFalse(controller_ComponentSimplified0.isActive());
      
      controller_ComponentSimplified0.enter();
      boolean boolean0 = controller_ComponentSimplified0.isActive();
      assertTrue(boolean0);
  }
}
