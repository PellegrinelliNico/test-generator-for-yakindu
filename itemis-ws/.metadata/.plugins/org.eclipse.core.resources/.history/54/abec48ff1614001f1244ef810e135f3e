/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:09:24 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.OperatingModeSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperatingModeSimplified_ESTest extends OperatingModeSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.raiseStarted();
      assertFalse(operatingModeSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.raiseOperate();
      assertFalse(operatingModeSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.raiseInit();
      assertFalse(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.raiseClear();
      assertFalse(operatingModeSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseTimeEvent(245);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseEdit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.isStateActive((OperatingModeSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = new OperatingModeSimplified.Can(operatingModeSimplified0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified0.raiseFailed();
      operatingModeSimplified0.triggerWithoutEvent();
      assertTrue(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified_Can0.raiseConnected();
      assertTrue(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified0.triggerWithoutEvent();
      assertTrue(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      operatingModeSimplified0.exit();
      assertFalse(operatingModeSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified0.raiseFailed();
      assertTrue(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.exit();
      assertFalse(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      assertTrue(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.exit();
      assertFalse(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      assertTrue(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.exit();
      assertFalse(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      assertFalse(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified0.raiseFailed();
      operatingModeSimplified0.raiseEdit();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_EDITING;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertTrue(operatingModeSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      assertFalse(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.enter();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_PREPARE_BUS;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.$NULLSTATE$;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_OPERATING;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_FAILED;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_EDITING;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      OperatingModeSimplified.State operatingModeSimplified_State0 = OperatingModeSimplified.State.MAIN_REGION_PREPARE_BUS;
      boolean boolean0 = operatingModeSimplified0.isStateActive(operatingModeSimplified_State0);
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      // Undeclared exception!
      try { 
        operatingModeSimplified_Can0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseTimeEvent(5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Can must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified0.raiseFailed();
      operatingModeSimplified0.raiseEdit();
      operatingModeSimplified0.triggerWithoutEvent();
      assertTrue(operatingModeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      assertFalse(operatingModeSimplified0.isActive());
      
      operatingModeSimplified0.enter();
      boolean boolean0 = operatingModeSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      boolean boolean0 = operatingModeSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      // Undeclared exception!
      try { 
        operatingModeSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        operatingModeSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Can must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseStarted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      boolean boolean0 = operatingModeSimplified0.isFinal();
      assertFalse(operatingModeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      // Undeclared exception!
      try { 
        operatingModeSimplified0.raiseInit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingModeSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OperatingModeSimplified operatingModeSimplified0 = new OperatingModeSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setTimerService(iTimerService0);
      OperatingModeSimplified.OperationCallback operatingModeSimplified_OperationCallback0 = mock(OperatingModeSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified0.setOperationCallback(operatingModeSimplified_OperationCallback0);
      OperatingModeSimplified.Can operatingModeSimplified_Can0 = operatingModeSimplified0.can();
      OperatingModeSimplified.Can.OperationCallback operatingModeSimplified_Can_OperationCallback0 = mock(OperatingModeSimplified.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingModeSimplified_Can0.setOperationCallback(operatingModeSimplified_Can_OperationCallback0);
      operatingModeSimplified0.enter();
      operatingModeSimplified_Can0.raiseConnected();
      operatingModeSimplified0.raiseFailed();
      operatingModeSimplified0.raiseEdit();
      operatingModeSimplified0.exit();
      assertFalse(operatingModeSimplified0.isFinal());
  }
}
