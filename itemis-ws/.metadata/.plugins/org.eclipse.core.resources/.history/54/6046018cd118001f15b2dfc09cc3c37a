/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:31:07 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Environment;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Environment_ESTest extends Environment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setNumericalOutput((-866L));
      assertEquals((-866L), environment_Simulator0.getNumericalOutput());
      
      Environment.Simulator environment_Simulator1 = environment0.simulator();
      assertFalse(environment_Simulator1.getGenerating());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setBooleanOutput(true);
      assertTrue(environment_Simulator0.getBooleanOutput());
      
      Environment.Simulator environment_Simulator1 = environment0.simulator();
      assertFalse(environment_Simulator1.getProcessing());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor;
      environment_Sensor0.setNumericalOutput((-1414L));
      assertEquals((-1414L), environment_Sensor0.getNumericalOutput());
      
      Environment.Sensor environment_Sensor1 = environment0.sensor();
      assertFalse(environment_Sensor1.getLaunchConnection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.setIsExecuting(true);
      boolean boolean0 = environment0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment();
      boolean boolean0 = environment0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Generator environment_Generator0 = new Environment.Generator();
      environment0.generator = environment_Generator0;
      environment_Generator0.setRandom_val((-1941L));
      assertEquals((-1941L), environment_Generator0.getRandom_val());
      
      Environment.Generator environment_Generator1 = environment0.generator();
      assertEquals((-1941L), environment_Generator1.getRandom_val());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.isStateActive((Environment.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Time environment_Time0 = environment0.time();
      assertEquals(5L, environment_Time0.getProcess());
      
      environment_Time0.setProcess(0L);
      assertEquals(9999L, environment_Time0.getGenerate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor();
      environment_Sensor0.setBooleanOutput(false);
      assertFalse(environment_Sensor0.getLaunchConnection());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setRandomVal(1L);
      assertEquals(1L, environment_Simulator0.getRandomVal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setProcessing(false);
      assertFalse(environment_Simulator0.getReading());
      assertFalse(environment_Simulator0.getGenerating());
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getBooleanOutput());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock;
      environment_Clock0.setTimeRunning(762L);
      assertEquals(762L, environment_Clock0.getTimeRunning());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment.Sensor environment_Sensor0 = new Environment.Sensor();
      assertFalse(environment_Sensor0.getBooleanOutput());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Time environment_Time0 = environment0.time();
      environment_Time0.setRead(2L);
      assertEquals(2L, environment_Time0.getRead());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Time environment_Time0 = environment0.time();
      assertEquals(9999L, environment_Time0.getGenerate());
      
      environment_Time0.setGenerate(0L);
      assertEquals(5L, environment_Time0.getRead());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor();
      environment_Sensor0.setLaunchConnection(true);
      assertTrue(environment_Sensor0.getLaunchConnection());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator();
      environment_Simulator0.setTerminated(false);
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getReading());
      assertFalse(environment_Simulator0.getBooleanOutput());
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getGenerating());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setGenerating(false);
      assertFalse(environment_Simulator0.getBooleanOutput());
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getReading());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      environment_Simulator0.setReading(true);
      assertTrue(environment_Simulator0.getReading());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock;
      assertFalse(environment_Clock0.getRunning());
      
      environment_Clock0.setRunning(true);
      Environment.Clock environment_Clock1 = environment0.clock();
      assertEquals(0L, environment_Clock1.getTimeRunning());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = new Environment.Clock(environment0);
      assertEquals(0L, environment_Clock0.getTimeRunning());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.$NULLSTATE$;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR_R1_SIMULATING_F_MONITORING;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR_R1_SIMULATING;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment();
      assertFalse(environment0.isActive());
      
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR_R1_SIMULATING_F_MONITORING_R1_GENERATE_RANDOM_NUMBERS;
      environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR_R1_SIMULATING_F_READING;
      environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_SMARTFIRE_EVALUATOR_ENVIRONMENTEVALUATOR_R1_SIMULATING_F_LAUNCH;
      environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED;
      environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK;
      environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.State environment_State0 = Environment.State.SIMENVIRONMENT_STOP_SIMULATION;
      boolean boolean0 = environment0.isStateActive(environment_State0);
      assertFalse(environment0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment();
      boolean boolean0 = environment0.nextEvent();
      assertFalse(environment0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment();
      boolean boolean0 = environment0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment.Generator environment_Generator0 = new Environment.Generator();
      long long0 = environment_Generator0.getRandom_val();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment.Time environment_Time0 = new Environment.Time();
      long long0 = environment_Time0.getGenerate();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment.Time environment_Time0 = new Environment.Time();
      long long0 = environment_Time0.getRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = new Environment.Simulator(environment0);
      environment_Simulator0.getNumericalOutput();
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = new Environment.Simulator(environment0);
      // Undeclared exception!
      try { 
        environment_Simulator0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      boolean boolean0 = environment_Simulator0.getGenerating();
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getReading());
      assertFalse(boolean0);
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getBooleanOutput());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      boolean boolean0 = environment_Simulator0.getReading();
      assertFalse(boolean0);
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment0.isActive());
      assertFalse(environment_Simulator0.getBooleanOutput());
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getGenerating());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      boolean boolean0 = environment_Simulator0.getProcessing();
      assertFalse(environment_Simulator0.getReading());
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getGenerating());
      assertFalse(boolean0);
      assertFalse(environment_Simulator0.getBooleanOutput());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = new Environment.Simulator(environment0);
      environment_Simulator0.getTerminated();
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator();
      environment_Simulator0.getRandomVal();
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getBooleanOutput());
      assertFalse(environment0.isActive());
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getReading());
      assertFalse(environment_Simulator0.getGenerating());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator();
      // Undeclared exception!
      try { 
        environment_Simulator0.raiseTerminate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator;
      // Undeclared exception!
      try { 
        environment_Simulator0.raiseCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator();
      boolean boolean0 = environment_Simulator0.getBooleanOutput();
      assertFalse(environment0.isActive());
      assertFalse(boolean0);
      assertFalse(environment_Simulator0.getProcessing());
      assertFalse(environment_Simulator0.getTerminated());
      assertFalse(environment_Simulator0.getReading());
      assertFalse(environment_Simulator0.getGenerating());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor;
      boolean boolean0 = environment_Sensor0.getLaunchConnection();
      assertFalse(environment0.isActive());
      assertFalse(boolean0);
      assertFalse(environment_Sensor0.getBooleanOutput());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor();
      boolean boolean0 = environment_Sensor0.getBooleanOutput();
      assertFalse(boolean0);
      assertFalse(environment_Sensor0.getLaunchConnection());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Environment environment0 = new Environment();
      boolean boolean0 = environment0.isFinal();
      assertFalse(boolean0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.exit();
      assertFalse(environment0.isFinal());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.setStateConfVectorPosition((-2519L));
      long long0 = environment0.getStateConfVectorPosition();
      assertEquals((-2519L), long0);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.raiseStop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Time environment_Time0 = environment0.time();
      long long0 = environment_Time0.getProcess();
      assertEquals(5L, long0);
      assertEquals(5L, environment_Time0.getRead());
      assertEquals(9999L, environment_Time0.getGenerate());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Simulator environment_Simulator0 = environment0.simulator();
      // Undeclared exception!
      try { 
        environment_Simulator0.raiseLaunch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Sensor environment_Sensor0 = environment0.sensor();
      environment_Sensor0.getNumericalOutput();
      assertFalse(environment_Sensor0.getLaunchConnection());
      assertFalse(environment_Sensor0.getBooleanOutput());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.getTimerService();
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.getStateConfVectorPosition();
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.setIsExecuting(true);
      environment0.exit();
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.raiseRun();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Generator environment_Generator0 = environment0.generator();
      environment_Generator0.setRandom_val((-785L));
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.setTimerService((ITimerService) null);
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.raiseTimeEvent((-1783));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock();
      long long0 = environment_Clock0.getTimeRunning();
      assertEquals(0L, long0);
      assertFalse(environment_Clock0.getRunning());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock;
      boolean boolean0 = environment_Clock0.getRunning();
      assertFalse(boolean0);
      assertEquals(0L, environment_Clock0.getTimeRunning());
      assertFalse(environment0.isActive());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock();
      // Undeclared exception!
      try { 
        environment_Clock0.raiseRun();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock();
      // Undeclared exception!
      try { 
        environment_Clock0.raiseStop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Clock environment_Clock0 = environment0.clock();
      // Undeclared exception!
      try { 
        environment_Clock0.raiseReset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Environment", e);
      }
  }
}
