/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:38:38 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Rgb;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rgb_ESTest extends Rgb_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(2557L, 1L, 2942L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.enter();
      rgb0.enter();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      rgb0.setE((-674L));
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      rgb0.setIsExecuting(true);
      boolean boolean0 = rgb0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      boolean boolean0 = rgb0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      long long0 = rgb0.getE();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      long long0 = rgb0.getE();
      assertTrue(rgb0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      long long0 = rgb0.getE();
      assertTrue(rgb0.isActive());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      // Undeclared exception!
      try { 
        rgb0.isStateActive((Rgb.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Rgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseRed();
      rgb0.runCycle();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseGreen();
      rgb0.runCycle();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-674L)).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseRed();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseGreen();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION__FINAL_;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertTrue(rgb0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_RED;
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseRed();
      rgb0.runCycle();
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertTrue(rgb0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_BLUE;
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseBlue();
      rgb0.runCycle();
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertTrue(rgb0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_IDLE;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertTrue(rgb0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_INIT;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertTrue(rgb0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.$NULLSTATE$;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION__FINAL_;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_RED;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_GREEN;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_IDLE;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_BLUE;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.State rgb_State0 = Rgb.State.MAIN_REGION_INIT;
      boolean boolean0 = rgb0.isStateActive(rgb_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.runCycle();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      assertFalse(rgb0.isActive());
      
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseBlue();
      rgb0.runCycle();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      boolean boolean0 = rgb0.isFinal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      boolean boolean0 = rgb0.isFinal();
      assertFalse(boolean0);
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      assertFalse(rgb0.isActive());
      
      rgb0.enter();
      boolean boolean0 = rgb0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      boolean boolean0 = rgb0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      rgb0.setIsExecuting(true);
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.setIsExecuting(true);
      rgb0.enter();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      // Undeclared exception!
      try { 
        rgb0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Rgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.setIsExecuting(true);
      rgb0.runCycle();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      // Undeclared exception!
      try { 
        rgb0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Rgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      rgb0.raiseEnd();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-674L), (-674L), 1L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.enter();
      rgb0.enter();
      rgb0.runCycle();
      rgb0.runCycle();
      assertTrue(rgb0.isFinal());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      assertFalse(rgb0.isActive());
      
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseRed();
      rgb0.runCycle();
      rgb0.raiseRed();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-674L), (-674L), 1L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.enter();
      rgb0.enter();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseBlue();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rgb rgb0 = new Rgb();
      Rgb.OperationCallback rgb_OperationCallback0 = mock(Rgb.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgb_OperationCallback0).init();
      rgb0.setOperationCallback(rgb_OperationCallback0);
      rgb0.enter();
      rgb0.runCycle();
      rgb0.raiseGreen();
      rgb0.runCycle();
      rgb0.raiseGreen();
      rgb0.runCycle();
      assertTrue(rgb0.isActive());
      
      rgb0.exit();
      assertFalse(rgb0.isActive());
  }
}
