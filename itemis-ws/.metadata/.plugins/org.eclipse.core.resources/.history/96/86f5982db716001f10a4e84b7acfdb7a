/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:43:16 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Signalcontrol;
import statechart._blink;
import statechart._flash;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Signalcontrol_ESTest extends Signalcontrol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.raiseRight(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.raiseLeft(false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.raiseStopBlinking();
      signalcontrol0.nextEvent();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.nextEvent();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setPeriodCount(1L);
      signalcontrol0.getPeriodCount();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setIsExecuting(true);
      signalcontrol0.getIsExecuting();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getIsExecuting();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setInterrupted(true);
      signalcontrol0.getInterrupted();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setComfortBlinkingPeriods(0L);
      signalcontrol0.getComfortBlinkingPeriods();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setComfortBlinkingPeriods((-1L));
      signalcontrol0.getComfortBlinkingPeriods();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      _blink _blink0 = new _blink();
      signalcontrol0.setBlinkRight(_blink0);
      signalcontrol0.getBlinkRight();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      _blink _blink0 = new _blink();
      signalcontrol0.setBlinkLeft(_blink0);
      signalcontrol0.getBlinkLeft();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setBlinkLeft((_blink) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getBlinkLeft();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getFlash();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      _flash _flash0 = new _flash();
      signalcontrol0.setFlash(_flash0);
      signalcontrol0.getFlash();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getBlinkRight();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setPeriodCount(1769L);
      signalcontrol0.raiseStopBlinking();
      signalcontrol0.enter();
      signalcontrol0.raiseBlinkLeft_cycleCompleted();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setPeriodCount((-426L));
      signalcontrol0.enter();
      signalcontrol0.raiseBlinkRight_cycleCompleted();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      signalcontrol0.exit();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      _blink _blink0 = new _blink();
      signalcontrol0.setBlinkLeft(_blink0);
      signalcontrol0.setBlinkLeft(_blink0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      _blink _blink0 = new _blink();
      signalcontrol0.setBlinkRight(_blink0);
      signalcontrol0.setBlinkRight((_blink) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      // Undeclared exception!
      try { 
        signalcontrol0.getLeftValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Left is not raised!
         //
         verifyException("statechart.Signalcontrol", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      // Undeclared exception!
      try { 
        signalcontrol0.getRightValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Right is not raised!
         //
         verifyException("statechart.Signalcontrol", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.valueOf("MAIN_IDLE");
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.$NULLSTATE$;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_LEFT;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_RIGHT;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_HAZARD_LIGHTS;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_LEFT_LEFT_REGULAR;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_LEFT_LEFT_COMFORT;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_RIGHT_RIGHT_COMFORT;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.MAIN_BLINK_R_RIGHT_RIGHT_REGULAR;
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      Signalcontrol.State signalcontrol_State0 = Signalcontrol.State.valueOf("MAIN_IDLE");
      signalcontrol0.isStateActive(signalcontrol_State0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setIsExecuting(true);
      signalcontrol0.raiseHazard();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      signalcontrol0.isActive();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.isActive();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setIsExecuting(true);
      signalcontrol0.exit();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.exit();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.setIsExecuting(true);
      signalcontrol0.enter();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getComfortBlinkingPeriods();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      // Undeclared exception!
      try { 
        signalcontrol0.raiseLeft(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Signalcontrol", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.getPeriodCount();
      assertEquals(3L, signalcontrol0.getComfortBlinkingPeriods());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      boolean boolean0 = signalcontrol0.getInterrupted();
      assertEquals(3L, signalcontrol0.getComfortBlinkingPeriods());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      boolean boolean0 = signalcontrol0.isFinal();
      assertFalse(boolean0);
      assertEquals(3L, signalcontrol0.getComfortBlinkingPeriods());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      // Undeclared exception!
      try { 
        signalcontrol0.raiseRight(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Signalcontrol", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      assertFalse(signalcontrol0.isActive());
      
      signalcontrol0.triggerWithoutEvent();
      assertEquals(3L, signalcontrol0.getComfortBlinkingPeriods());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Signalcontrol signalcontrol0 = new Signalcontrol();
      signalcontrol0.enter();
      // Undeclared exception!
      try { 
        signalcontrol0.raiseHazard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Signalcontrol", e);
      }
  }
}
