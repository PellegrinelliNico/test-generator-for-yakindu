/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:31:48 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._03_MotionLightSwitchSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _03_MotionLightSwitchSimplified_ESTest extends _03_MotionLightSwitchSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING;
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseToggleMode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseTimeEvent((-628));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -628
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseSwitch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.isStateActive((_03_MotionLightSwitchSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.triggerWithoutEvent();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      _03_MotionLightSwitchSimplified0.raiseTimeEvent(0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseChangeBrightness();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseSwitch();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.exit();
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.exit();
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.exit();
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.exit();
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseSwitch();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL_R1_ON;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL_R1_OFF;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING_R1_ON;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING_R1_OFF;
      _03_MotionLightSwitchSimplified0.enter();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING;
      _03_MotionLightSwitchSimplified0.enter();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.$NULLSTATE$;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL_R1_OFF;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING_R1_ON;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MANUAL_R1_ON;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified.State _03_MotionLightSwitchSimplified_State0 = _03_MotionLightSwitchSimplified.State.MAIN_MOTIONSENSING_R1_OFF;
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isStateActive(_03_MotionLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.raiseChangeBrightness();
      assertFalse(_03_MotionLightSwitchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      _03_MotionLightSwitchSimplified0.exit();
      assertFalse(_03_MotionLightSwitchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseSwitch();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseChangeBrightness();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseMotionDetected();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      boolean boolean0 = _03_MotionLightSwitchSimplified0.isFinal();
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitchSimplified0.raiseMotionDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _03_MotionLightSwitchSimplified _03_MotionLightSwitchSimplified0 = new _03_MotionLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _03_MotionLightSwitchSimplified0.setTimerService(iTimerService0);
      assertFalse(_03_MotionLightSwitchSimplified0.isActive());
      
      _03_MotionLightSwitchSimplified0.enter();
      _03_MotionLightSwitchSimplified0.raiseToggleMode();
      _03_MotionLightSwitchSimplified0.raiseSwitch();
      _03_MotionLightSwitchSimplified0.raiseSwitch();
      assertTrue(_03_MotionLightSwitchSimplified0.isActive());
  }
}
