/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:59:53 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.Sensor_Component;
import statechart.SmartTrafficLightSystem;
import statechart.TrafficLight_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartTrafficLightSystem_ESTest extends SmartTrafficLightSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      TrafficLight_Unit trafficLight_Unit0 = new TrafficLight_Unit();
      smartTrafficLightSystem0.setTrafficLight(trafficLight_Unit0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartTrafficLightSystem0.setTemp(deviceTemp_Component0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setSensor((Sensor_Component) null);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setPower((Power_Component) null);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      Controller_Component controller_Component0 = new Controller_Component();
      smartTrafficLightSystem0.setController(controller_Component0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartTrafficLightSystem0.setActuator(actuator_Component0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = smartTrafficLightSystem0.system;
      smartTrafficLightSystem_System0.setTimer((-3043L));
      assertEquals((-3043L), smartTrafficLightSystem_System0.getTimer());
      
      smartTrafficLightSystem0.system();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = smartTrafficLightSystem0.sensorOutput;
      smartTrafficLightSystem_SensorOutput0.setCounter(8L);
      assertEquals(8L, smartTrafficLightSystem_SensorOutput0.getCounter());
      
      smartTrafficLightSystem0.sensorOutput();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = smartTrafficLightSystem0.sensorOutput();
      smartTrafficLightSystem_SensorOutput0.setCounter((-1887L));
      assertEquals((-1887L), smartTrafficLightSystem_SensorOutput0.getCounter());
      
      smartTrafficLightSystem0.sensorOutput();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.sensorInput = null;
      smartTrafficLightSystem0.sensorInput();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      
      smartTrafficLightSystem0.setWiFi_connection(true);
      boolean boolean0 = smartTrafficLightSystem0.getWiFi_connection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      Network_Component network_Component0 = new Network_Component();
      smartTrafficLightSystem0.setWiFi(network_Component0);
      smartTrafficLightSystem0.getWiFi();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setTemp_value((-2858L));
      long long0 = smartTrafficLightSystem0.getTemp_value();
      assertEquals((-2858L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      
      smartTrafficLightSystem0.setPower_required(0L);
      smartTrafficLightSystem0.getPower_required();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getIsExecuting();
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      // Undeclared exception!
      try { 
        smartTrafficLightSystem0.isStateActive((SmartTrafficLightSystem.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = new SmartTrafficLightSystem.System(smartTrafficLightSystem0);
      smartTrafficLightSystem_System0.setLight_status("3h5Q`2SWd_d");
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = smartTrafficLightSystem0.system;
      smartTrafficLightSystem_System0.setIsOn(false);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem_System0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartTrafficLightSystem.SensorInput smartTrafficLightSystem_SensorInput0 = new SmartTrafficLightSystem.SensorInput();
      smartTrafficLightSystem_SensorInput0.setDetection_time(1000L);
      assertEquals(1000L, smartTrafficLightSystem_SensorInput0.getDetection_time());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setMessage((String) null);
      smartTrafficLightSystem0.getMessage();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartTrafficLightSystem.SensorInput smartTrafficLightSystem_SensorInput0 = new SmartTrafficLightSystem.SensorInput();
      smartTrafficLightSystem_SensorInput0.setTimeout_time((-3715L));
      assertEquals((-3715L), smartTrafficLightSystem_SensorInput0.getTimeout_time());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setPower_total(10L);
      long long0 = smartTrafficLightSystem0.getPower_total();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = new SmartTrafficLightSystem.SensorOutput();
      smartTrafficLightSystem_SensorOutput0.setCounter(1404L);
      assertEquals(1404L, smartTrafficLightSystem_SensorOutput0.getCounter());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = new SmartTrafficLightSystem.System(smartTrafficLightSystem0);
      smartTrafficLightSystem_System0.setCrossing_status("3h5Q`2SWd_d");
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = smartTrafficLightSystem0.sensorOutput();
      smartTrafficLightSystem_SensorOutput0.setActivity(true);
      assertTrue(smartTrafficLightSystem_SensorOutput0.getActivity());
      
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput1 = smartTrafficLightSystem0.sensorOutput();
      assertTrue(smartTrafficLightSystem_SensorOutput1.getActivity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setPower_input((-428L));
      assertEquals((-428L), smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_WIFIGATEWAY__INITIALIZE_WIFI_COMPONENT_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      assertFalse(smartTrafficLightSystem0.isActive());
      
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(boolean0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_WIFIGATEWAY_OFF;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_WIFIGATEWAY__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_SENSORCOMPONENT_OFF;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_ACTUATORCOMPONENT_OFF;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(boolean0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(boolean0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_SYSTEMSTATUS_ON;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(boolean0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
      smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.State smartTrafficLightSystem_State0 = SmartTrafficLightSystem.State.MAIN_REGION_SMARTTRAFFICLIGHTSYSTEM_SYSTEMSTATUS_OFF;
      boolean boolean0 = smartTrafficLightSystem0.isStateActive(smartTrafficLightSystem_State0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(boolean0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      boolean boolean0 = smartTrafficLightSystem0.nextEvent();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      boolean boolean0 = smartTrafficLightSystem0.isActive();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      // Undeclared exception!
      try { 
        smartTrafficLightSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorInput smartTrafficLightSystem_SensorInput0 = smartTrafficLightSystem0.sensorInput;
      long long0 = smartTrafficLightSystem_SensorInput0.getDetection_time();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(5L, long0);
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(8L, smartTrafficLightSystem_SensorInput0.getTimeout_time());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SmartTrafficLightSystem.SensorInput smartTrafficLightSystem_SensorInput0 = new SmartTrafficLightSystem.SensorInput();
      long long0 = smartTrafficLightSystem_SensorInput0.getTimeout_time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = new SmartTrafficLightSystem.SensorOutput();
      boolean boolean0 = smartTrafficLightSystem_SensorOutput0.getActivity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = new SmartTrafficLightSystem.System(smartTrafficLightSystem0);
      smartTrafficLightSystem_System0.getLight_status();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = new SmartTrafficLightSystem.System(smartTrafficLightSystem0);
      // Undeclared exception!
      try { 
        smartTrafficLightSystem_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = new SmartTrafficLightSystem.System(smartTrafficLightSystem0);
      // Undeclared exception!
      try { 
        smartTrafficLightSystem_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = smartTrafficLightSystem0.system;
      smartTrafficLightSystem_System0.getCrossing_status();
      assertFalse(smartTrafficLightSystem_System0.getIsOn());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = smartTrafficLightSystem0.system;
      smartTrafficLightSystem_System0.getTimer();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem_System0.getIsOn());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setTimerService((ITimerService) null);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getSensor();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      // Undeclared exception!
      try { 
        smartTrafficLightSystem0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getMessage();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      long long0 = smartTrafficLightSystem0.getPower_input();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, long0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getStateConfVectorPosition();
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setIsExecuting(false);
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getWiFi();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      long long0 = smartTrafficLightSystem0.getPower_required();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      boolean boolean0 = smartTrafficLightSystem0.getWiFi_connection();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getController();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorOutput smartTrafficLightSystem_SensorOutput0 = smartTrafficLightSystem0.sensorOutput();
      smartTrafficLightSystem_SensorOutput0.getCounter();
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem_SensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      long long0 = smartTrafficLightSystem0.getTemp_value();
      assertEquals(50L, long0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getPower_total();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getTrafficLight();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      assertFalse(smartTrafficLightSystem0.isActive());
      
      smartTrafficLightSystem0.exit();
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getPower();
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.SensorInput smartTrafficLightSystem_SensorInput0 = smartTrafficLightSystem0.sensorInput();
      assertEquals(5L, smartTrafficLightSystem_SensorInput0.getDetection_time());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(8L, smartTrafficLightSystem_SensorInput0.getTimeout_time());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getTimerService();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getActuator();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      boolean boolean0 = smartTrafficLightSystem0.isFinal();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
      assertFalse(boolean0);
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      SmartTrafficLightSystem.System smartTrafficLightSystem_System0 = smartTrafficLightSystem0.system();
      boolean boolean0 = smartTrafficLightSystem_System0.getIsOn();
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      // Undeclared exception!
      try { 
        smartTrafficLightSystem0.raiseTimeEvent((-2124));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartTrafficLightSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.setStateConfVectorPosition((-3520L));
      long long0 = smartTrafficLightSystem0.getStateConfVectorPosition();
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
      assertEquals((-3520L), long0);
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertFalse(smartTrafficLightSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SmartTrafficLightSystem smartTrafficLightSystem0 = new SmartTrafficLightSystem();
      smartTrafficLightSystem0.getTemp();
      assertFalse(smartTrafficLightSystem0.isActive());
      assertEquals(50L, smartTrafficLightSystem0.getTemp_value());
      assertEquals(10L, smartTrafficLightSystem0.getPower_required());
      assertFalse(smartTrafficLightSystem0.getWiFi_connection());
      assertEquals(10L, smartTrafficLightSystem0.getPower_input());
  }
}
