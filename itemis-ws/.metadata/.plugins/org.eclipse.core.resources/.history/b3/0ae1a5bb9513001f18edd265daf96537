/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:32:04 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.LEDLight_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LEDLight_Unit_ESTest extends LEDLight_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.setIsExecuting(true);
      boolean boolean0 = lEDLight_Unit0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      boolean boolean0 = lEDLight_Unit0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.device = null;
      LEDLight_Unit.Device lEDLight_Unit_Device0 = lEDLight_Unit0.device();
      assertNull(lEDLight_Unit_Device0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Device lEDLight_Unit_Device0 = lEDLight_Unit0.device();
      assertFalse(lEDLight_Unit_Device0.getIsOn());
      
      lEDLight_Unit_Device0.setIsOn(true);
      LEDLight_Unit.Device lEDLight_Unit_Device1 = lEDLight_Unit0.device();
      assertTrue(lEDLight_Unit_Device1.getIsOn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.bulb.setIsOn(true);
      LEDLight_Unit.Bulb lEDLight_Unit_Bulb0 = lEDLight_Unit0.bulb();
      assertTrue(lEDLight_Unit_Bulb0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.brightness = null;
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = lEDLight_Unit0.brightness();
      assertNull(lEDLight_Unit_Brightness0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.isStateActive((LEDLight_Unit.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = new LEDLight_Unit.Brightness(lEDLight_Unit0);
      lEDLight_Unit0.brightness = lEDLight_Unit_Brightness0;
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness1 = lEDLight_Unit0.brightness();
      assertSame(lEDLight_Unit_Brightness1, lEDLight_Unit_Brightness0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Device lEDLight_Unit_Device0 = new LEDLight_Unit.Device(lEDLight_Unit0);
      lEDLight_Unit_Device0.setIsOn(true);
      assertTrue(lEDLight_Unit_Device0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State.$NULLSTATE$;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON__LUMINOSITY__CHANGE_LUMINOSITY_LEVEL;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State._LED_LIGHT_UNIT___ON___BULB_STATUS__BULB_ON_STANDBY;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State._LED_LIGHT_UNIT___ON_;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.State lEDLight_Unit_State0 = LEDLight_Unit.State._LED_LIGHT_UNIT___OFF_;
      boolean boolean0 = lEDLight_Unit0.isStateActive(lEDLight_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      boolean boolean0 = lEDLight_Unit0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      boolean boolean0 = lEDLight_Unit0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = lEDLight_Unit0.brightness;
      // Undeclared exception!
      try { 
        lEDLight_Unit_Brightness0.raiseDown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = lEDLight_Unit0.brightness;
      // Undeclared exception!
      try { 
        lEDLight_Unit_Brightness0.raiseUp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = lEDLight_Unit0.brightness;
      long long0 = lEDLight_Unit_Brightness0.getLevel();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.setIsExecuting(true);
      lEDLight_Unit0.exit();
      assertFalse(lEDLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness0 = lEDLight_Unit0.brightness();
      lEDLight_Unit_Brightness0.setLevel((-1696L));
      assertEquals((-1696L), lEDLight_Unit_Brightness0.getLevel());
      
      LEDLight_Unit.Brightness lEDLight_Unit_Brightness1 = lEDLight_Unit0.brightness();
      assertEquals((-1696L), lEDLight_Unit_Brightness1.getLevel());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.setTimerService((ITimerService) null);
      assertFalse(lEDLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      boolean boolean0 = lEDLight_Unit0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      ITimerService iTimerService0 = lEDLight_Unit0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.raiseTimeEvent(5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      lEDLight_Unit0.exit();
      assertFalse(lEDLight_Unit0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Bulb lEDLight_Unit_Bulb0 = lEDLight_Unit0.bulb();
      lEDLight_Unit_Bulb0.setIsOn(false);
      assertFalse(lEDLight_Unit0.isActive());
      assertFalse(lEDLight_Unit_Bulb0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LEDLight_Unit.Bulb lEDLight_Unit_Bulb0 = new LEDLight_Unit.Bulb();
      boolean boolean0 = lEDLight_Unit_Bulb0.getIsOn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      LEDLight_Unit.Device lEDLight_Unit_Device0 = lEDLight_Unit0.device();
      boolean boolean0 = lEDLight_Unit_Device0.getIsOn();
      assertFalse(boolean0);
      assertFalse(lEDLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.device.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      // Undeclared exception!
      try { 
        lEDLight_Unit0.device.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LEDLight_Unit", e);
      }
  }
}
