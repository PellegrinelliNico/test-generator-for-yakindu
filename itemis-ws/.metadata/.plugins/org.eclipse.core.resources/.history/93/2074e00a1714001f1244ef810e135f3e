/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:07:38 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.OperatingMode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperatingMode_ESTest extends OperatingMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.setIsExecuting(true);
      boolean boolean0 = operatingMode0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      boolean boolean0 = operatingMode0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.isStateActive((OperatingMode.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.$NULLSTATE$;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.MAIN_REGION_OPERATING;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.MAIN_REGION_FAILED;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.MAIN_REGION_INIT;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.MAIN_REGION_EDITING;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.State operatingMode_State0 = OperatingMode.State.MAIN_REGION_PREPARE_BUS;
      boolean boolean0 = operatingMode0.isStateActive(operatingMode_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      boolean boolean0 = operatingMode0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      boolean boolean0 = operatingMode0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.Can operatingMode_Can0 = operatingMode0.can();
      // Undeclared exception!
      try { 
        operatingMode_Can0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.Can operatingMode_Can0 = new OperatingMode.Can(operatingMode0);
      OperatingMode.Can.OperationCallback operatingMode_Can_OperationCallback0 = mock(OperatingMode.Can.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingMode_Can0.setOperationCallback(operatingMode_Can_OperationCallback0);
      assertEquals(250L, OperatingMode.Can.timeout);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseStarted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.exit();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.setTimerService((ITimerService) null);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.Can operatingMode_Can0 = operatingMode0.can();
      long long0 = operatingMode_Can0.getTimeout();
      assertEquals(250L, long0);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.raiseStart();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      long long0 = operatingMode0.getTimeout();
      assertEquals(5000L, long0);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseTimeEvent(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getStart();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      OperatingMode.OperationCallback operatingMode_OperationCallback0 = mock(OperatingMode.OperationCallback.class, new ViolatedAssumptionAnswer());
      operatingMode0.setOperationCallback(operatingMode_OperationCallback0);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.raiseFailing();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.setIsExecuting(true);
      operatingMode0.exit();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getFailing();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.raiseEditing(true);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      boolean boolean0 = operatingMode0.isFinal();
      assertFalse(operatingMode0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.raiseCleared();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getEditing();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getCleared();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getOperating();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseEdit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.getTimerService();
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      operatingMode0.raiseOperating(true);
      assertFalse(operatingMode0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseInit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OperatingMode operatingMode0 = new OperatingMode();
      // Undeclared exception!
      try { 
        operatingMode0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.OperatingMode", e);
      }
  }
}
