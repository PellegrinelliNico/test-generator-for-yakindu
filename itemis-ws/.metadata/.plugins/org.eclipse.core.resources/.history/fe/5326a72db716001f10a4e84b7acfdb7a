/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:24:14 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Light_controller;
import statechart._light;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Light_controller_ESTest extends Light_controller_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight2(_light0);
      _light _light1 = light_controller0.getLight2();
      assertFalse(_light1.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight1(_light0);
      _light _light1 = light_controller0.getLight1();
      assertFalse(_light1.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.setIsExecuting(true);
      boolean boolean0 = light_controller0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      boolean boolean0 = light_controller0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.raiseLight2_brightness_changed((-1725L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.raiseLight1_brightness_changed((-421L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.isStateActive((Light_controller.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.setLight2((_light) null);
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.setLight1((_light) null);
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight2(_light0);
      light_controller0.setLight2(_light0);
      assertFalse(_light0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight1(_light0);
      light_controller0.setLight1(_light0);
      assertEquals(10L, _light0.getMax_brightness());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.getLight2_brightness_changedValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Light2_brightness_changed is not raised!
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.getLight1_brightness_changedValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Light1_brightness_changed is not raised!
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.State light_controller_State0 = Light_controller.State.$NULLSTATE$;
      boolean boolean0 = light_controller0.isStateActive(light_controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.State light_controller_State0 = Light_controller.State.MAIN_REGION_ON;
      boolean boolean0 = light_controller0.isStateActive(light_controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.State light_controller_State0 = Light_controller.State.MAIN_REGION_ON_R1_BLINKMODE;
      boolean boolean0 = light_controller0.isStateActive(light_controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.State light_controller_State0 = Light_controller.State.MAIN_REGION_ON_R1_REGULARMODE;
      boolean boolean0 = light_controller0.isStateActive(light_controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.State light_controller_State0 = Light_controller.State.MAIN_REGION_OFF;
      boolean boolean0 = light_controller0.isStateActive(light_controller_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      boolean boolean0 = light_controller0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      boolean boolean0 = light_controller0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.setIsExecuting(true);
      light_controller0.exit();
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.User light_controller_User0 = light_controller0.user;
      // Undeclared exception!
      try { 
        light_controller_User0.raiseSwitch_off();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.User light_controller_User0 = new Light_controller.User(light_controller0);
      // Undeclared exception!
      try { 
        light_controller_User0.raiseSwitch_on();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      Light_controller.User light_controller_User0 = new Light_controller.User(light_controller0);
      // Undeclared exception!
      try { 
        light_controller_User0.raiseBlink_mode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.exit();
      assertFalse(light_controller0.isFinal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.getTimerService();
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.user();
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.getLight1();
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      // Undeclared exception!
      try { 
        light_controller0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      boolean boolean0 = light_controller0.isFinal();
      assertFalse(light_controller0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.setTimerService((ITimerService) null);
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      light_controller0.getLight2();
      assertFalse(light_controller0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight1(_light0);
      // Undeclared exception!
      try { 
        _light0.raiseBrightness_changed(10L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Light_controller light_controller0 = new Light_controller();
      _light _light0 = new _light();
      light_controller0.setLight2(_light0);
      // Undeclared exception!
      try { 
        _light0.raiseBrightness_changed((-6L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_controller", e);
      }
  }
}
