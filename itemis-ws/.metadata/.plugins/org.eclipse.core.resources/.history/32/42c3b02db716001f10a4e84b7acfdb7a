/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:36:17 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._04_LightAndMotionSensingLightSwitch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _04_LightAndMotionSensingLightSwitch_ESTest extends _04_LightAndMotionSensingLightSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.luminosity = null;
      _04_LightAndMotionSensingLightSwitch0.luminosity();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.hmi = null;
      _04_LightAndMotionSensingLightSwitch0.hmi();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.setIsExecuting(true);
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.getIsExecuting();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch0.isStateActive((_04_LightAndMotionSensingLightSwitch.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.setBrightness((-45L));
      long long0 = _04_LightAndMotionSensingLightSwitch0.getBrightness();
      assertEquals((-45L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.$NULLSTATE$;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_LIGHT_SENSING;
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_MOTION_SENSING;
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC;
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_MANUAL_R1_ON;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_MANUAL_R1_OFF;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION;
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_MANUAL;
      _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.State _04_LightAndMotionSensingLightSwitch_State0 = _04_LightAndMotionSensingLightSwitch.State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL;
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isStateActive(_04_LightAndMotionSensingLightSwitch_State0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.nextEvent();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.setIsExecuting(true);
      _04_LightAndMotionSensingLightSwitch0.exit();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Motion _04_LightAndMotionSensingLightSwitch_Motion0 = _04_LightAndMotionSensingLightSwitch0.motion;
      long long0 = _04_LightAndMotionSensingLightSwitch_Motion0.getTimeout();
      assertEquals(30L, long0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Motion _04_LightAndMotionSensingLightSwitch_Motion0 = new _04_LightAndMotionSensingLightSwitch.Motion(_04_LightAndMotionSensingLightSwitch0);
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Motion0.raiseDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Hmi _04_LightAndMotionSensingLightSwitch_Hmi0 = new _04_LightAndMotionSensingLightSwitch.Hmi(_04_LightAndMotionSensingLightSwitch0);
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Hmi0.raiseChangeBrightness();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Hmi _04_LightAndMotionSensingLightSwitch_Hmi0 = new _04_LightAndMotionSensingLightSwitch.Hmi(_04_LightAndMotionSensingLightSwitch0);
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Hmi0.raiseToggleMode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Luminosity _04_LightAndMotionSensingLightSwitch_Luminosity0 = new _04_LightAndMotionSensingLightSwitch.Luminosity(_04_LightAndMotionSensingLightSwitch0);
      long long0 = _04_LightAndMotionSensingLightSwitch_Luminosity0.getDelay();
      assertEquals(10L, long0);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Luminosity _04_LightAndMotionSensingLightSwitch_Luminosity0 = _04_LightAndMotionSensingLightSwitch0.luminosity();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Luminosity0.raiseBright();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      boolean boolean0 = _04_LightAndMotionSensingLightSwitch0.isFinal();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.getTimerService();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      long long0 = _04_LightAndMotionSensingLightSwitch0.getBrightness();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.motion();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      assertFalse(_04_LightAndMotionSensingLightSwitch0.isActive());
      
      _04_LightAndMotionSensingLightSwitch0.exit();
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Hmi _04_LightAndMotionSensingLightSwitch_Hmi0 = _04_LightAndMotionSensingLightSwitch0.hmi();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Hmi0.raiseSwitch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch0.raiseTimeEvent(818);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch.Luminosity _04_LightAndMotionSensingLightSwitch_Luminosity0 = _04_LightAndMotionSensingLightSwitch0.luminosity();
      // Undeclared exception!
      try { 
        _04_LightAndMotionSensingLightSwitch_Luminosity0.raiseDark();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._04_LightAndMotionSensingLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _04_LightAndMotionSensingLightSwitch _04_LightAndMotionSensingLightSwitch0 = new _04_LightAndMotionSensingLightSwitch();
      _04_LightAndMotionSensingLightSwitch0.setTimerService((ITimerService) null);
      assertEquals(0L, _04_LightAndMotionSensingLightSwitch0.getBrightness());
      assertFalse(_04_LightAndMotionSensingLightSwitch0.isActive());
  }
}
