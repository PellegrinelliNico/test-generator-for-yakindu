/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 19:56:20 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.MqttClientStatechartSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MqttClientStatechartSimplified_ESTest extends MqttClientStatechartSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      // Undeclared exception!
      try { 
        mqttClientStatechartSimplified0.raiseTimeEvent((-2523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2523
         //
         verifyException("statechart.MqttClientStatechartSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      // Undeclared exception!
      try { 
        mqttClientStatechartSimplified0.isStateActive((MqttClientStatechartSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.MqttClientStatechartSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      mqttClientStatechartSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        mqttClientStatechartSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.MqttClientStatechartSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MqttClientStatechartSimplified.System mqttClientStatechartSimplified_System0 = new MqttClientStatechartSimplified.System();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      mqttClientStatechartSimplified0.exit();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      mqttClientStatechartSimplified0.exit();
      assertFalse(mqttClientStatechartSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertTrue(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertTrue(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED;
      mqttClientStatechartSimplified0.enter();
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertTrue(mqttClientStatechartSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.$NULLSTATE$;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      assertFalse(mqttClientStatechartSimplified0.isActive());
      
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_ENABLEDHCP;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_SETSTATIONMODE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_ENTRY;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_OFFLINE_R1_SETTOPIC;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_CONNECTTOBROKER;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_ENTRY;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_STOP;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_START;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_RESETSYSTEM;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_RESTARTMODULE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_TESTMODULE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_RESETMODULE;
      boolean boolean0 = mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      MqttClientStatechartSimplified.State mqttClientStatechartSimplified_State0 = MqttClientStatechartSimplified.State.MAIN_REGION_UNDEFINED_R1_ENTRY;
      mqttClientStatechartSimplified0.isStateActive(mqttClientStatechartSimplified_State0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.runCycle();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      assertFalse(mqttClientStatechartSimplified0.isActive());
      
      mqttClientStatechartSimplified0.enter();
      boolean boolean0 = mqttClientStatechartSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      boolean boolean0 = mqttClientStatechartSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      // Undeclared exception!
      try { 
        mqttClientStatechartSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MqttClientStatechartSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      // Undeclared exception!
      try { 
        mqttClientStatechartSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MqttClientStatechartSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MqttClientStatechartSimplified.WizFi360 mqttClientStatechartSimplified_WizFi360_0 = new MqttClientStatechartSimplified.WizFi360();
      mqttClientStatechartSimplified_WizFi360_0.raiseReady();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MqttClientStatechartSimplified.WizFi360 mqttClientStatechartSimplified_WizFi360_0 = new MqttClientStatechartSimplified.WizFi360();
      mqttClientStatechartSimplified_WizFi360_0.raiseFail();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MqttClientStatechartSimplified.WizFi360 mqttClientStatechartSimplified_WizFi360_0 = new MqttClientStatechartSimplified.WizFi360();
      mqttClientStatechartSimplified_WizFi360_0.raiseError();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MqttClientStatechartSimplified.WizFi360 mqttClientStatechartSimplified_WizFi360_0 = new MqttClientStatechartSimplified.WizFi360();
      mqttClientStatechartSimplified_WizFi360_0.raiseOk();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      mqttClientStatechartSimplified0.isFinal();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      mqttClientStatechartSimplified0.wizFi360();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      mqttClientStatechartSimplified0.system();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      mqttClientStatechartSimplified0.runCycle();
      assertTrue(mqttClientStatechartSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MqttClientStatechartSimplified mqttClientStatechartSimplified0 = new MqttClientStatechartSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      mqttClientStatechartSimplified0.setTimerService(iTimerService0);
      mqttClientStatechartSimplified0.enter();
      mqttClientStatechartSimplified0.raiseTimeEvent(0);
      mqttClientStatechartSimplified0.runCycle();
      mqttClientStatechartSimplified0.exit();
      assertFalse(mqttClientStatechartSimplified0.isActive());
  }
}
