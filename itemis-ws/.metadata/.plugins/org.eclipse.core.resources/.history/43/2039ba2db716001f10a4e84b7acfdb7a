/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:44:26 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._05_PresenceSimulationLightSwitchSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _05_PresenceSimulationLightSwitchSimplified_ESTest extends _05_PresenceSimulationLightSwitchSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified0.triggerWithoutEvent();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified0.raiseTimeEvent(0);
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.raiseTimeEvent((-214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -214
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.isStateActive((_05_PresenceSimulationLightSwitchSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = new _05_PresenceSimulationLightSwitchSimplified.Hmi(_05_PresenceSimulationLightSwitchSimplified0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified.Simulation _05_PresenceSimulationLightSwitchSimplified_Simulation0 = new _05_PresenceSimulationLightSwitchSimplified.Simulation();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseSwitch();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseSwitch();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseChangeBrightness();
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseSwitch();
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      
      _05_PresenceSimulationLightSwitchSimplified0.exit();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      
      _05_PresenceSimulationLightSwitchSimplified0.exit();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
      _05_PresenceSimulationLightSwitchSimplified0.exit();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL_MODE_OFF;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL;
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.$NULLSTATE$;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_PRESENCE_ABSENT;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_PRESENCE_PRESENT;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL_MODE_ON;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_MANUAL_MODE_OFF;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_SCHEDULE_WAITING;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified.State _05_PresenceSimulationLightSwitchSimplified_State0 = _05_PresenceSimulationLightSwitchSimplified.State.MAIN_PRESENCE_SIMULATION_MODE_IDLE;
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isStateActive(_05_PresenceSimulationLightSwitchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal operation callback must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified0.exit();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal operation callback must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseSwitch();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseChangeBrightness();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitchSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      boolean boolean0 = _05_PresenceSimulationLightSwitchSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseSwitch();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      _05_PresenceSimulationLightSwitchSimplified0.simulation();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _05_PresenceSimulationLightSwitchSimplified _05_PresenceSimulationLightSwitchSimplified0 = new _05_PresenceSimulationLightSwitchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setTimerService(iTimerService0);
      _05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback _05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitchSimplified.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitchSimplified0.setInternalOperationCallback(_05_PresenceSimulationLightSwitchSimplified_InternalOperationCallback0);
      _05_PresenceSimulationLightSwitchSimplified.Hmi _05_PresenceSimulationLightSwitchSimplified_Hmi0 = _05_PresenceSimulationLightSwitchSimplified0.hmi();
      assertFalse(_05_PresenceSimulationLightSwitchSimplified0.isActive());
      
      _05_PresenceSimulationLightSwitchSimplified0.enter();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
      _05_PresenceSimulationLightSwitchSimplified_Hmi0.raiseToggleMode();
      assertTrue(_05_PresenceSimulationLightSwitchSimplified0.isActive());
  }
}
