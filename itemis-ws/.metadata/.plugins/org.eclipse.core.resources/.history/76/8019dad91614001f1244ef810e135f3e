/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 19:32:50 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.CoffeeMachineSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoffeeMachineSimplified_ESTest extends CoffeeMachineSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.raiseReturnCoffee();
      assertFalse(coffeeMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.raiseOperate();
      assertFalse(coffeeMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.raiseMyEvent();
      assertFalse(coffeeMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.raiseButtonD();
      assertFalse(coffeeMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.raiseButtonC();
      assertFalse(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseTimeEvent(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.isStateActive((CoffeeMachineSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      coffeeMachineSimplified0.raiseTimeEvent(0);
      coffeeMachineSimplified0.raiseTimeEvent(0);
      assertTrue(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      coffeeMachineSimplified0.raiseButtonA();
      assertTrue(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      coffeeMachineSimplified0.exit();
      assertFalse(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      coffeeMachineSimplified0.raiseTimeEvent(0);
      assertTrue(coffeeMachineSimplified0.isActive());
      
      coffeeMachineSimplified0.exit();
      assertFalse(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      assertTrue(coffeeMachineSimplified0.isActive());
      
      coffeeMachineSimplified0.exit();
      assertFalse(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_CUPDISPENSER;
      coffeeMachineSimplified0.raiseTimeEvent(0);
      coffeeMachineSimplified0.raiseButtonB();
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertTrue(coffeeMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_ENTERMONEY;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertTrue(coffeeMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.$NULLSTATE$;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_CUPDISPENSER;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_HEAT_AND_WATER;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_RETURN_CANCEL;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_LATTE;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_AMERICANO;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_CAPPUCINO;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      CoffeeMachineSimplified.State coffeeMachineSimplified_State0 = CoffeeMachineSimplified.State.MAIN_REGION_ENTERMONEY;
      boolean boolean0 = coffeeMachineSimplified0.isStateActive(coffeeMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.triggerWithoutEvent();
      assertFalse(coffeeMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      assertFalse(coffeeMachineSimplified0.isActive());
      
      coffeeMachineSimplified0.enter();
      coffeeMachineSimplified0.raiseTimeEvent(0);
      coffeeMachineSimplified0.raiseButtonB();
      coffeeMachineSimplified0.raiseButtonA();
      assertTrue(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      boolean boolean0 = coffeeMachineSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseButtonA();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseButtonC();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      boolean boolean0 = coffeeMachineSimplified0.isFinal();
      assertFalse(coffeeMachineSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseMyEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      coffeeMachineSimplified0.enter();
      coffeeMachineSimplified0.raiseTimeEvent(0);
      coffeeMachineSimplified0.raiseButtonB();
      assertTrue(coffeeMachineSimplified0.isActive());
      
      coffeeMachineSimplified0.exit();
      assertFalse(coffeeMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseButtonB();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseButtonD();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      coffeeMachineSimplified0.setTimerService(iTimerService0);
      assertFalse(coffeeMachineSimplified0.isActive());
      
      coffeeMachineSimplified0.enter();
      boolean boolean0 = coffeeMachineSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseReturnCoffee();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CoffeeMachineSimplified coffeeMachineSimplified0 = new CoffeeMachineSimplified();
      // Undeclared exception!
      try { 
        coffeeMachineSimplified0.raiseTimeEvent(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.CoffeeMachineSimplified", e);
      }
  }
}
