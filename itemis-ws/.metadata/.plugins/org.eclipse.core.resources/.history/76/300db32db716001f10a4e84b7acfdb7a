/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:06:38 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrafficLightCtrl1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightCtrl1_ESTest extends TrafficLightCtrl1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.raiseTimeEvent(0);
      assertFalse(trafficLightCtrl1_0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.trafficLight = null;
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = trafficLightCtrl1_0.trafficLight();
      assertNull(trafficLightCtrl1_TrafficLight0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight0.getYellow());
      
      trafficLightCtrl1_TrafficLight0.setYellow(true);
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight1 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight1.getGreen());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight0.getGreen());
      
      trafficLightCtrl1_TrafficLight0.setGreen(true);
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight1 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight1.getRed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian;
      assertFalse(trafficLightCtrl1_Pedestrian0.getGreen());
      
      trafficLightCtrl1_Pedestrian0.setGreen(true);
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian1 = trafficLightCtrl1_0.pedestrian();
      assertFalse(trafficLightCtrl1_Pedestrian1.getRequest());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.setIsExecuting(true);
      boolean boolean0 = trafficLightCtrl1_0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      boolean boolean0 = trafficLightCtrl1_0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian();
      assertFalse(trafficLightCtrl1_Pedestrian0.getRequest());
      
      trafficLightCtrl1_Pedestrian0.setRequest(true);
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian1 = trafficLightCtrl1_0.pedestrian();
      assertFalse(trafficLightCtrl1_Pedestrian1.getRed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = new TrafficLightCtrl1.Pedestrian();
      assertFalse(trafficLightCtrl1_Pedestrian0.getRed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian;
      assertFalse(trafficLightCtrl1_Pedestrian0.getRed());
      
      trafficLightCtrl1_Pedestrian0.setRed(true);
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian1 = trafficLightCtrl1_0.pedestrian();
      assertFalse(trafficLightCtrl1_Pedestrian1.getGreen());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.$NULLSTATE$;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_PEDWAITING;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_OFF_R1_YELLOWOFF;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_OFF_R1_YELLOWON;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_SAFE;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_STREETPREPARE;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_PEDESTRIANRED;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_PEDESTRIANGREEN;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_STREETRED;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_STREETATTENTION;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITOFF;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITON;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_OFF;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.State trafficLightCtrl1_State0 = TrafficLightCtrl1.State.MAIN_REGION_ON_R1_STREETGREEN;
      boolean boolean0 = trafficLightCtrl1_0.isStateActive(trafficLightCtrl1_State0);
      assertFalse(trafficLightCtrl1_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      boolean boolean0 = trafficLightCtrl1_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      // Undeclared exception!
      try { 
        trafficLightCtrl1_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      // Undeclared exception!
      try { 
        trafficLightCtrl1_0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = new TrafficLightCtrl1.TrafficLight();
      boolean boolean0 = trafficLightCtrl1_TrafficLight0.getYellow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = new TrafficLightCtrl1.TrafficLight();
      boolean boolean0 = trafficLightCtrl1_TrafficLight0.getRed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = new TrafficLightCtrl1.TrafficLight();
      boolean boolean0 = trafficLightCtrl1_TrafficLight0.getGreen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian;
      boolean boolean0 = trafficLightCtrl1_Pedestrian0.getRed();
      assertFalse(trafficLightCtrl1_0.isActive());
      assertFalse(trafficLightCtrl1_Pedestrian0.getRequest());
      assertFalse(boolean0);
      assertFalse(trafficLightCtrl1_Pedestrian0.getGreen());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian;
      boolean boolean0 = trafficLightCtrl1_Pedestrian0.getGreen();
      assertFalse(trafficLightCtrl1_Pedestrian0.getRequest());
      assertFalse(trafficLightCtrl1_0.isActive());
      assertFalse(boolean0);
      assertFalse(trafficLightCtrl1_Pedestrian0.getRed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      boolean boolean0 = trafficLightCtrl1_0.isFinal();
      assertFalse(trafficLightCtrl1_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.setIsExecuting(true);
      trafficLightCtrl1_0.exit();
      assertFalse(trafficLightCtrl1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      // Undeclared exception!
      try { 
        trafficLightCtrl1_0.raiseTimeEvent(444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 444
         //
         verifyException("statechart.TrafficLightCtrl1", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.Pedestrian trafficLightCtrl1_Pedestrian0 = trafficLightCtrl1_0.pedestrian();
      boolean boolean0 = trafficLightCtrl1_Pedestrian0.getRequest();
      assertFalse(trafficLightCtrl1_0.isActive());
      assertFalse(boolean0);
      assertFalse(trafficLightCtrl1_Pedestrian0.getRed());
      assertFalse(trafficLightCtrl1_Pedestrian0.getGreen());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.raiseOnOff();
      assertFalse(trafficLightCtrl1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      // Undeclared exception!
      try { 
        trafficLightCtrl1_0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightCtrl1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.raisePedestrianRequest();
      assertFalse(trafficLightCtrl1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.OperationCallback trafficLightCtrl1_OperationCallback0 = mock(TrafficLightCtrl1.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1_0.setOperationCallback(trafficLightCtrl1_OperationCallback0);
      assertFalse(trafficLightCtrl1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.setTimerService((ITimerService) null);
      assertFalse(trafficLightCtrl1_0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight0 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight0.getRed());
      
      trafficLightCtrl1_TrafficLight0.setRed(true);
      TrafficLightCtrl1.TrafficLight trafficLightCtrl1_TrafficLight1 = trafficLightCtrl1_0.trafficLight();
      assertFalse(trafficLightCtrl1_TrafficLight1.getGreen());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TrafficLightCtrl1 trafficLightCtrl1_0 = new TrafficLightCtrl1();
      trafficLightCtrl1_0.getTimerService();
      assertFalse(trafficLightCtrl1_0.isActive());
  }
}
