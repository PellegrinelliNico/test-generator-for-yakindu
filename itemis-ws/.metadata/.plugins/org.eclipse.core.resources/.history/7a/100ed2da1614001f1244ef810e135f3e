/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 19:34:15 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Configure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Configure_ESTest extends Configure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setWritten(1L);
      long long0 = configure0.getWritten();
      assertEquals(0L, configure0.getMax());
      assertEquals(1L, long0);
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setWritten((-1L));
      long long0 = configure0.getWritten();
      assertEquals(0L, configure0.getIdx());
      assertEquals((-1L), long0);
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setMax(1494L);
      long long0 = configure0.getMax();
      assertEquals(1494L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setMax((-1374L));
      long long0 = configure0.getMax();
      assertEquals((-1374L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setIsExecuting(true);
      boolean boolean0 = configure0.getIsExecuting();
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Configure configure0 = new Configure();
      boolean boolean0 = configure0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, configure0.getMax());
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Configure configure0 = new Configure();
      assertEquals(0L, configure0.getIdx());
      
      configure0.setIdx(1L);
      long long0 = configure0.getIdx();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setIdx((-29L));
      long long0 = configure0.getIdx();
      assertEquals((-29L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.isStateActive((Configure.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.$NULLSTATE$;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.MAIN_REGION_BOOTED;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertEquals(0L, configure0.getMax());
      assertEquals(0L, configure0.getIdx());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.MAIN_REGION_FAILED;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertEquals(0L, configure0.getMax());
      assertFalse(boolean0);
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.MAIN_REGION_CONFIGURE;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertFalse(boolean0);
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.MAIN_REGION_WAIT_FOR_BOOT;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertEquals(0L, configure0.getIdx());
      assertFalse(boolean0);
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.State configure_State0 = Configure.State.MAIN_REGION_WAIT_FOR_CONNECT;
      boolean boolean0 = configure0.isStateActive(configure_State0);
      assertFalse(boolean0);
      assertEquals(0L, configure0.getMax());
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Configure configure0 = new Configure();
      boolean boolean0 = configure0.nextEvent();
      assertFalse(boolean0);
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Configure configure0 = new Configure();
      boolean boolean0 = configure0.isActive();
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.raiseTimeEvent(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Configure configure0 = new Configure();
      boolean boolean0 = configure0.isFinal();
      assertEquals(0L, configure0.getMax());
      assertFalse(boolean0);
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getTimeout();
      assertEquals(0L, configure0.getIdx());
      assertEquals(1000L, long0);
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setIsExecuting(true);
      configure0.exit();
      assertEquals(0L, configure0.getMax());
      assertEquals(0L, configure0.getIdx());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getMax();
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Configure configure0 = new Configure();
      assertFalse(configure0.isActive());
      
      configure0.exit();
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getWritetime();
      assertFalse(configure0.isActive());
      assertEquals(0L, configure0.getIdx());
      assertEquals(50L, long0);
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getFlashtime();
      assertEquals(0L, configure0.getIdx());
      assertFalse(configure0.isActive());
      assertEquals(200L, long0);
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getWritten();
      assertEquals(0L, long0);
      assertFalse(configure0.isActive());
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getResettime();
      assertEquals(0L, configure0.getMax());
      assertFalse(configure0.isActive());
      assertEquals(0L, configure0.getIdx());
      assertEquals(3500L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.getTimerService();
      assertEquals(0L, configure0.getMax());
      assertEquals(0L, configure0.getIdx());
      assertFalse(configure0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.raiseCompleted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Configure configure0 = new Configure();
      configure0.setTimerService((ITimerService) null);
      assertFalse(configure0.isActive());
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Configure configure0 = new Configure();
      // Undeclared exception!
      try { 
        configure0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Configure", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Configure configure0 = new Configure();
      long long0 = configure0.getIdx();
      assertEquals(0L, long0);
      assertEquals(0L, configure0.getMax());
      assertFalse(configure0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Configure configure0 = new Configure();
      Configure.OperationCallback configure_OperationCallback0 = mock(Configure.OperationCallback.class, new ViolatedAssumptionAnswer());
      configure0.setOperationCallback(configure_OperationCallback0);
      assertEquals(0L, configure0.getIdx());
      assertEquals(0L, configure0.getMax());
      assertFalse(configure0.isActive());
  }
}
