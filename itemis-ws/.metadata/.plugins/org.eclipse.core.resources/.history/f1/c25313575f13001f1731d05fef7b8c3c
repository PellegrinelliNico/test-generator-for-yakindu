/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 21:41:38 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrackerSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrackerSimplified_ESTest extends TrackerSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      // Undeclared exception!
      try { 
        trackerSimplified0.raiseTimeEvent(5911);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      // Undeclared exception!
      try { 
        trackerSimplified0.raiseTimeEvent((-1225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1225
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      // Undeclared exception!
      try { 
        trackerSimplified0.raiseReceived();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      // Undeclared exception!
      try { 
        trackerSimplified0.isStateActive((TrackerSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.setTimerService(iTimerService0);
      trackerSimplified0.enter();
      trackerSimplified0.triggerWithoutEvent();
      assertTrue(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(trackerSimplified_OperationCallback0).valid();
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.raiseTimeEvent(0);
      trackerSimplified0.triggerWithoutEvent();
      assertTrue(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.triggerWithoutEvent();
      assertTrue(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.raiseReceived();
      assertTrue(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(trackerSimplified_OperationCallback0).valid();
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.raiseTimeEvent(0);
      assertTrue(trackerSimplified0.isActive());
      
      trackerSimplified0.exit();
      assertFalse(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      trackerSimplified0.exit();
      assertFalse(trackerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.setTimerService(iTimerService0);
      trackerSimplified0.enter();
      assertTrue(trackerSimplified0.isActive());
      
      trackerSimplified0.exit();
      assertFalse(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      assertTrue(trackerSimplified0.isActive());
      
      trackerSimplified0.exit();
      assertFalse(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_IDLE;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertTrue(trackerSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(trackerSimplified_OperationCallback0).valid();
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING_TRACKING_FIRST;
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.raiseTimeEvent(0);
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertTrue(trackerSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.setTimerService(iTimerService0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertTrue(trackerSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.$NULLSTATE$;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_IDLE;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING_TRACKING_FREE;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING_TRACKING_FIRST;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_DRIVING_TRACKING_OCCUPY;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      TrackerSimplified.State trackerSimplified_State0 = TrackerSimplified.State.MAIN_REGION_PREPARING;
      boolean boolean0 = trackerSimplified0.isStateActive(trackerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trackerSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.raiseTimeEvent(1);
      assertFalse(trackerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      assertFalse(trackerSimplified0.isActive());
      
      trackerSimplified0.enter();
      boolean boolean0 = trackerSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      boolean boolean0 = trackerSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trackerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      // Undeclared exception!
      try { 
        trackerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrackerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      boolean boolean0 = trackerSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(trackerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrackerSimplified trackerSimplified0 = new TrackerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trackerSimplified0.setTimerService(iTimerService0);
      TrackerSimplified.OperationCallback trackerSimplified_OperationCallback0 = mock(TrackerSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(trackerSimplified_OperationCallback0).valid();
      trackerSimplified0.setOperationCallback(trackerSimplified_OperationCallback0);
      trackerSimplified0.enter();
      trackerSimplified0.raiseReceived();
      trackerSimplified0.raiseTimeEvent(0);
      trackerSimplified0.raiseTimeEvent(1);
      trackerSimplified0.exit();
      assertFalse(trackerSimplified0.isActive());
  }
}
