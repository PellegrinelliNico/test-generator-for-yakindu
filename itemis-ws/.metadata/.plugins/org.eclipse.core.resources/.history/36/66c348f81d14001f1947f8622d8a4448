/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 21:35:22 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Update;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Update_ESTest extends Update_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Update update0 = new Update();
      update0.setIsExecuting(true);
      boolean boolean0 = update0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.getIsExecuting();
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Update update0 = new Update();
      update0.setError(200L);
      long long0 = update0.getError();
      assertEquals(200L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Update update0 = new Update();
      update0.setError((-1647L));
      long long0 = update0.getError();
      assertEquals((-1647L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Update update0 = new Update();
      update0.setCount(3L);
      long long0 = update0.getCount();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Update update0 = new Update();
      assertEquals(0L, update0.getCount());
      
      update0.setCount((-1L));
      long long0 = update0.getCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.isStateActive((Update.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.$NULLSTATE$;
      update0.isStateActive(update_State0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_WAIT_FOR_CONNECT;
      update0.isStateActive(update_State0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_BOOTED;
      update0.isStateActive(update_State0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_FAILED;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getCount());
      assertFalse(boolean0);
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_WAIT_BOOTLOADER;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_FLASH_CHECK;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_FLASH_REST;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getCount());
      assertFalse(boolean0);
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_FLASH_REQUEST;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertFalse(boolean0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_RESET;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_FLASH_COMPLETE_PAGE;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Update update0 = new Update();
      Update.State update_State0 = Update.State.MAIN_REGION_PING;
      boolean boolean0 = update0.isStateActive(update_State0);
      assertFalse(boolean0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.nextEvent();
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.isFinal();
      assertFalse(boolean0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getCount();
      assertEquals(0L, update0.getError());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getDelay_flash_request();
      assertEquals(0L, update0.getCount());
      assertEquals(200L, long0);
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getRetry();
      assertEquals(0L, update0.getCount());
      assertEquals(10L, long0);
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.raiseComplete();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getDelay_reset();
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
      assertEquals(1200L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getDelay_boot();
      assertEquals(3000L, long0);
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getTimeout();
      assertEquals(250L, long0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Update update0 = new Update();
      update0.getTimerService();
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.raiseTimeEvent(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getDelay_flash_page();
      assertEquals(0L, update0.getCount());
      assertEquals(60L, long0);
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Update update0 = new Update();
      Update.OperationCallback update_OperationCallback0 = mock(Update.OperationCallback.class, new ViolatedAssumptionAnswer());
      update0.setOperationCallback(update_OperationCallback0);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Update update0 = new Update();
      update0.setTimerService((ITimerService) null);
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Update update0 = new Update();
      long long0 = update0.getError();
      assertEquals(0L, long0);
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        update0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Update update0 = new Update();
      assertFalse(update0.isActive());
      
      update0.exit();
      assertEquals(0L, update0.getError());
      assertEquals(0L, update0.getCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Update update0 = new Update();
      update0.setIsExecuting(true);
      update0.exit();
      assertEquals(0L, update0.getCount());
      assertEquals(0L, update0.getError());
      assertFalse(update0.isActive());
  }
}
