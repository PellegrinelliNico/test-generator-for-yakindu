/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 05:55:07 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._blinkSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _blinkSimplified_ESTest extends _blinkSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      // Undeclared exception!
      try { 
        _blinkSimplified0.raiseTimeEvent(1942);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _blinkSimplified0.raiseTimeEvent(971);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 971
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      // Undeclared exception!
      try { 
        _blinkSimplified0.isStateActive((_blinkSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.enter();
      _blinkSimplified0.triggerWithoutEvent();
      assertTrue(_blinkSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      // Undeclared exception!
      try { 
        _blinkSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      _blinkSimplified0.enter();
      assertTrue(_blinkSimplified0.isActive());
      
      _blinkSimplified0.exit();
      assertFalse(_blinkSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON2;
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      _blinkSimplified0.enter();
      _blinkSimplified0.raiseTimeEvent(0);
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertTrue(_blinkSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON1;
      _blinkSimplified0.enter();
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertTrue(_blinkSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT;
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.enter();
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertTrue(_blinkSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.$NULLSTATE$;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON5;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON4;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON3;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON2;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_DARK;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.State _blinkSimplified_State0 = _blinkSimplified.State.MAIN_LIGHT__REGION0_ON1;
      boolean boolean0 = _blinkSimplified0.isStateActive(_blinkSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _blinkSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.enter();
      _blinkSimplified0.raiseTimeEvent(0);
      _blinkSimplified0.raiseTimeEvent(0);
      assertTrue(_blinkSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.raiseTimeEvent(0);
      assertFalse(_blinkSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      assertFalse(_blinkSimplified0.isActive());
      
      _blinkSimplified0.enter();
      boolean boolean0 = _blinkSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      boolean boolean0 = _blinkSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        _blinkSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      // Undeclared exception!
      try { 
        _blinkSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._blinkSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      _blinkSimplified.OperationCallback _blinkSimplified_OperationCallback0 = mock(_blinkSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setOperationCallback(_blinkSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      _blinkSimplified0.setTimerService(iTimerService0);
      _blinkSimplified0.enter();
      _blinkSimplified0.raiseTimeEvent(0);
      assertTrue(_blinkSimplified0.isActive());
      
      _blinkSimplified0.exit();
      assertFalse(_blinkSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _blinkSimplified _blinkSimplified0 = new _blinkSimplified();
      boolean boolean0 = _blinkSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(_blinkSimplified0.isActive());
  }
}
