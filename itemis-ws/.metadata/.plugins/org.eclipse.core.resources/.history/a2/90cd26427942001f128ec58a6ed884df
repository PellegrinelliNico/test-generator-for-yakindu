/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class MyStatechartSimplified implements ITimed, IEventDriven {

    public enum State {

        MAIN_REGION_STATEA, MAIN_REGION_STATEB, MAIN_REGION__FINAL_, MAIN_REGION_STATEC, $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[2];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public MyStatechartSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart MyStatechart */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart MyStatechart */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return (stateVector[0] == State.MAIN_REGION__FINAL_);
    }

    private void clearInEvents() {
        boolEvent = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                main_region_StateA_react(-1l);
                break;
            case MAIN_REGION_STATEB:
                main_region_StateB_react(-1l);
                break;
            case MAIN_REGION__FINAL_:
                main_region__final__react(-1l);
                break;
            case MAIN_REGION_STATEC:
                main_region_StateC_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_STATEA:
                return stateVector[0] == State.MAIN_REGION_STATEA;
            case MAIN_REGION_STATEB:
                return stateVector[0] == State.MAIN_REGION_STATEB;
            case MAIN_REGION__FINAL_:
                return stateVector[0] == State.MAIN_REGION__FINAL_;
            case MAIN_REGION_STATEC:
                return stateVector[0] == State.MAIN_REGION_STATEC;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    private boolean boolEvent;

    private boolean boolEventValue;

    public void raiseBoolEvent(final boolean value) {
        inEventQueue.add(() -> {
            boolEventValue = value;
            boolEvent = true;
        });
        runCycle();
    }

    private boolean getBoolEventValue() {
        if (!boolEvent)
            throw new IllegalStateException("Illegal event value access. Event BoolEvent is not raised!");
        return boolEventValue;
    }

    /* Entry action for state 'StateA'. */
    private void entryAction_main_region_StateA() {
        /* Entry action for state 'StateA'. */
        timerService.setTimer(this, 0, (5l * 1000l), false);
    }

    /* Entry action for state 'StateC'. */
    private void entryAction_main_region_StateC() {
        /* Entry action for state 'StateC'. */
        timerService.setTimer(this, 1, 1000l, true);
    }

    /* Exit action for state 'StateA'. */
    private void exitAction_main_region_StateA() {
        /* Exit action for state 'StateA'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state 'StateC'. */
    private void exitAction_main_region_StateC() {
        /* Exit action for state 'StateC'. */
        timerService.unsetTimer(this, 1);
    }

    /* 'default' enter sequence for state StateA */
    private void enterSequence_main_region_StateA_default() {
        /* 'default' enter sequence for state StateA */
        entryAction_main_region_StateA();
        stateVector[0] = State.MAIN_REGION_STATEA;
    }

    /* 'default' enter sequence for state StateB */
    private void enterSequence_main_region_StateB_default() {
        /* 'default' enter sequence for state StateB */
        stateVector[0] = State.MAIN_REGION_STATEB;
    }

    /* Default enter sequence for final state */
    private void enterSequence_main_region__final__default() {
        /* Default enter sequence for final state */
        stateVector[0] = State.MAIN_REGION__FINAL_;
    }

    /* 'default' enter sequence for state StateC */
    private void enterSequence_main_region_StateC_default() {
        /* 'default' enter sequence for state StateC */
        entryAction_main_region_StateC();
        stateVector[0] = State.MAIN_REGION_STATEC;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state StateA */
    private void exitSequence_main_region_StateA() {
        /* Default exit sequence for state StateA */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateA();
    }

    /* Default exit sequence for state StateB */
    private void exitSequence_main_region_StateB() {
        /* Default exit sequence for state StateB */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for final state. */
    private void exitSequence_main_region__final_() {
        /* Default exit sequence for final state. */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state StateC */
    private void exitSequence_main_region_StateC() {
        /* Default exit sequence for state StateC */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_StateC();
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_STATEA:
                exitSequence_main_region_StateA();
                break;
            case MAIN_REGION_STATEB:
                exitSequence_main_region_StateB();
                break;
            case MAIN_REGION__FINAL_:
                exitSequence_main_region__final_();
                break;
            case MAIN_REGION_STATEC:
                exitSequence_main_region_StateC();
                break;
            default:
                break;
        }
    }

    /* The reactions of state null. */
    private void react_main_region__choice_0() {
        /* The reactions of state null. */
        if (getBoolEventValue()) {
            enterSequence_main_region_StateC_default();
        } else {
            enterSequence_main_region__final__default();
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_StateA_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_StateA_react(long transitioned_before) {
        /* The reactions of state StateA. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[0]) {
                exitSequence_main_region_StateA();
                timeEvents[0] = false;
                enterSequence_main_region_StateB_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_StateB_react(long transitioned_before) {
        /* The reactions of state StateB. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (boolEvent) {
                exitSequence_main_region_StateB();
                react_main_region__choice_0();
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region__final__react(long transitioned_before) {
        /* The reactions of state null. */
        return react(transitioned_before);
    }

    private long main_region_StateC_react(long transitioned_before) {
        /* The reactions of state StateC. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[1]) {
                exitSequence_main_region_StateC();
                timeEvents[1] = false;
                enterSequence_main_region_StateC_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
