/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:33:17 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._03_nested_composite_states;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _03_nested_composite_states_ESTest extends _03_nested_composite_states_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.raiseTimeEvent(0);
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.user = null;
      _03_nested_composite_states.User _03_nested_composite_states_User0 = _03_nested_composite_states0.user();
      assertNull(_03_nested_composite_states_User0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.lum_sensor = null;
      _03_nested_composite_states.Lum_sensor _03_nested_composite_states_Lum_sensor0 = _03_nested_composite_states0.lum_sensor();
      assertNull(_03_nested_composite_states_Lum_sensor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.setIsExecuting(true);
      boolean boolean0 = _03_nested_composite_states0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.setBrightness(3638L);
      long long0 = _03_nested_composite_states0.getBrightness();
      assertEquals(3638L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.setBrightness((-936L));
      long long0 = _03_nested_composite_states0.getBrightness();
      assertEquals((-936L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      // Undeclared exception!
      try { 
        _03_nested_composite_states0.isStateActive((_03_nested_composite_states.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._03_nested_composite_states", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _03_nested_composite_states.Lum_sensor _03_nested_composite_states_Lum_sensor0 = new _03_nested_composite_states.Lum_sensor();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _03_nested_composite_states.Sensor _03_nested_composite_states_Sensor0 = new _03_nested_composite_states.Sensor();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _03_nested_composite_states.User _03_nested_composite_states_User0 = new _03_nested_composite_states.User();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.$NULLSTATE$;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_MOTIONDETECTED;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_MOTIONDETECTIONMODE_R1_IDLE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE_R1_TWILIGHTDETECTED;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_AUTOMATICMODE_R1_TWILIGHTDETECTIONMODE_R1_IDLE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.State _03_nested_composite_states_State0 = _03_nested_composite_states.State.MAIN_REGION_MANUALMODE;
      boolean boolean0 = _03_nested_composite_states0.isStateActive(_03_nested_composite_states_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      boolean boolean0 = _03_nested_composite_states0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.exit();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      // Undeclared exception!
      try { 
        _03_nested_composite_states0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_nested_composite_states", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      // Undeclared exception!
      try { 
        _03_nested_composite_states0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_nested_composite_states", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      long long0 = _03_nested_composite_states0.getBrightness();
      assertEquals(0L, long0);
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.getTimerService();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      boolean boolean0 = _03_nested_composite_states0.isFinal();
      assertFalse(_03_nested_composite_states0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      // Undeclared exception!
      try { 
        _03_nested_composite_states0.raiseTimeEvent(1323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1323
         //
         verifyException("statechart._03_nested_composite_states", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      boolean boolean0 = _03_nested_composite_states0.getIsExecuting();
      assertFalse(boolean0);
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.setIsExecuting(true);
      _03_nested_composite_states0.exit();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states0.setTimerService((ITimerService) null);
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.Lum_sensor _03_nested_composite_states_Lum_sensor0 = _03_nested_composite_states0.lum_sensor();
      _03_nested_composite_states_Lum_sensor0.raiseDark();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.Lum_sensor _03_nested_composite_states_Lum_sensor0 = _03_nested_composite_states0.lum_sensor();
      _03_nested_composite_states_Lum_sensor0.raiseBright();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.Sensor _03_nested_composite_states_Sensor0 = _03_nested_composite_states0.sensor();
      _03_nested_composite_states_Sensor0.raiseMotion();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.User _03_nested_composite_states_User0 = _03_nested_composite_states0.user();
      _03_nested_composite_states_User0.raiseMode_button();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.User _03_nested_composite_states_User0 = _03_nested_composite_states0.user();
      _03_nested_composite_states_User0.raiseOff_button();
      assertFalse(_03_nested_composite_states0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _03_nested_composite_states _03_nested_composite_states0 = new _03_nested_composite_states();
      _03_nested_composite_states.User _03_nested_composite_states_User0 = _03_nested_composite_states0.user();
      _03_nested_composite_states_User0.raiseOn_button();
      assertFalse(_03_nested_composite_states0.isActive());
  }
}
