/*
 * This file was automatically generated by EvoSuite
 * Thu May 09 19:48:48 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.LineFollowerSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineFollowerSimplified_ESTest extends LineFollowerSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      lineFollowerSimplified0.raiseTimeEvent(0);
      assertFalse(lineFollowerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      // Undeclared exception!
      try { 
        lineFollowerSimplified0.isStateActive((LineFollowerSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.LineFollowerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      lineFollowerSimplified0.enter();
      lineFollowerSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        lineFollowerSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.LineFollowerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.PID_CALCULATER_PID_COMPUTE;
      lineFollowerSimplified0.enter();
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertTrue(lineFollowerSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      lineFollowerSimplified0.enter();
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.STATE_TRANSITIONS_STATIC_STATE;
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertTrue(lineFollowerSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.$NULLSTATE$;
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.STATE_TRANSITIONS_FORWARD;
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.PID_CALCULATER_PID_COMPUTE;
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      LineFollowerSimplified.State lineFollowerSimplified_State0 = LineFollowerSimplified.State.STATE_TRANSITIONS_STATIC_STATE;
      boolean boolean0 = lineFollowerSimplified0.isStateActive(lineFollowerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      boolean boolean0 = lineFollowerSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      assertFalse(lineFollowerSimplified0.isActive());
      
      lineFollowerSimplified0.enter();
      boolean boolean0 = lineFollowerSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      // Undeclared exception!
      try { 
        lineFollowerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LineFollowerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      // Undeclared exception!
      try { 
        lineFollowerSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LineFollowerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      // Undeclared exception!
      try { 
        lineFollowerSimplified0.raiseTimeEvent((-1192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1192
         //
         verifyException("statechart.LineFollowerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      lineFollowerSimplified0.enter();
      assertTrue(lineFollowerSimplified0.isActive());
      
      lineFollowerSimplified0.exit();
      assertFalse(lineFollowerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      boolean boolean0 = lineFollowerSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      lineFollowerSimplified0.enter();
      lineFollowerSimplified0.runCycle();
      assertFalse(lineFollowerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      lineFollowerSimplified0.setTimerService(iTimerService0);
      lineFollowerSimplified0.runCycle();
      assertFalse(lineFollowerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineFollowerSimplified lineFollowerSimplified0 = new LineFollowerSimplified();
      lineFollowerSimplified0.exit();
      assertFalse(lineFollowerSimplified0.isFinal());
  }
}
