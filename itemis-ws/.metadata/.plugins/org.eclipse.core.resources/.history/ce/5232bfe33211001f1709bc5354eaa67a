/*
 * This file was automatically generated by EvoSuite
 * Mon May 13 14:11:57 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrafficLightCtrlSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightCtrlSimplified_ESTest extends TrafficLightCtrlSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.raiseTimeEvent(1);
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.raiseTimeEvent(756);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 756
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.raisePolice_interrupt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightCtrlSimplified.TrafficLight trafficLightCtrlSimplified_TrafficLight0 = new TrafficLightCtrlSimplified.TrafficLight();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightCtrlSimplified.Timer trafficLightCtrlSimplified_Timer0 = new TrafficLightCtrlSimplified.Timer();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.triggerWithoutEvent();
      assertTrue(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      trafficLightCtrlSimplified0.triggerWithoutEvent();
      assertTrue(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      trafficLightCtrlSimplified0.exit();
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      assertTrue(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.$NULLSTATE$;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TIMER_RUNNING;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TIMER_DISABLED;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_OFF;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      TrafficLightCtrlSimplified.State trafficLightCtrlSimplified_State0 = TrafficLightCtrlSimplified.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
      boolean boolean0 = trafficLightCtrlSimplified0.isStateActive(trafficLightCtrlSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.raisePolice_interrupt();
      assertFalse(trafficLightCtrlSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      boolean boolean0 = trafficLightCtrlSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      assertFalse(trafficLightCtrlSimplified0.isActive());
      
      trafficLightCtrlSimplified0.enter();
      boolean boolean0 = trafficLightCtrlSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      trafficLightCtrlSimplified0.exit();
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      // Undeclared exception!
      try { 
        trafficLightCtrlSimplified0.raiseTimeEvent(756);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrlSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      trafficLightCtrlSimplified0.timer();
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      trafficLightCtrlSimplified0.trafficLight();
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      trafficLightCtrlSimplified0.raisePolice_interrupt();
      trafficLightCtrlSimplified0.raiseToggle();
      assertFalse(trafficLightCtrlSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      boolean boolean0 = trafficLightCtrlSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightCtrlSimplified trafficLightCtrlSimplified0 = new TrafficLightCtrlSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrlSimplified0.setTimerService(iTimerService0);
      trafficLightCtrlSimplified0.enter();
      trafficLightCtrlSimplified0.raiseToggle();
      trafficLightCtrlSimplified0.raiseToggle();
      assertTrue(trafficLightCtrlSimplified0.isActive());
      
      trafficLightCtrlSimplified0.exit();
      assertFalse(trafficLightCtrlSimplified0.isActive());
  }
}
