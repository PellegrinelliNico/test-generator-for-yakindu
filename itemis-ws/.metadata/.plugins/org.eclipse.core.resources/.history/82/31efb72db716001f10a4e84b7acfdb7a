/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:57:22 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Childfirst;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Childfirst_ESTest extends Childfirst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.raiseE();
      childfirst0.enter();
      childfirst0.runCycle();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(2L, childfirst0.getO());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setO(4038L);
      long long0 = childfirst0.getO();
      assertEquals(4038L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setO((-125L));
      long long0 = childfirst0.getO();
      assertEquals((-125L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setN(688L);
      long long0 = childfirst0.getN();
      assertEquals(688L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setN((-2552L));
      long long0 = childfirst0.getN();
      assertEquals((-2552L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      long long0 = childfirst0.getM();
      assertTrue(childfirst0.isActive());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setM((-233L));
      long long0 = childfirst0.getM();
      assertEquals((-233L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setIsExecuting(true);
      boolean boolean0 = childfirst0.getIsExecuting();
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      boolean boolean0 = childfirst0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      // Undeclared exception!
      try { 
        childfirst0.isStateActive((Childfirst.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Childfirst", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.runCycle();
      assertTrue(childfirst0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.exit();
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.exit();
      assertEquals(2L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.raiseE();
      childfirst0.runCycle();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_D;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertTrue(childfirst0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.raiseE();
      childfirst0.runCycle();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A_R1_C;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertTrue(childfirst0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A_R1_B;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(2L, childfirst0.getM());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertTrue(childfirst0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, childfirst0.getN());
      assertFalse(boolean0);
      assertEquals(0L, childfirst0.getO());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_D;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertFalse(boolean0);
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A_R1_C;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getM());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      Childfirst.State childfirst_State0 = Childfirst.State.$NULLSTATE$;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getM());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      Childfirst.State childfirst_State0 = Childfirst.State.MAIN_REGION_A_R1_B;
      boolean boolean0 = childfirst0.isStateActive(childfirst_State0);
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getM());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      assertFalse(childfirst0.isActive());
      
      childfirst0.runCycle();
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      boolean boolean0 = childfirst0.isActive();
      assertEquals(2L, childfirst0.getM());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      boolean boolean0 = childfirst0.isActive();
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertFalse(boolean0);
      assertEquals(0L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setIsExecuting(true);
      childfirst0.exit();
      assertEquals(0L, childfirst0.getO());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getM());
      assertFalse(childfirst0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setIsExecuting(true);
      childfirst0.enter();
      assertEquals(0L, childfirst0.getM());
      assertFalse(childfirst0.isActive());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.runCycle();
      assertEquals(2L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      long long0 = childfirst0.getN();
      assertEquals(0L, long0);
      assertEquals(0L, childfirst0.getO());
      assertFalse(childfirst0.isActive());
      assertEquals(0L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.exit();
      assertEquals(2L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.setIsExecuting(true);
      childfirst0.runCycle();
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertFalse(childfirst0.isActive());
      assertEquals(0L, childfirst0.getM());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      boolean boolean0 = childfirst0.isFinal();
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertFalse(childfirst0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      long long0 = childfirst0.getM();
      assertEquals(0L, childfirst0.getN());
      assertEquals(0L, childfirst0.getO());
      assertFalse(childfirst0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      childfirst0.enter();
      childfirst0.raiseE();
      childfirst0.runCycle();
      childfirst0.exit();
      assertEquals(1L, childfirst0.getO());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Childfirst childfirst0 = new Childfirst();
      long long0 = childfirst0.getO();
      assertEquals(0L, childfirst0.getM());
      assertEquals(0L, long0);
      assertFalse(childfirst0.isActive());
      assertEquals(0L, childfirst0.getN());
  }
}
