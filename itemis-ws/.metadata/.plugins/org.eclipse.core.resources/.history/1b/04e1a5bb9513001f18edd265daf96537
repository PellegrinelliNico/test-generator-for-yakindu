/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:30:35 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.FireAlarm_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FireAlarm_UnitSimplified_ESTest extends FireAlarm_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      FireAlarm_UnitSimplified.Timer fireAlarm_UnitSimplified_Timer0 = fireAlarm_UnitSimplified0.timer();
      fireAlarm_UnitSimplified_Timer0.raiseReset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        fireAlarm_UnitSimplified0.raiseTimeEvent(22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("statechart.FireAlarm_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      FireAlarm_UnitSimplified.Timer fireAlarm_UnitSimplified_Timer0 = fireAlarm_UnitSimplified0.timer();
      fireAlarm_UnitSimplified0.enter();
      fireAlarm_UnitSimplified_Timer0.raiseEnable();
      fireAlarm_UnitSimplified_Timer0.raiseDisable();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING_LEVEL_FINAL_WARNING;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = new FireAlarm_UnitSimplified.Mode(fireAlarm_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.Alarm fireAlarm_UnitSimplified_Alarm0 = new FireAlarm_UnitSimplified.Alarm(fireAlarm_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FireAlarm_UnitSimplified.Message fireAlarm_UnitSimplified_Message0 = new FireAlarm_UnitSimplified.Message();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FireAlarm_UnitSimplified.Sensors fireAlarm_UnitSimplified_Sensors0 = new FireAlarm_UnitSimplified.Sensors();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.Timer fireAlarm_UnitSimplified_Timer0 = fireAlarm_UnitSimplified0.timer();
      // Undeclared exception!
      try { 
        fireAlarm_UnitSimplified_Timer0.raiseReset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.Timer fireAlarm_UnitSimplified_Timer0 = new FireAlarm_UnitSimplified.Timer(fireAlarm_UnitSimplified0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = fireAlarm_UnitSimplified0.mode();
      fireAlarm_UnitSimplified_Mode0.raiseDanger();
      fireAlarm_UnitSimplified_Mode0.raiseSafe();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = fireAlarm_UnitSimplified0.mode();
      fireAlarm_UnitSimplified_Mode0.raiseDanger();
      fireAlarm_UnitSimplified0.enter();
      fireAlarm_UnitSimplified0.triggerWithoutEvent();
      assertTrue(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Timer fireAlarm_UnitSimplified_Timer0 = fireAlarm_UnitSimplified0.timer();
      fireAlarm_UnitSimplified_Timer0.raiseEnable();
      fireAlarm_UnitSimplified0.exit();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = fireAlarm_UnitSimplified0.mode();
      fireAlarm_UnitSimplified_Mode0.raiseDanger();
      fireAlarm_UnitSimplified0.exit();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING_;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = fireAlarm_UnitSimplified0.mode();
      fireAlarm_UnitSimplified_Mode0.raiseWarning();
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING_;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertTrue(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__DISABLED_;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertTrue(fireAlarm_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_SAFE;
      fireAlarm_UnitSimplified0.enter();
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertTrue(fireAlarm_UnitSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State.$NULLSTATE$;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING_;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_DANGER;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(boolean0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING_;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING__R1__FINAL_WARNING_ENDED;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING__R1__INITIAL_WARNING_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__TIMER_RUNNING__R1__FINAL_WARNING_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__TIMER_STATUS__DISABLED_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__HEATSENSOR__MONITORING_HEAT_LEVEL_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__CARBONSENSOR__MONITORING_CARBON_LEVEL_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_VALUE_MONITORING_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED__WARNING_BEFORE_SOUNDING_SOUNDALARM;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__THRESHOLD_REACHED__WARNING_BEFORE_SOUNDING_SENSORWARNING;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__MONITORING_SENSOR_LEVEL__SENSOR_TRIGGERED__SMOKESENSOR__MONITORING_SMOKE_LEVEL_;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_DANGER__911_ACTIVATED___911_EMERGENCY_ACTIVATED;
      fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_WARNING_LEVEL_INITIAL_WARNING;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(boolean0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__STATUS_SAFE;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__ALARM_SWITCH_ALARM_ON;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      FireAlarm_UnitSimplified.State fireAlarm_UnitSimplified_State0 = FireAlarm_UnitSimplified.State._FIREALARM_UNIT___FIRE_ALARM_RUNNING__ALARM_SWITCH_ALARM_OFF;
      boolean boolean0 = fireAlarm_UnitSimplified0.isStateActive(fireAlarm_UnitSimplified_State0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      boolean boolean0 = fireAlarm_UnitSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      
      fireAlarm_UnitSimplified0.enter();
      boolean boolean0 = fireAlarm_UnitSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      fireAlarm_UnitSimplified0.exit();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      // Undeclared exception!
      try { 
        fireAlarm_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Mode fireAlarm_UnitSimplified_Mode0 = fireAlarm_UnitSimplified0.mode();
      fireAlarm_UnitSimplified_Mode0.raiseDanger();
      fireAlarm_UnitSimplified0.raiseTimeEvent(0);
      assertTrue(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      fireAlarm_UnitSimplified0.sensors();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      fireAlarm_UnitSimplified0.message();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      // Undeclared exception!
      try { 
        fireAlarm_UnitSimplified0.raiseTimeEvent(1165);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      // Undeclared exception!
      try { 
        fireAlarm_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.FireAlarm_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      boolean boolean0 = fireAlarm_UnitSimplified0.isFinal();
      assertFalse(fireAlarm_UnitSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FireAlarm_UnitSimplified fireAlarm_UnitSimplified0 = new FireAlarm_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      fireAlarm_UnitSimplified0.setTimerService(iTimerService0);
      fireAlarm_UnitSimplified0.enter();
      FireAlarm_UnitSimplified.Alarm fireAlarm_UnitSimplified_Alarm0 = fireAlarm_UnitSimplified0.alarm();
      fireAlarm_UnitSimplified_Alarm0.raiseOn();
      fireAlarm_UnitSimplified_Alarm0.raiseOff();
  }
}
