/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:01:41 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Microwave_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Microwave_Unit_ESTest extends Microwave_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setStateConfVectorPosition((-1404L));
      long long0 = microwave_Unit0.getStateConfVectorPosition();
      assertEquals((-1404L), long0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setMessage("lm)UzeJJt|nmV`B");
      microwave_Unit0.getMessage();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setIsExecuting(true);
      boolean boolean0 = microwave_Unit0.getIsExecuting();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.getIsExecuting();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setCompleted(true);
      boolean boolean0 = microwave_Unit0.getCompleted();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = new Microwave_Unit.Door(microwave_Unit0);
      microwave_Unit0.door = microwave_Unit_Door0;
      microwave_Unit0.door();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = new Microwave_Unit.Device(microwave_Unit0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = new Microwave_Unit.Door(microwave_Unit0);
      microwave_Unit_Door0.setClosed(false);
      assertFalse(microwave_Unit_Door0.getClosed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      
      microwave_Unit0.setFood_inside_sensed(true);
      boolean boolean0 = microwave_Unit0.getFood_inside_sensed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      assertFalse(microwave_Unit0.getIn_use());
      
      microwave_Unit0.setIn_use(true);
      boolean boolean0 = microwave_Unit0.getIn_use();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      microwave_Unit_Device0.setTimer(10L);
      assertEquals(10L, microwave_Unit_Device0.getTimer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      microwave_Unit_Device0.setIsOn(false);
      assertEquals(0L, microwave_Unit_Device0.getTimer());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit_Device0.getIsOn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State.$NULLSTATE$;
      microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON_;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOOROPENED;
      microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__ADDTIMER;
      microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER__STARTING_TIMER__START;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__STARTTIMER__STARTING_TIMER__PAUSE;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON___MICROWAVE_ISWORKING__IDLE_STANDBY;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___ON__DOORSTATUS_DOORCLOSED;
      microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.State microwave_Unit_State0 = Microwave_Unit.State._MICROWAVE_UNIT___OFF_;
      boolean boolean0 = microwave_Unit0.isStateActive(microwave_Unit_State0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.nextEvent();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.isActive();
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setIsExecuting(true);
      microwave_Unit0.exit();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      // Undeclared exception!
      try { 
        microwave_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      // Undeclared exception!
      try { 
        microwave_Unit0.device.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      // Undeclared exception!
      try { 
        microwave_Unit_Device0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      // Undeclared exception!
      try { 
        microwave_Unit_Device0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device;
      boolean boolean0 = microwave_Unit_Device0.getIsOn();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertEquals(0L, microwave_Unit_Device0.getTimer());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      // Undeclared exception!
      try { 
        microwave_Unit_Device0.raisePause();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device;
      long long0 = microwave_Unit_Device0.getTimer();
      assertEquals(0L, long0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit_Device0.getIsOn());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device;
      // Undeclared exception!
      try { 
        microwave_Unit_Device0.raiseResetTimer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = new Microwave_Unit.Door(microwave_Unit0);
      // Undeclared exception!
      try { 
        microwave_Unit_Door0.raiseOpen();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = microwave_Unit0.door;
      boolean boolean0 = microwave_Unit_Door0.getClosed();
      assertFalse(microwave_Unit0.getIn_use());
      assertTrue(boolean0);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = microwave_Unit0.door;
      // Undeclared exception!
      try { 
        microwave_Unit_Door0.raiseClose();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.getTimerService();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      assertFalse(microwave_Unit0.isActive());
      
      microwave_Unit0.exit();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      // Undeclared exception!
      try { 
        microwave_Unit0.raiseTimeEvent(970);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setDoCompletion(true);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.getCompleted();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Device microwave_Unit_Device0 = microwave_Unit0.device();
      // Undeclared exception!
      try { 
        microwave_Unit_Device0.raiseAddTimer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      // Undeclared exception!
      try { 
        microwave_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Microwave_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      Microwave_Unit.Door microwave_Unit_Door0 = microwave_Unit0.door();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertTrue(microwave_Unit_Door0.getClosed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.getFood_inside_sensed();
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.getMessage();
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.getIn_use();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.setTimerService((ITimerService) null);
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.getStateConfVectorPosition();
      assertFalse(microwave_Unit0.isActive());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      microwave_Unit0.getDoCompletion();
      assertFalse(microwave_Unit0.getFood_inside_sensed());
      assertFalse(microwave_Unit0.isActive());
      assertFalse(microwave_Unit0.getIn_use());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Microwave_Unit microwave_Unit0 = new Microwave_Unit();
      boolean boolean0 = microwave_Unit0.isFinal();
      assertFalse(boolean0);
      assertFalse(microwave_Unit0.isActive());
      assertFalse(microwave_Unit0.getIn_use());
      assertFalse(microwave_Unit0.getFood_inside_sensed());
  }
}
