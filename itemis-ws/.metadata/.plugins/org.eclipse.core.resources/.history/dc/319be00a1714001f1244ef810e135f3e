/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:12:43 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.RouteSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RouteSimplified_ESTest extends RouteSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.raiseTurn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.raiseTimeEvent((-747));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      // Undeclared exception!
      try { 
        routeSimplified0.raiseTimeEvent(1470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1470
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.isStateActive((RouteSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTimeEvent(0);
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseFailed();
      routeSimplified0.raiseCompleted();
      routeSimplified0.triggerWithoutEvent();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseDisable();
      assertTrue(routeSimplified0.isActive());
      
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isTour();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseCompleted();
      assertTrue(routeSimplified0.isActive());
      
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      assertTrue(routeSimplified0.isActive());
      
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      assertTrue(routeSimplified0.isActive());
      
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseDisable();
      routeSimplified0.raiseCompleted();
      assertTrue(routeSimplified0.isActive());
      
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertTrue(routeSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.$NULLSTATE$;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_UNLOCK;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_EMERGENCY_SHUTDOWN;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_WAIT;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_COMPLETED;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_START;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_DISABLE;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        routeSimplified0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.raiseCompleted();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseDisable();
      routeSimplified0.raiseCompleted();
      routeSimplified0.triggerWithoutEvent();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseTimeEvent(1);
      routeSimplified0.raiseDisable();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      boolean boolean0 = routeSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      boolean boolean0 = routeSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      boolean boolean0 = routeSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        routeSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      doReturn(false).when(routeSimplified_OperationCallback0).isTour();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseCompleted();
      routeSimplified0.raiseFailed();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isTour();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseCompleted();
      routeSimplified0.triggerWithoutEvent();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      doReturn(true).when(routeSimplified_OperationCallback0).isTour();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseCompleted();
      routeSimplified0.raiseDisable();
      assertTrue(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseFailed();
      routeSimplified0.raiseCompleted();
      RouteSimplified.State routeSimplified_State0 = RouteSimplified.State.MAIN_REGION_DISABLE;
      boolean boolean0 = routeSimplified0.isStateActive(routeSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseTimeEvent(1);
      routeSimplified0.exit();
      assertFalse(routeSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      // Undeclared exception!
      try { 
        routeSimplified0.raiseCompleted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.RouteSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RouteSimplified routeSimplified0 = new RouteSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      RouteSimplified.OperationCallback routeSimplified_OperationCallback0 = mock(RouteSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(routeSimplified_OperationCallback0).isCompleted();
      routeSimplified0.setOperationCallback(routeSimplified_OperationCallback0);
      routeSimplified0.setTimerService(iTimerService0);
      assertFalse(routeSimplified0.isActive());
      
      routeSimplified0.enter();
      routeSimplified0.raiseTurn();
      routeSimplified0.raiseFailed();
      routeSimplified0.raiseDisable();
      assertTrue(routeSimplified0.isActive());
  }
}
