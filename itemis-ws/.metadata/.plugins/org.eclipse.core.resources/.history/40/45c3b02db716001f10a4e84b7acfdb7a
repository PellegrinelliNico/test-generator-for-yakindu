/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:02:51 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TrafficLightCtrl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightCtrl_ESTest extends TrafficLightCtrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setStateConfVectorPosition(8L);
      long long0 = trafficLightCtrl0.getStateConfVectorPosition();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, long0);
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setStateConfVectorPosition((-2399L));
      long long0 = trafficLightCtrl0.getStateConfVectorPosition();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals((-2399L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      
      trafficLightCtrl0.setRedPeriod(0L);
      trafficLightCtrl0.getRedPeriod();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setRedPeriod((-986L));
      long long0 = trafficLightCtrl0.getRedPeriod();
      assertEquals((-986L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setIsExecuting(true);
      boolean boolean0 = trafficLightCtrl0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      boolean boolean0 = trafficLightCtrl0.getIsExecuting();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      
      trafficLightCtrl0.setGreenPeriod(0L);
      trafficLightCtrl0.getGreenPeriod();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setGreenPeriod((-434L));
      long long0 = trafficLightCtrl0.getGreenPeriod();
      assertEquals((-434L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setCounter(500L);
      long long0 = trafficLightCtrl0.getCounter();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(500L, long0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setCounter((-966L));
      long long0 = trafficLightCtrl0.getCounter();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals((-966L), long0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = new TrafficLightCtrl.TrafficLight();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = new TrafficLightCtrl.Timer();
      assertEquals((-1L), trafficLightCtrl_Timer0.getOFF());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      
      trafficLightCtrl0.setYellowPeriod(0L);
      trafficLightCtrl0.getYellowPeriod();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.$NULLSTATE$;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TIMER_RUNNING;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL;
      boolean boolean0 = trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertFalse(boolean0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED;
      boolean boolean0 = trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertFalse(boolean0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      assertFalse(trafficLightCtrl0.isActive());
      
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN;
      boolean boolean0 = trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(boolean0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TIMER_DISABLED;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_OFF;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
      boolean boolean0 = trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertFalse(boolean0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
      trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.State trafficLightCtrl_State0 = TrafficLightCtrl.State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
      boolean boolean0 = trafficLightCtrl0.isStateActive(trafficLightCtrl_State0);
      assertFalse(trafficLightCtrl0.isActive());
      assertFalse(boolean0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      boolean boolean0 = trafficLightCtrl0.nextEvent();
      assertFalse(boolean0);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      boolean boolean0 = trafficLightCtrl0.isActive();
      assertFalse(boolean0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setIsExecuting(true);
      trafficLightCtrl0.exit();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      // Undeclared exception!
      try { 
        trafficLightCtrl0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      assertFalse(trafficLightCtrl0.isActive());
      
      trafficLightCtrl0.exit();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      // Undeclared exception!
      try { 
        trafficLightCtrl0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      long long0 = trafficLightCtrl0.getCounter();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(0L, long0);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      // Undeclared exception!
      try { 
        trafficLightCtrl0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      // Undeclared exception!
      try { 
        trafficLightCtrl0.raiseTimeEvent(9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.raiseDisableTimer();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      long long0 = trafficLightCtrl0.getYellowPeriod();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.getTimerService();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.setTimerService((ITimerService) null);
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.getStateConfVectorPosition();
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.raiseResetTimer();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      trafficLightCtrl0.raiseEnableTimer();
      boolean boolean0 = trafficLightCtrl0.nextEvent();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertTrue(boolean0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      // Undeclared exception!
      try { 
        trafficLightCtrl0.raisePolice_interrupt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      long long0 = trafficLightCtrl0.getRedPeriod();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      boolean boolean0 = trafficLightCtrl0.isFinal();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertFalse(boolean0);
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      long long0 = trafficLightCtrl0.getGreenPeriod();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, long0);
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.raiseDisplayNone();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight();
      trafficLightCtrl_TrafficLight0.getDisplayGreen();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight();
      trafficLightCtrl_TrafficLight0.getDisplayYellow();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.raiseDisplayGreen();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.getDisplayNone();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.raiseDisplayYellow();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.getDisplayRed();
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.TrafficLight trafficLightCtrl_TrafficLight0 = trafficLightCtrl0.trafficLight;
      trafficLightCtrl_TrafficLight0.raiseDisplayRed();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = trafficLightCtrl0.timer;
      trafficLightCtrl_Timer0.getUpdateTimerValue();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = trafficLightCtrl0.timer;
      trafficLightCtrl_Timer0.getUpdateTimerColour();
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = trafficLightCtrl0.timer;
      trafficLightCtrl_Timer0.raiseUpdateTimerColour("uV");
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = trafficLightCtrl0.timer();
      long long0 = trafficLightCtrl_Timer0.getOFF();
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TrafficLightCtrl trafficLightCtrl0 = new TrafficLightCtrl();
      TrafficLightCtrl.Timer trafficLightCtrl_Timer0 = trafficLightCtrl0.timer;
      trafficLightCtrl_Timer0.raiseUpdateTimerValue((-2449L));
      assertFalse(trafficLightCtrl0.isActive());
      assertEquals(3L, trafficLightCtrl0.getYellowPeriod());
      assertEquals(12L, trafficLightCtrl0.getRedPeriod());
      assertEquals(8L, trafficLightCtrl0.getGreenPeriod());
  }
}
