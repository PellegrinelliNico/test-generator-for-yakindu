/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:21:29 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Keyboard;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Keyboard_ESTest extends Keyboard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      long long0 = keyboard0.getStateConfVectorPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.enter();
      long long0 = keyboard0.getStateConfVectorPosition();
      assertTrue(keyboard0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.setStateConfVectorPosition((-2528L));
      long long0 = keyboard0.getStateConfVectorPosition();
      assertEquals((-2528L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.setIsExecuting(true);
      boolean boolean0 = keyboard0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      boolean boolean0 = keyboard0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      // Undeclared exception!
      try { 
        keyboard0.isStateActive((Keyboard.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Keyboard", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.enter();
      keyboard0.raisePressNumLock();
      keyboard0.runCycle();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.enter();
      keyboard0.raisePressCapsLock();
      keyboard0.runCycle();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.raisePressNumLock();
      keyboard0.enter();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
      
      keyboard0.exit();
      assertFalse(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.raisePressCapsLock();
      keyboard0.enter();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
      
      keyboard0.exit();
      assertFalse(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.enter();
      keyboard0.raisePressNumLock();
      keyboard0.runCycle();
      Keyboard.State keyboard_State0 = Keyboard.State.NUMLOCK_NUMLOCK_ON;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertTrue(keyboard0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.NUMLOCK_NUMLOCK_OFF;
      keyboard0.enter();
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertTrue(keyboard0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.raisePressCapsLock();
      Keyboard.State keyboard_State0 = Keyboard.State.CAPSLOCK_CAPSLOCK_ON;
      keyboard0.enter();
      keyboard0.runCycle();
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertTrue(keyboard0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.enter();
      Keyboard.State keyboard_State0 = Keyboard.State.CAPSLOCK_CAPSLOCK_OFF;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertTrue(keyboard0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.$NULLSTATE$;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.NUMLOCK_NUMLOCK_ON;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.NUMLOCK_NUMLOCK_OFF;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.CAPSLOCK_CAPSLOCK_ON;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      Keyboard.State keyboard_State0 = Keyboard.State.CAPSLOCK_CAPSLOCK_OFF;
      boolean boolean0 = keyboard0.isStateActive(keyboard_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      boolean boolean0 = keyboard0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.setIsExecuting(true);
      keyboard0.exit();
      assertFalse(keyboard0.isFinal());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.exit();
      assertFalse(keyboard0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.setIsExecuting(true);
      keyboard0.enter();
      assertFalse(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.raisePressCapsLock();
      keyboard0.enter();
      keyboard0.runCycle();
      keyboard0.raisePressCapsLock();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      boolean boolean0 = keyboard0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.raisePressNumLock();
      keyboard0.enter();
      keyboard0.runCycle();
      keyboard0.raisePressNumLock();
      keyboard0.runCycle();
      assertTrue(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.runCycle();
      assertFalse(keyboard0.isFinal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      keyboard0.setIsExecuting(true);
      keyboard0.runCycle();
      assertFalse(keyboard0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Keyboard keyboard0 = new Keyboard();
      assertFalse(keyboard0.isActive());
      
      keyboard0.enter();
      boolean boolean0 = keyboard0.isActive();
      assertTrue(boolean0);
  }
}
