/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:16:11 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.ZowiSCTSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZowiSCTSimplified_ESTest extends ZowiSCTSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      zowiSCTSimplified0.raiseTimeEvent(0);
      assertFalse(zowiSCTSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.isStateActive((ZowiSCTSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = new ZowiSCTSimplified.Zowi();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      zowiSCTSimplified0.enter();
      assertTrue(zowiSCTSimplified0.isActive());
      
      zowiSCTSimplified0.exit();
      assertFalse(zowiSCTSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      zowiSCTSimplified0.enter();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_OBSTACLEDETECTED;
      zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertTrue(zowiSCTSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      zowiSCTSimplified0.enter();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_ISSOMEONEHERE;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertTrue(zowiSCTSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.$NULLSTATE$;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_ISSOMEONEHERE;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_AWAKE;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_OBSTACLEDETECTED;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ZowiSCTSimplified.State zowiSCTSimplified_State0 = ZowiSCTSimplified.State.MAIN_REGION_WELCOMEZOWI;
      boolean boolean0 = zowiSCTSimplified0.isStateActive(zowiSCTSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      zowiSCTSimplified0.runCycle();
      assertFalse(zowiSCTSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      boolean boolean0 = zowiSCTSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      zowiSCTSimplified0.exit();
      assertFalse(zowiSCTSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Zowi must be set.
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Zowi must be set.
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      boolean boolean0 = zowiSCTSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(zowiSCTSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      // Undeclared exception!
      try { 
        zowiSCTSimplified0.raiseTimeEvent(2447);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2447
         //
         verifyException("statechart.ZowiSCTSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      zowiSCTSimplified0.enter();
      zowiSCTSimplified0.runCycle();
      zowiSCTSimplified0.runCycle();
      assertTrue(zowiSCTSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZowiSCTSimplified zowiSCTSimplified0 = new ZowiSCTSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified0.setTimerService(iTimerService0);
      ZowiSCTSimplified.Zowi zowiSCTSimplified_Zowi0 = zowiSCTSimplified0.zowi();
      ZowiSCTSimplified.Zowi.OperationCallback zowiSCTSimplified_Zowi_OperationCallback0 = mock(ZowiSCTSimplified.Zowi.OperationCallback.class, new ViolatedAssumptionAnswer());
      zowiSCTSimplified_Zowi0.setOperationCallback(zowiSCTSimplified_Zowi_OperationCallback0);
      assertFalse(zowiSCTSimplified0.isActive());
      
      zowiSCTSimplified0.enter();
      boolean boolean0 = zowiSCTSimplified0.isActive();
      assertTrue(boolean0);
  }
}
