/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 20:26:45 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Signal;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Signal_ESTest extends Signal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.setSymbol(3891L);
      long long0 = signal0.getSymbol();
      assertEquals(3891L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.setIsExecuting(true);
      boolean boolean0 = signal0.getIsExecuting();
      assertEquals(0L, signal0.getSymbol());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.isStateActive((Signal.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.getTurnValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Turn is not raised!
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.State signal_State0 = Signal.State.$NULLSTATE$;
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertFalse(boolean0);
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.State signal_State0 = Signal.State.MAIN_REGION_FAIL;
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.State signal_State0 = Signal.State.MAIN_REGION_TURNING_TURN_PROCESSING_SEND;
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.State signal_State0 = Signal.State.MAIN_REGION_TURNING_TURN_PROCESSING_PENDING;
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertFalse(boolean0);
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Signal.State signal_State0 = Signal.State.valueOf("MAIN_REGION_TURNING");
      Signal signal0 = new Signal();
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.State signal_State0 = Signal.State.MAIN_REGION_IDLE;
      boolean boolean0 = signal0.isStateActive(signal_State0);
      assertFalse(boolean0);
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Signal signal0 = new Signal();
      boolean boolean0 = signal0.nextEvent();
      assertFalse(boolean0);
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Signal signal0 = new Signal();
      boolean boolean0 = signal0.isActive();
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.setIsExecuting(true);
      signal0.exit();
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Signal signal0 = new Signal();
      assertFalse(signal0.isActive());
      
      signal0.exit();
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Signal signal0 = new Signal();
      long long0 = signal0.getSymbol();
      assertFalse(signal0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.getTimerService();
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Signal signal0 = new Signal();
      long long0 = signal0.getOFF();
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseTimeEvent(1285);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.setTimerService((ITimerService) null);
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Signal signal0 = new Signal();
      long long0 = signal0.getGO();
      assertEquals(1L, long0);
      assertEquals(0L, signal0.getSymbol());
      assertFalse(signal0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.getFailed();
      assertEquals(0L, signal0.getSymbol());
      assertFalse(signal0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.getCompleted();
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Signal signal0 = new Signal();
      long long0 = signal0.getSTOP();
      assertEquals(0L, long0);
      assertEquals(0L, signal0.getSymbol());
      assertFalse(signal0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.raiseCompleted();
      assertEquals(0L, signal0.getSymbol());
      assertFalse(signal0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Signal signal0 = new Signal();
      signal0.raiseFailed();
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Signal signal0 = new Signal();
      long long0 = signal0.getTimeout();
      assertFalse(signal0.isActive());
      assertEquals(2000L, long0);
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseTurn(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Signal signal0 = new Signal();
      Signal.OperationCallback signal_OperationCallback0 = mock(Signal.OperationCallback.class, new ViolatedAssumptionAnswer());
      signal0.setOperationCallback(signal_OperationCallback0);
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Signal signal0 = new Signal();
      boolean boolean0 = signal0.getIsExecuting();
      assertFalse(signal0.isActive());
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Signal signal0 = new Signal();
      // Undeclared exception!
      try { 
        signal0.raiseQueued();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Signal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Signal signal0 = new Signal();
      boolean boolean0 = signal0.isFinal();
      assertEquals(0L, signal0.getSymbol());
      assertFalse(boolean0);
      assertFalse(signal0.isActive());
  }
}
