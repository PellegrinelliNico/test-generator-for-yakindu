/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 05:56:32 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._Child;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _Child_ESTest extends _Child_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.raiseMyOutEvent();
      assertFalse(_Child0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      _Child0.raiseMyEvent();
      boolean boolean0 = _Child0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _Child _Child0 = new _Child();
      boolean boolean0 = _Child0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      boolean boolean0 = _Child0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _Child _Child0 = new _Child();
      boolean boolean0 = _Child0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _Child _Child0 = new _Child();
      // Undeclared exception!
      try { 
        _Child0.isStateActive((_Child.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._Child", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      _Child0.raiseMyEvent();
      _Child0.triggerWithoutEvent();
      assertTrue(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      _Child0.triggerWithoutEvent();
      assertTrue(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      _Child0.raiseMyEvent();
      assertTrue(_Child0.isActive());
      
      _Child0.exit();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      assertTrue(_Child0.isActive());
      
      _Child0.exit();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child.State _Child_State0 = _Child.State.MAIN_REGION_STATEB;
      _Child0.enter();
      _Child0.raiseMyEvent();
      boolean boolean0 = _Child0.isStateActive(_Child_State0);
      assertTrue(_Child0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      _Child.State _Child_State0 = _Child.State.MAIN_REGION_STATEA;
      _Child0.raiseMyEvent();
      _Child0.raiseMyEvent();
      boolean boolean0 = _Child0.isStateActive(_Child_State0);
      assertTrue(_Child0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child.State _Child_State0 = _Child.State.$NULLSTATE$;
      boolean boolean0 = _Child0.isStateActive(_Child_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child.State _Child_State0 = _Child.State.MAIN_REGION_STATEB;
      boolean boolean0 = _Child0.isStateActive(_Child_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child.State _Child_State0 = _Child.State.MAIN_REGION_STATEA;
      boolean boolean0 = _Child0.isStateActive(_Child_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      _Child0.raiseMyEvent();
      _Child0.setIsExecuting(false);
      _Child0.raiseMyEvent();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.enter();
      boolean boolean0 = _Child0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _Child _Child0 = new _Child();
      boolean boolean0 = _Child0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      _Child0.exit();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.exit();
      assertFalse(_Child0.isFinal());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.getMyOutEvent();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _Child _Child0 = new _Child();
      _Child0.setIsExecuting(true);
      _Child0.enter();
      assertFalse(_Child0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _Child _Child0 = new _Child();
      boolean boolean0 = _Child0.isFinal();
      assertFalse(boolean0);
      assertFalse(_Child0.isActive());
  }
}
