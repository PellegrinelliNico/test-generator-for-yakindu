/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 08:20:48 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Hub_PowerManager;
import statechart.Network_Component;
import statechart.SmartLightHUB;
import statechart.SmartLightSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartLightHUB_ESTest extends SmartLightHUB_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = smartLightHUB0.system2();
      // Undeclared exception!
      try { 
        smartLightHUB_System2_0.raiseWorking();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = new SmartLightHUB.Power();
      smartLightHUB0.power = smartLightHUB_Power0;
      smartLightHUB_Power0.setTotal(1364L);
      assertEquals(1364L, smartLightHUB_Power0.getTotal());
      
      smartLightHUB0.power();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = smartLightHUB0.power();
      smartLightHUB_Power0.setThresholdReached(true);
      assertTrue(smartLightHUB_Power0.getThresholdReached());
      
      smartLightHUB0.power();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = smartLightHUB0.power();
      smartLightHUB_Power0.setIndex(500L);
      assertEquals(500L, smartLightHUB_Power0.getIndex());
      
      smartLightHUB0.power();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setStateConfVectorPosition((-1784L));
      long long0 = smartLightHUB0.getStateConfVectorPosition();
      assertEquals((-1784L), long0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setIsExecuting(true);
      boolean boolean0 = smartLightHUB0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getIsExecuting();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      // Undeclared exception!
      try { 
        smartLightHUB0.isStateActive((SmartLightHUB.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setTotalSystemsON(2L);
      assertEquals(2L, smartLightHUB0.getTotalSystemsON());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      Hub_PowerManager hub_PowerManager0 = new Hub_PowerManager();
      smartLightHUB0.setPowerManager(hub_PowerManager0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Network smartLightHUB_Network0 = new SmartLightHUB.Network(smartLightHUB0);
      smartLightHUB_Network0.setConnection(true);
      assertTrue(smartLightHUB_Network0.getConnection());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.power.setThreshold(0L);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setLED2((SmartLightSystem) null);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      Network_Component network_Component0 = new Network_Component();
      smartLightHUB0.setWiFi(network_Component0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setLED1((SmartLightSystem) null);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      assertFalse(smartLightHUB0.getInUSE());
      
      smartLightHUB0.setInUSE(true);
      boolean boolean0 = smartLightHUB0.getInUSE();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.$NULLSTATE$;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT2REGION_LED2;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT1REGION_LED1;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER;
      boolean boolean0 = smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(boolean0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS;
      boolean boolean0 = smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB;
      boolean boolean0 = smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT2REGION_LED2_STATUS_ERROR;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT2REGION_LED2_STATUS_WORKING;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_NETWORKREGION_CONNECTED;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_NETWORKREGION_NO_CONNECTION;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_IOT_ENERGYSAVERMANAGER_TURNINGOFF_DEVICE_OVERTHRESHOLD__FINAL_;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_POWERCONSUMPTIONREGION_POWERCONSUMPTIONCALCULATOR;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM2_LED_LIGHT2_OFF;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM2_LED_LIGHT2_ON;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_SYSTEM_MANAGER_SYSTEM1_LED_LIGHT1_ON;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_SMARTHUBSTATUSREGION_SMARTLIGHTHUBSYSTEMSTATUS_HUBSTATUSREGION_ALLSYSTEMSOFF;
      boolean boolean0 = smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(boolean0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_SMARTLIGHTSHUB_LIGHT1REGION_LED1_STATUS_ERROR;
      smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.State smartLightHUB_State0 = SmartLightHUB.State.SMARTLIGHTHUBSYSTEM_1_0_HUBOFF;
      boolean boolean0 = smartLightHUB0.isStateActive(smartLightHUB_State0);
      assertFalse(boolean0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      boolean boolean0 = smartLightHUB0.nextEvent();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      boolean boolean0 = smartLightHUB0.isActive();
      assertFalse(boolean0);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      // Undeclared exception!
      try { 
        smartLightHUB0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      // Undeclared exception!
      try { 
        smartLightHUB0.raiseTimeEvent(490);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getPowerManager();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      boolean boolean0 = smartLightHUB0.getInUSE();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      boolean boolean0 = smartLightHUB0.isFinal();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getTotalSystemsON();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getWiFi();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getTimerService();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getHubON();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getHubOFF();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getLED2();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setTimerService((ITimerService) null);
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      // Undeclared exception!
      try { 
        smartLightHUB0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getLED1();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.raiseHubOFF();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.setIsExecuting(true);
      smartLightHUB0.exit();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      assertFalse(smartLightHUB0.isActive());
      
      smartLightHUB0.exit();
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.getStateConfVectorPosition();
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      smartLightHUB0.raiseHubON();
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      // Undeclared exception!
      try { 
        smartLightHUB0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = new SmartLightHUB.System2(smartLightHUB0);
      smartLightHUB_System2_0.raiseIsOFF();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = smartLightHUB0.system2;
      smartLightHUB_System2_0.getIsON();
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SmartLightHUB.System2 smartLightHUB_System2_0 = new SmartLightHUB.System2((SmartLightHUB) null);
      smartLightHUB_System2_0.raiseIsON();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = smartLightHUB0.system2;
      smartLightHUB_System2_0.getIsOFF();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = smartLightHUB0.system2();
      // Undeclared exception!
      try { 
        smartLightHUB_System2_0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System2 smartLightHUB_System2_0 = new SmartLightHUB.System2(smartLightHUB0);
      // Undeclared exception!
      try { 
        smartLightHUB_System2_0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = smartLightHUB0.hUB();
      smartLightHUB_HUB0.getAllSystemsON();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = new SmartLightHUB.HUB(smartLightHUB0);
      // Undeclared exception!
      try { 
        smartLightHUB_HUB0.raiseTurnOFFSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = smartLightHUB0.hUB;
      // Undeclared exception!
      try { 
        smartLightHUB_HUB0.raiseTurnONSystems();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = smartLightHUB0.hUB;
      smartLightHUB_HUB0.raiseAllSystemsON();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = smartLightHUB0.hUB;
      smartLightHUB_HUB0.getAllSystemsOFF();
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.HUB smartLightHUB_HUB0 = new SmartLightHUB.HUB(smartLightHUB0);
      smartLightHUB_HUB0.raiseAllSystemsOFF();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SmartLightHUB.Power smartLightHUB_Power0 = new SmartLightHUB.Power();
      long long0 = smartLightHUB_Power0.getThreshold();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = smartLightHUB0.power();
      smartLightHUB_Power0.getIndex();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB_Power0.getThresholdReached());
      assertFalse(smartLightHUB0.isActive());
      assertEquals(15L, smartLightHUB_Power0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = smartLightHUB0.power;
      boolean boolean0 = smartLightHUB_Power0.getThresholdReached();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
      assertEquals(15L, smartLightHUB_Power0.getThreshold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Power smartLightHUB_Power0 = smartLightHUB0.power();
      smartLightHUB_Power0.getTotal();
      assertEquals(15L, smartLightHUB_Power0.getThreshold());
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB_Power0.getThresholdReached());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = new SmartLightHUB.System1(smartLightHUB0);
      // Undeclared exception!
      try { 
        smartLightHUB_System1_0.raiseWorking();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = new SmartLightHUB.System1(smartLightHUB0);
      smartLightHUB_System1_0.getIsOFF();
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = smartLightHUB0.system1;
      smartLightHUB_System1_0.getIsON();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = new SmartLightHUB.System1(smartLightHUB0);
      smartLightHUB_System1_0.raiseIsON();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = new SmartLightHUB.System1(smartLightHUB0);
      // Undeclared exception!
      try { 
        smartLightHUB_System1_0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = smartLightHUB0.system1();
      smartLightHUB_System1_0.raiseIsOFF();
      assertFalse(smartLightHUB0.getInUSE());
      assertFalse(smartLightHUB0.isActive());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.System1 smartLightHUB_System1_0 = smartLightHUB0.system1();
      // Undeclared exception!
      try { 
        smartLightHUB_System1_0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Network smartLightHUB_Network0 = smartLightHUB0.network();
      // Undeclared exception!
      try { 
        smartLightHUB_Network0.raiseError();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Network smartLightHUB_Network0 = smartLightHUB0.network();
      boolean boolean0 = smartLightHUB_Network0.getConnection();
      assertFalse(boolean0);
      assertFalse(smartLightHUB0.isActive());
      assertFalse(smartLightHUB0.getInUSE());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SmartLightHUB smartLightHUB0 = new SmartLightHUB();
      SmartLightHUB.Network smartLightHUB_Network0 = smartLightHUB0.network;
      // Undeclared exception!
      try { 
        smartLightHUB_Network0.raiseConnect();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightHUB", e);
      }
  }
}
