/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:11:16 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Ultrasonic_Sensor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ultrasonic_Sensor_ESTest extends Ultrasonic_Sensor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = new Ultrasonic_Sensor.Transmitter();
      ultrasonic_Sensor0.transmitter = ultrasonic_Sensor_Transmitter0;
      ultrasonic_Sensor_Transmitter0.setValue((-834L));
      assertEquals((-834L), ultrasonic_Sensor_Transmitter0.getValue());
      
      ultrasonic_Sensor0.transmitter();
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = new Ultrasonic_Sensor.Transmitter();
      ultrasonic_Sensor0.transmitter = ultrasonic_Sensor_Transmitter0;
      ultrasonic_Sensor0.transmitter();
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.status = null;
      ultrasonic_Sensor0.status();
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver0 = ultrasonic_Sensor0.receiver;
      ultrasonic_Sensor_Receiver0.setValue((-2957L));
      assertEquals((-2957L), ultrasonic_Sensor_Receiver0.getValue());
      
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver1 = ultrasonic_Sensor0.receiver();
      assertFalse(ultrasonic_Sensor_Receiver1.getEcho());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver0 = ultrasonic_Sensor0.receiver;
      ultrasonic_Sensor_Receiver0.setEcho(true);
      assertTrue(ultrasonic_Sensor_Receiver0.getEcho());
      
      ultrasonic_Sensor0.receiver();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setStateConfVectorPosition(1577L);
      long long0 = ultrasonic_Sensor0.getStateConfVectorPosition();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertEquals(1577L, long0);
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setStateConfVectorPosition((-1539L));
      long long0 = ultrasonic_Sensor0.getStateConfVectorPosition();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals((-1539L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setSimulate_detection_timer(1733L);
      long long0 = ultrasonic_Sensor0.getSimulate_detection_timer();
      assertEquals(1733L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setSimulate_detection_timer((-2211L));
      long long0 = ultrasonic_Sensor0.getSimulate_detection_timer();
      assertEquals((-2211L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setSignalSentToController(true);
      boolean boolean0 = ultrasonic_Sensor0.getSignalSentToController();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setReceiverData((-440L));
      long long0 = ultrasonic_Sensor0.getReceiverData();
      assertEquals((-440L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setIsExecuting(true);
      boolean boolean0 = ultrasonic_Sensor0.getIsExecuting();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertTrue(boolean0);
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getIsExecuting();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setEnvironmentData(1770L);
      long long0 = ultrasonic_Sensor0.getEnvironmentData();
      assertEquals(1770L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setEnvironmentData((-1862L));
      long long0 = ultrasonic_Sensor0.getEnvironmentData();
      assertEquals((-1862L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setCounter(1L);
      long long0 = ultrasonic_Sensor0.getCounter();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setCounter((-1194L));
      long long0 = ultrasonic_Sensor0.getCounter();
      assertEquals((-1194L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setActivity_sensed("statechart.Ultrasonic_Sensor$State");
      ultrasonic_Sensor0.getActivity_sensed();
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.isStateActive((Ultrasonic_Sensor.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Status ultrasonic_Sensor_Status0 = ultrasonic_Sensor0.status();
      ultrasonic_Sensor_Status0.setActivity(false);
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor_Status0.getActivity());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setReceiverData(3038L);
      long long0 = ultrasonic_Sensor0.getReceiverData();
      assertEquals(3038L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver0 = new Ultrasonic_Sensor.Receiver();
      assertEquals(0L, ultrasonic_Sensor_Receiver0.getValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setActivity(false);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setReading(false);
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = ultrasonic_Sensor0.transmitter;
      ultrasonic_Sensor_Transmitter0.setSending(true);
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(40L, ultrasonic_Sensor_Transmitter0.getValue());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertTrue(ultrasonic_Sensor_Transmitter0.getSending());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.State ultrasonic_Sensor_State0 = Ultrasonic_Sensor.State._ULTRASONIC_SENSOR___SENSOR_MONITORING_;
      boolean boolean0 = ultrasonic_Sensor0.isStateActive(ultrasonic_Sensor_State0);
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.State ultrasonic_Sensor_State0 = Ultrasonic_Sensor.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICRECEIVER_RECEIVING;
      boolean boolean0 = ultrasonic_Sensor0.isStateActive(ultrasonic_Sensor_State0);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.State ultrasonic_Sensor_State0 = Ultrasonic_Sensor.State._ULTRASONIC_SENSOR___OFF_;
      boolean boolean0 = ultrasonic_Sensor0.isStateActive(ultrasonic_Sensor_State0);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(boolean0);
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.State ultrasonic_Sensor_State0 = Ultrasonic_Sensor.State.$NULLSTATE$;
      boolean boolean0 = ultrasonic_Sensor0.isStateActive(ultrasonic_Sensor_State0);
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.State ultrasonic_Sensor_State0 = Ultrasonic_Sensor.State._ULTRASONIC_SENSOR___SENSOR_MONITORING__ULTRASONICTRANSDUCER_TRANSMITTING;
      boolean boolean0 = ultrasonic_Sensor0.isStateActive(ultrasonic_Sensor_State0);
      assertFalse(boolean0);
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.nextEvent();
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.isActive();
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setIsExecuting(true);
      ultrasonic_Sensor0.exit();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = ultrasonic_Sensor0.transmitter;
      long long0 = ultrasonic_Sensor_Transmitter0.getValue();
      assertEquals(40L, long0);
      assertTrue(ultrasonic_Sensor_Transmitter0.getSending());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = new Ultrasonic_Sensor.Transmitter();
      boolean boolean0 = ultrasonic_Sensor_Transmitter0.getSending();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.raiseTimeEvent((-2781));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getActivity_sensed();
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.isFinal();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Transmitter ultrasonic_Sensor_Transmitter0 = ultrasonic_Sensor0.transmitter();
      assertTrue(ultrasonic_Sensor_Transmitter0.getSending());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertEquals(40L, ultrasonic_Sensor_Transmitter0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getCounter();
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.getActivity();
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getTimerService();
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getStateConfVectorPosition();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      assertFalse(ultrasonic_Sensor0.isActive());
      
      ultrasonic_Sensor0.exit();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getReceiverData();
      assertFalse(ultrasonic_Sensor0.isActive());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.setTimerService((ITimerService) null);
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.isActive());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      long long0 = ultrasonic_Sensor0.getSimulate_detection_timer();
      assertFalse(ultrasonic_Sensor0.isActive());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.getSignalSentToController();
      assertFalse(ultrasonic_Sensor0.isActive());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getActivity());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      boolean boolean0 = ultrasonic_Sensor0.getReading();
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.isActive());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      ultrasonic_Sensor0.getEnvironmentData();
      assertFalse(ultrasonic_Sensor0.getReading());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.isActive());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver0 = ultrasonic_Sensor0.receiver;
      ultrasonic_Sensor_Receiver0.getValue();
      assertFalse(ultrasonic_Sensor0.isActive());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor_Receiver0.getEcho());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Receiver ultrasonic_Sensor_Receiver0 = ultrasonic_Sensor0.receiver;
      boolean boolean0 = ultrasonic_Sensor_Receiver0.getEcho();
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(boolean0);
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.isActive());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Status ultrasonic_Sensor_Status0 = ultrasonic_Sensor0.status();
      boolean boolean0 = ultrasonic_Sensor_Status0.getActivity();
      assertFalse(ultrasonic_Sensor0.getSignalSentToController());
      assertFalse(ultrasonic_Sensor0.getReading());
      assertFalse(ultrasonic_Sensor0.getActivity());
      assertFalse(ultrasonic_Sensor0.isActive());
      assertEquals(0L, ultrasonic_Sensor0.getSimulate_detection_timer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Status ultrasonic_Sensor_Status0 = ultrasonic_Sensor0.status();
      // Undeclared exception!
      try { 
        ultrasonic_Sensor_Status0.raiseNoActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Ultrasonic_Sensor ultrasonic_Sensor0 = new Ultrasonic_Sensor();
      Ultrasonic_Sensor.Status ultrasonic_Sensor_Status0 = new Ultrasonic_Sensor.Status(ultrasonic_Sensor0);
      // Undeclared exception!
      try { 
        ultrasonic_Sensor_Status0.raiseActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Ultrasonic_Sensor", e);
      }
  }
}
