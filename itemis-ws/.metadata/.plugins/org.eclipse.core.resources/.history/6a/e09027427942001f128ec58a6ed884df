/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class SimpleTrafficLightSimplified implements ITimed, IEventDriven {

    public static class Pedestrian {

        private SimpleTrafficLightSimplified parent;

        public Pedestrian(SimpleTrafficLightSimplified parent) {
            this.parent = parent;
        }

        private boolean pushButton;

        public void raisePushButton() {
            parent.inEventQueue.add(() -> {
                pushButton = true;
            });
            parent.runCycle();
        }
    }

    public static class Lights {

        private boolean goRed;

        private void raiseGoRed() {
            goRed = true;
            goRedObservable.next(null);
        }

        private Observable<Void> goRedObservable = new Observable<Void>();

        private Observable<Void> getGoRed() {
            return goRedObservable;
        }

        private boolean goYellow;

        private void raiseGoYellow() {
            goYellow = true;
            goYellowObservable.next(null);
        }

        private Observable<Void> goYellowObservable = new Observable<Void>();

        private Observable<Void> getGoYellow() {
            return goYellowObservable;
        }

        private boolean goGreen;

        private void raiseGoGreen() {
            goGreen = true;
            goGreenObservable.next(null);
        }

        private Observable<Void> goGreenObservable = new Observable<Void>();

        private Observable<Void> getGoGreen() {
            return goGreenObservable;
        }
    }

    private Pedestrian pedestrian;

    private Lights lights;

    public enum State {

        MAIN_REGION_WORKING,
        MAIN_REGION_WORKING_R1_YELLOW,
        MAIN_REGION_WORKING_R1_GREEN,
        MAIN_REGION_WORKING_R1_RED,
        MAIN_REGION_NOT_WORKING,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[2];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public SimpleTrafficLightSimplified() {
        pedestrian = new Pedestrian(this);
        lights = new Lights();
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart SimpleTrafficLight */
        setNumCalls(0l);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (this.operationCallback == null) {
            throw new IllegalStateException("Operation callback must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart SimpleTrafficLight */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart SimpleTrafficLight */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void clearInEvents() {
        breakEvent = false;
        pedestrian.pushButton = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_WORKING_R1_YELLOW:
                main_region_Working_r1_Yellow_react(-1l);
                break;
            case MAIN_REGION_WORKING_R1_GREEN:
                main_region_Working_r1_Green_react(-1l);
                break;
            case MAIN_REGION_WORKING_R1_RED:
                main_region_Working_r1_Red_react(-1l);
                break;
            case MAIN_REGION_NOT_WORKING:
                main_region_Not_Working_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (this.operationCallback == null) {
            throw new IllegalStateException("Operation callback must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_WORKING:
                return stateVector[0].ordinal() >= State.MAIN_REGION_WORKING.ordinal() && stateVector[0].ordinal() <= State.MAIN_REGION_WORKING_R1_RED.ordinal();
            case MAIN_REGION_WORKING_R1_YELLOW:
                return stateVector[0] == State.MAIN_REGION_WORKING_R1_YELLOW;
            case MAIN_REGION_WORKING_R1_GREEN:
                return stateVector[0] == State.MAIN_REGION_WORKING_R1_GREEN;
            case MAIN_REGION_WORKING_R1_RED:
                return stateVector[0] == State.MAIN_REGION_WORKING_R1_RED;
            case MAIN_REGION_NOT_WORKING:
                return stateVector[0] == State.MAIN_REGION_NOT_WORKING;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    public Pedestrian pedestrian() {
        return pedestrian;
    }

    public Lights lights() {
        return lights;
    }

    public interface OperationCallback {

        public void raiseAudioSignal();
    }

    private OperationCallback operationCallback;

    public void setOperationCallback(OperationCallback operationCallback) {
        this.operationCallback = operationCallback;
    }

    private boolean breakEvent;

    public void raiseBreak() {
        inEventQueue.add(() -> {
            breakEvent = true;
        });
        runCycle();
    }

    private long numCalls;

    private long getNumCalls() {
        return numCalls;
    }

    private void setNumCalls(long value) {
        this.numCalls = value;
    }

    /* Entry action for state 'Yellow'. */
    private void entryAction_main_region_Working_r1_Yellow() {
        /* Entry action for state 'Yellow'. */
        timerService.setTimer(this, 0, (5l * 1000l), false);
        lights.raiseGoYellow();
    }

    /* Entry action for state 'Green'. */
    private void entryAction_main_region_Working_r1_Green() {
        /* Entry action for state 'Green'. */
        lights.raiseGoGreen();
    }

    /* Entry action for state 'Red'. */
    private void entryAction_main_region_Working_r1_Red() {
        /* Entry action for state 'Red'. */
        timerService.setTimer(this, 1, (30l * 1000l), false);
        lights.raiseGoRed();
    }

    /* Exit action for state 'Yellow'. */
    private void exitAction_main_region_Working_r1_Yellow() {
        /* Exit action for state 'Yellow'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state 'Red'. */
    private void exitAction_main_region_Working_r1_Red() {
        /* Exit action for state 'Red'. */
        timerService.unsetTimer(this, 1);
    }

    /* 'default' enter sequence for state Working */
    private void enterSequence_main_region_Working_default() {
        /* 'default' enter sequence for state Working */
        enterSequence_main_region_Working_r1_default();
    }

    /* 'default' enter sequence for state Yellow */
    private void enterSequence_main_region_Working_r1_Yellow_default() {
        /* 'default' enter sequence for state Yellow */
        entryAction_main_region_Working_r1_Yellow();
        stateVector[0] = State.MAIN_REGION_WORKING_R1_YELLOW;
    }

    /* 'default' enter sequence for state Green */
    private void enterSequence_main_region_Working_r1_Green_default() {
        /* 'default' enter sequence for state Green */
        entryAction_main_region_Working_r1_Green();
        stateVector[0] = State.MAIN_REGION_WORKING_R1_GREEN;
    }

    /* 'default' enter sequence for state Red */
    private void enterSequence_main_region_Working_r1_Red_default() {
        /* 'default' enter sequence for state Red */
        entryAction_main_region_Working_r1_Red();
        stateVector[0] = State.MAIN_REGION_WORKING_R1_RED;
    }

    /* 'default' enter sequence for state Not Working */
    private void enterSequence_main_region_Not_Working_default() {
        /* 'default' enter sequence for state Not Working */
        stateVector[0] = State.MAIN_REGION_NOT_WORKING;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* 'default' enter sequence for region r1 */
    private void enterSequence_main_region_Working_r1_default() {
        /* 'default' enter sequence for region r1 */
        react_main_region_Working_r1__entry_Default();
    }

    /* Default exit sequence for state Working */
    private void exitSequence_main_region_Working() {
        /* Default exit sequence for state Working */
        exitSequence_main_region_Working_r1();
    }

    /* Default exit sequence for state Yellow */
    private void exitSequence_main_region_Working_r1_Yellow() {
        /* Default exit sequence for state Yellow */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_Working_r1_Yellow();
    }

    /* Default exit sequence for state Green */
    private void exitSequence_main_region_Working_r1_Green() {
        /* Default exit sequence for state Green */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state Red */
    private void exitSequence_main_region_Working_r1_Red() {
        /* Default exit sequence for state Red */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_Working_r1_Red();
    }

    /* Default exit sequence for state Not Working */
    private void exitSequence_main_region_Not_Working() {
        /* Default exit sequence for state Not Working */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_WORKING_R1_YELLOW:
                exitSequence_main_region_Working_r1_Yellow();
                break;
            case MAIN_REGION_WORKING_R1_GREEN:
                exitSequence_main_region_Working_r1_Green();
                break;
            case MAIN_REGION_WORKING_R1_RED:
                exitSequence_main_region_Working_r1_Red();
                break;
            case MAIN_REGION_NOT_WORKING:
                exitSequence_main_region_Not_Working();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region r1 */
    private void exitSequence_main_region_Working_r1() {
        /* Default exit sequence for region r1 */
        switch(stateVector[0]) {
            case MAIN_REGION_WORKING_R1_YELLOW:
                exitSequence_main_region_Working_r1_Yellow();
                break;
            case MAIN_REGION_WORKING_R1_GREEN:
                exitSequence_main_region_Working_r1_Green();
                break;
            case MAIN_REGION_WORKING_R1_RED:
                exitSequence_main_region_Working_r1_Red();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region_Working_r1__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_Working_r1_Red_default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_Working_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_Working_react(long transitioned_before) {
        /* The reactions of state Working. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (breakEvent) {
                exitSequence_main_region_Working();
                enterSequence_main_region_Not_Working_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Working_r1_Yellow_react(long transitioned_before) {
        /* The reactions of state Yellow. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[0]) {
                exitSequence_main_region_Working_r1_Yellow();
                operationCallback.raiseAudioSignal();
                timeEvents[0] = false;
                enterSequence_main_region_Working_r1_Red_default();
                main_region_Working_react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = main_region_Working_react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Working_r1_Green_react(long transitioned_before) {
        /* The reactions of state Green. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (pedestrian.pushButton) {
                exitSequence_main_region_Working_r1_Green();
                numCalls++;
                enterSequence_main_region_Working_r1_Yellow_default();
                main_region_Working_react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = main_region_Working_react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Working_r1_Red_react(long transitioned_before) {
        /* The reactions of state Red. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (timeEvents[1]) {
                exitSequence_main_region_Working_r1_Red();
                timeEvents[1] = false;
                enterSequence_main_region_Working_r1_Green_default();
                main_region_Working_react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = main_region_Working_react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_Not_Working_react(long transitioned_before) {
        /* The reactions of state Not Working. */
        long transitioned_after = transitioned_before;
        /* Always execute local reactions. */
        transitioned_after = react(transitioned_before);
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
