/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:08:09 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrafficLightCtrl1Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightCtrl1Simplified_ESTest extends TrafficLightCtrl1Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      trafficLightCtrl1Simplified0.raiseTimeEvent(0);
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.isStateActive((TrafficLightCtrl1Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightCtrl1Simplified.Pedestrian trafficLightCtrl1Simplified_Pedestrian0 = new TrafficLightCtrl1Simplified.Pedestrian();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightCtrl1Simplified.TrafficLight trafficLightCtrl1Simplified_TrafficLight0 = new TrafficLightCtrl1Simplified.TrafficLight();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.runCycle();
      assertTrue(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      trafficLightCtrl1Simplified0.raiseOnOff();
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.runCycle();
      trafficLightCtrl1Simplified0.runCycle();
      assertTrue(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      trafficLightCtrl1Simplified0.raiseOnOff();
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.runCycle();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_SAFE;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.$NULLSTATE$;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_OFF;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_PEDWAITING;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_OFF_R1_YELLOWOFF;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_OFF_R1_YELLOWON;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_SAFE;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_STREETPREPARE;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_PEDESTRIANRED;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_PEDESTRIANGREEN;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_STREETRED;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_STREETATTENTION;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITOFF;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITON;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      assertFalse(trafficLightCtrl1Simplified0.isActive());
      
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.State trafficLightCtrl1Simplified_State0 = TrafficLightCtrl1Simplified.State.MAIN_REGION_ON_R1_STREETGREEN;
      boolean boolean0 = trafficLightCtrl1Simplified0.isStateActive(trafficLightCtrl1Simplified_State0);
      assertFalse(trafficLightCtrl1Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.runCycle();
      assertFalse(trafficLightCtrl1Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      assertFalse(trafficLightCtrl1Simplified0.isActive());
      
      trafficLightCtrl1Simplified0.enter();
      boolean boolean0 = trafficLightCtrl1Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      boolean boolean0 = trafficLightCtrl1Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      trafficLightCtrl1Simplified0.trafficLight();
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      trafficLightCtrl1Simplified0.pedestrian();
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      trafficLightCtrl1Simplified0.raisePedestrianRequest();
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      trafficLightCtrl1Simplified0.raiseOnOff();
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.runCycle();
      trafficLightCtrl1Simplified0.raiseOnOff();
      trafficLightCtrl1Simplified0.runCycle();
      assertFalse(trafficLightCtrl1Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      boolean boolean0 = trafficLightCtrl1Simplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      // Undeclared exception!
      try { 
        trafficLightCtrl1Simplified0.raiseTimeEvent(1888);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1888
         //
         verifyException("statechart.TrafficLightCtrl1Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      trafficLightCtrl1Simplified0.raiseOnOff();
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.runCycle();
      trafficLightCtrl1Simplified0.exit();
      assertFalse(trafficLightCtrl1Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TrafficLightCtrl1Simplified trafficLightCtrl1Simplified0 = new TrafficLightCtrl1Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setTimerService(iTimerService0);
      TrafficLightCtrl1Simplified.OperationCallback trafficLightCtrl1Simplified_OperationCallback0 = mock(TrafficLightCtrl1Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      trafficLightCtrl1Simplified0.setOperationCallback(trafficLightCtrl1Simplified_OperationCallback0);
      trafficLightCtrl1Simplified0.enter();
      trafficLightCtrl1Simplified0.exit();
      assertFalse(trafficLightCtrl1Simplified0.isFinal());
  }
}
