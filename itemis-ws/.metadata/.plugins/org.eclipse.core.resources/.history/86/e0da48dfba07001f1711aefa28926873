package temp;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.Resource;
import com.yakindu.sct.model.sgraph.SGraphPackage;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.emf.ecore.xmi.XMIResource;

import com.yakindu.sctunit.coverage.JSONToMeasurement;
import com.yakindu.sctunit.coverage.Measurement;
import com.yakindu.sctunit.coverage.MeasurementExtension;

public class Prova {

	public static void main(String[] args) throws IOException {

		String covPath = "models/ExamplStc-2024-05-01-142926.cov";

		String cov = new String(Files.readAllBytes(Paths.get(covPath)), StandardCharsets.UTF_8);

		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ysc", new XMIResourceFactoryImpl() {
			public Resource createResource(URI uri) {
//				System.out.println("Initial URI: " + uri.toString());
//				String platformResourcePath = uri.toPlatformString(true);
//				System.out.println("PlatformResourcePath: " + platformResourcePath);
//				int index = platformResourcePath.indexOf("/", 1);
//				System.out.println("index: " + index);
//				String rootContainerName = platformResourcePath.substring(1, index);
//				System.out.println("rootContainerName: " + rootContainerName);
//				String relativeName = platformResourcePath.substring(index + 1);
//				System.out.println("relativeName: " + relativeName);

				String[] args = { "-platformResource", "Temp",
						"file:///C:/Users/lenovo/Desktop/ProgettiGit/test-generator-for-yakindu/itemis-ws/Temp/" };
				EcorePlugin.handlePlatformResourceOptions(args);

				EPackage.Registry.INSTANCE.put(SGraphPackage.eNS_URI, SGraphPackage.eINSTANCE);
				EPackage.Registry.INSTANCE.put("http://www.eclipse.org/gmf/runtime/1.0.2/notation",
						NotationPackage.eINSTANCE);

//				Map<String, URI> map = EcorePlugin.getPlatformResourceMap();
//				System.out.println("map: " + map.toString());
//				
//				URI resolvedLocation = EcorePlugin.resolvePlatformResourcePath(platformResourcePath);
//				System.out.println("resolvedLocation: " + resolvedLocation);
				XMIResource xmiResource = new XMIResourceImpl(uri);
				return xmiResource;
			}
		});

		JSONToMeasurement j2m = new JSONToMeasurement(cov);
		Measurement measurement = j2m.generateMeasurement();

		MeasurementExtension measurementExtension = new MeasurementExtension(measurement);

		Measurement.StateTransitionCoverage coverage = measurementExtension.coverage(measurement);
		int value = (int) ((coverage.coverage) * 100.0F);
		System.out.println("Coverage: " + value + "%");
	}

}
