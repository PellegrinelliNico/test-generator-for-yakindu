/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 11 12:26:44 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TempSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TempSimplified_ESTest extends TempSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.raiseMyEvent(1L);
      tempSimplified0.enter();
      tempSimplified0.runCycle();
      tempSimplified0.runCycle();
      assertTrue(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.enter();
      tempSimplified0.runCycle();
      assertTrue(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.raiseMyEvent(1L);
      tempSimplified0.enter();
      tempSimplified0.runCycle();
      assertTrue(tempSimplified0.isActive());
      
      tempSimplified0.exit();
      assertFalse(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.enter();
      assertTrue(tempSimplified0.isActive());
      
      tempSimplified0.exit();
      assertFalse(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.raiseMyEvent(1L);
      tempSimplified0.enter();
      tempSimplified0.runCycle();
      TempSimplified.State tempSimplified_State0 = TempSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = tempSimplified0.isStateActive(tempSimplified_State0);
      assertTrue(tempSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.enter();
      TempSimplified.State tempSimplified_State0 = TempSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = tempSimplified0.isStateActive(tempSimplified_State0);
      assertTrue(tempSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      TempSimplified.State tempSimplified_State0 = TempSimplified.State.$NULLSTATE$;
      boolean boolean0 = tempSimplified0.isStateActive(tempSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      TempSimplified.State tempSimplified_State0 = TempSimplified.State.MAIN_REGION_STATEB;
      boolean boolean0 = tempSimplified0.isStateActive(tempSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      TempSimplified.State tempSimplified_State0 = TempSimplified.State.MAIN_REGION_STATEA;
      boolean boolean0 = tempSimplified0.isStateActive(tempSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.runCycle();
      assertFalse(tempSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.enter();
      boolean boolean0 = tempSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      boolean boolean0 = tempSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      tempSimplified0.exit();
      assertFalse(tempSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      boolean boolean0 = tempSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempSimplified tempSimplified0 = new TempSimplified();
      assertFalse(tempSimplified0.isActive());
      
      tempSimplified0.enter();
      tempSimplified0.raiseMyEvent(79L);
      tempSimplified0.runCycle();
      TempSimplified.Intf tempSimplified_Intf0 = tempSimplified0.intf();
      tempSimplified_Intf0.raiseMyIntfEvent(" T/Q,QTD");
      tempSimplified0.runCycle();
      assertTrue(tempSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TempSimplified.Intf tempSimplified_Intf0 = new TempSimplified.Intf();
      tempSimplified_Intf0.raiseMyIntfEvent("az.9dCA");
  }
}
