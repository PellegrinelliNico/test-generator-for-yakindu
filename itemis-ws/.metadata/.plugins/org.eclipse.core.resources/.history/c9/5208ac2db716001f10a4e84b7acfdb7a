/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:30:00 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._03_MotionLightSwitch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _03_MotionLightSwitch_ESTest extends _03_MotionLightSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.setIsExecuting(true);
      boolean boolean0 = _03_MotionLightSwitch0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      boolean boolean0 = _03_MotionLightSwitch0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.setBrightness(2304L);
      long long0 = _03_MotionLightSwitch0.getBrightness();
      assertEquals(2304L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.setBrightness((-2113L));
      long long0 = _03_MotionLightSwitch0.getBrightness();
      assertEquals((-2113L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.isStateActive((_03_MotionLightSwitch.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.$NULLSTATE$;
      _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MANUAL;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MOTIONSENSING;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MANUAL_R1_OFF;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MOTIONSENSING_R1_ON;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MANUAL_R1_ON;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch.State _03_MotionLightSwitch_State0 = _03_MotionLightSwitch.State.MAIN_MOTIONSENSING_R1_OFF;
      boolean boolean0 = _03_MotionLightSwitch0.isStateActive(_03_MotionLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      boolean boolean0 = _03_MotionLightSwitch0.nextEvent();
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      boolean boolean0 = _03_MotionLightSwitch0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      assertFalse(_03_MotionLightSwitch0.isActive());
      
      _03_MotionLightSwitch0.exit();
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.setTimerService((ITimerService) null);
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(_03_MotionLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      long long0 = _03_MotionLightSwitch0.getBrightness();
      assertEquals(0L, long0);
      assertFalse(_03_MotionLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      boolean boolean0 = _03_MotionLightSwitch0.isFinal();
      assertFalse(_03_MotionLightSwitch0.isActive());
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.getTimerService();
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(_03_MotionLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.raiseChangeBrightness();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      _03_MotionLightSwitch0.setIsExecuting(true);
      _03_MotionLightSwitch0.exit();
      assertEquals(0L, _03_MotionLightSwitch0.getBrightness());
      assertFalse(_03_MotionLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.raiseMotionDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.raiseSwitch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.raiseToggleMode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _03_MotionLightSwitch _03_MotionLightSwitch0 = new _03_MotionLightSwitch();
      // Undeclared exception!
      try { 
        _03_MotionLightSwitch0.raiseTimeEvent((-2267));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._03_MotionLightSwitch", e);
      }
  }
}
