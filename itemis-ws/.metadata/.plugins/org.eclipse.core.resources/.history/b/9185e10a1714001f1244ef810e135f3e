/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:21:37 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.SignalController;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignalController_ESTest extends SignalController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setSymbol(1601L);
      long long0 = signalController0.getSymbol();
      assertEquals(1601L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setStateConfVectorPosition(1330L);
      long long0 = signalController0.getStateConfVectorPosition();
      assertEquals(0L, signalController0.getSymbol());
      assertEquals(1330L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setStateConfVectorPosition((-192L));
      long long0 = signalController0.getStateConfVectorPosition();
      assertEquals((-192L), long0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setIsExecuting(true);
      boolean boolean0 = signalController0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      boolean boolean0 = signalController0.getIsExecuting();
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.$NULLSTATE$;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT;
      boolean boolean0 = signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN;
      boolean boolean0 = signalController0.isStateActive(signalController_State0);
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_FAILED;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
      signalController0.isStateActive(signalController_State0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED;
      boolean boolean0 = signalController0.isStateActive(signalController_State0);
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
      boolean boolean0 = signalController0.isStateActive(signalController_State0);
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.State signalController_State0 = SignalController.State.MAIN_REGION_WAIT_FOR_START;
      boolean boolean0 = signalController0.isStateActive(signalController_State0);
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      boolean boolean0 = signalController0.nextEvent();
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      boolean boolean0 = signalController0.isActive();
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setIsExecuting(true);
      signalController0.exit();
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getStateConfVectorChanged();
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getStateConfVectorPosition();
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.raiseStarted();
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseCompletedMain();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      assertFalse(signalController0.isActive());
      
      signalController0.exit();
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getSTOP();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getTimerService();
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getTurnDistant();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      boolean boolean0 = signalController0.isFinal();
      assertFalse(signalController0.isActive());
      assertFalse(boolean0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getDelay();
      assertEquals(350L, long0);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseExtend();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getCleared();
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getSymbol();
      assertEquals(0L, long0);
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.raiseCleared();
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.raiseTurnDistant((-690L));
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.raiseTurnShunt(350L);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getStarted();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getTurnMain();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.getTurnShunt();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseEnable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.raiseTurnMain(0L);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseTimeEvent(1395);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseCompletedShunt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setTimerService((ITimerService) null);
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getOFF();
      assertFalse(signalController0.isActive());
      assertEquals(0L, signalController0.getSymbol());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseCompletedDistant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getGO();
      assertFalse(signalController0.isActive());
      assertEquals(1L, long0);
      assertEquals(0L, signalController0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      long long0 = signalController0.getTimeout();
      assertEquals(5000L, long0);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      // Undeclared exception!
      try { 
        signalController0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SignalController", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      SignalController.OperationCallback signalController_OperationCallback0 = mock(SignalController.OperationCallback.class, new ViolatedAssumptionAnswer());
      signalController0.setOperationCallback(signalController_OperationCallback0);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SignalController signalController0 = new SignalController();
      signalController0.setStateConfVectorChanged(false);
      assertEquals(0L, signalController0.getSymbol());
      assertFalse(signalController0.isActive());
  }
}
