/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:15:16 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Active_Systems_CounterSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Active_Systems_CounterSimplified_ESTest extends Active_Systems_CounterSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      // Undeclared exception!
      try { 
        active_Systems_CounterSimplified0.isStateActive((Active_Systems_CounterSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Active_Systems_CounterSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Active_Systems_CounterSimplified.Counter active_Systems_CounterSimplified_Counter0 = new Active_Systems_CounterSimplified.Counter();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.enter();
      active_Systems_CounterSimplified0.triggerWithoutEvent();
      assertTrue(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.enter();
      active_Systems_CounterSimplified0.raiseDecrement();
      assertTrue(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.enter();
      assertTrue(active_Systems_CounterSimplified0.isActive());
      
      active_Systems_CounterSimplified0.exit();
      assertFalse(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      Active_Systems_CounterSimplified.State active_Systems_CounterSimplified_State0 = Active_Systems_CounterSimplified.State.MAIN_REGION_STATICUPDATE;
      active_Systems_CounterSimplified0.enter();
      boolean boolean0 = active_Systems_CounterSimplified0.isStateActive(active_Systems_CounterSimplified_State0);
      assertTrue(active_Systems_CounterSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      Active_Systems_CounterSimplified.State active_Systems_CounterSimplified_State0 = Active_Systems_CounterSimplified.State.$NULLSTATE$;
      boolean boolean0 = active_Systems_CounterSimplified0.isStateActive(active_Systems_CounterSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      Active_Systems_CounterSimplified.State active_Systems_CounterSimplified_State0 = Active_Systems_CounterSimplified.State.MAIN_REGION_STATICUPDATE;
      boolean boolean0 = active_Systems_CounterSimplified0.isStateActive(active_Systems_CounterSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.enter();
      boolean boolean0 = active_Systems_CounterSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      boolean boolean0 = active_Systems_CounterSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.exit();
      assertFalse(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      boolean boolean0 = active_Systems_CounterSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.triggerWithoutEvent();
      assertFalse(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      Active_Systems_CounterSimplified.Counter active_Systems_CounterSimplified_Counter0 = active_Systems_CounterSimplified0.counter();
      assertNotNull(active_Systems_CounterSimplified_Counter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      active_Systems_CounterSimplified0.raiseIncrement();
      assertFalse(active_Systems_CounterSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Active_Systems_CounterSimplified active_Systems_CounterSimplified0 = new Active_Systems_CounterSimplified();
      assertFalse(active_Systems_CounterSimplified0.isActive());
      
      active_Systems_CounterSimplified0.enter();
      active_Systems_CounterSimplified0.raiseIncrement();
      assertTrue(active_Systems_CounterSimplified0.isActive());
  }
}
