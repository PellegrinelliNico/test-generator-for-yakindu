/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:27:07 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Light_switchSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Light_switchSimplified_ESTest extends Light_switchSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback1 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(light_switchSimplified_Light_OperationCallback1).computeMaxBrightness();
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback1);
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      light_switchSimplified_User0.raiseOn_button();
      assertTrue(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.raiseTimeEvent(0);
      assertFalse(light_switchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      // Undeclared exception!
      try { 
        light_switchSimplified0.raiseTimeEvent(706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 706
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      // Undeclared exception!
      try { 
        light_switchSimplified0.isStateActive((Light_switchSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Light_switchSimplified.Light light_switchSimplified_Light0 = new Light_switchSimplified.Light();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      Light_switchSimplified.User light_switchSimplified_User0 = new Light_switchSimplified.User(light_switchSimplified0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      light_switchSimplified0.triggerWithoutEvent();
      assertTrue(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOff_button();
      assertTrue(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      assertTrue(light_switchSimplified0.isActive());
      
      light_switchSimplified0.exit();
      assertFalse(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      assertTrue(light_switchSimplified0.isActive());
      
      light_switchSimplified0.exit();
      assertFalse(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      Light_switchSimplified.State light_switchSimplified_State0 = Light_switchSimplified.State.MAIN_REGION_ON;
      boolean boolean0 = light_switchSimplified0.isStateActive(light_switchSimplified_State0);
      assertTrue(light_switchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.State light_switchSimplified_State0 = Light_switchSimplified.State.MAIN_REGION_OFF;
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      boolean boolean0 = light_switchSimplified0.isStateActive(light_switchSimplified_State0);
      assertTrue(light_switchSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      Light_switchSimplified.State light_switchSimplified_State0 = Light_switchSimplified.State.MAIN_REGION_ON;
      boolean boolean0 = light_switchSimplified0.isStateActive(light_switchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      Light_switchSimplified.State light_switchSimplified_State0 = Light_switchSimplified.State.$NULLSTATE$;
      boolean boolean0 = light_switchSimplified0.isStateActive(light_switchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      Light_switchSimplified.State light_switchSimplified_State0 = Light_switchSimplified.State.MAIN_REGION_OFF;
      boolean boolean0 = light_switchSimplified0.isStateActive(light_switchSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        light_switchSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Light must be set.
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      light_switchSimplified0.enter();
      boolean boolean0 = light_switchSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      boolean boolean0 = light_switchSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      light_switchSimplified0.exit();
      assertFalse(light_switchSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        light_switchSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback for interface Light must be set.
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      // Undeclared exception!
      try { 
        light_switchSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      boolean boolean0 = light_switchSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      assertFalse(light_switchSimplified0.isActive());
      
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      light_switchSimplified_User0.raiseOff_button();
      assertTrue(light_switchSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      // Undeclared exception!
      try { 
        light_switchSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      // Undeclared exception!
      try { 
        light_switchSimplified0.raiseTimeEvent(706);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Light_switchSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Light_switchSimplified light_switchSimplified0 = new Light_switchSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      light_switchSimplified0.setTimerService(iTimerService0);
      Light_switchSimplified.Light light_switchSimplified_Light0 = light_switchSimplified0.light();
      Light_switchSimplified.Light.OperationCallback light_switchSimplified_Light_OperationCallback0 = mock(Light_switchSimplified.Light.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(light_switchSimplified_Light_OperationCallback0).computeMaxBrightness();
      light_switchSimplified_Light0.setOperationCallback(light_switchSimplified_Light_OperationCallback0);
      assertFalse(light_switchSimplified0.isActive());
      
      light_switchSimplified0.enter();
      Light_switchSimplified.User light_switchSimplified_User0 = light_switchSimplified0.user();
      light_switchSimplified_User0.raiseOn_button();
      light_switchSimplified_User0.raiseOn_button();
      assertTrue(light_switchSimplified0.isActive());
  }
}
