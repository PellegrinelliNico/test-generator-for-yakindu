/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:14:25 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Section;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Section_ESTest extends Section_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Section section0 = new Section();
      assertFalse(section0.getOccupied());
      
      section0.setOccupied(true);
      boolean boolean0 = section0.getOccupied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Section section0 = new Section();
      section0.setIsExecuting(true);
      boolean boolean0 = section0.getIsExecuting();
      assertTrue(boolean0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Section section0 = new Section();
      section0.getIsExecuting();
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Section section0 = new Section();
      assertTrue(section0.getAuto_off());
      
      section0.setAuto_off(false);
      boolean boolean0 = section0.getAuto_off();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Section section0 = new Section();
      section0.setAuto_unlock(true);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.getStateResponseValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event StateResponse is not raised!
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.getEnableValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Enable is not raised!
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.$NULLSTATE$;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertFalse(boolean0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertFalse(boolean0);
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_FAILED;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT;
      section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED;
      section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Section section0 = new Section();
      Section.State section_State0 = Section.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY;
      boolean boolean0 = section0.isStateActive(section_State0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.nextEvent();
      assertFalse(boolean0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseLocal_leaving();
      boolean boolean0 = section0.nextEvent();
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.isActive();
      assertFalse(boolean0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Section section0 = new Section();
      section0.setIsExecuting(true);
      section0.exit();
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Section section0 = new Section();
      section0.getStateConfVectorChanged();
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Section section0 = new Section();
      Section.OperationCallback section_OperationCallback0 = mock(Section.OperationCallback.class, new ViolatedAssumptionAnswer());
      section0.setOperationCallback(section_OperationCallback0);
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Section section0 = new Section();
      section0.getLeaving();
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseTryUnblock();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseStop();
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Section section0 = new Section();
      section0.setStateConfVectorPosition(0L);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Section section0 = new Section();
      section0.getUnregister();
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseStarted();
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Section section0 = new Section();
      section0.getStarted();
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Section section0 = new Section();
      section0.setStateConfVectorChanged(true);
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Section section0 = new Section();
      section0.getStop();
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Section section0 = new Section();
      section0.getTimerService();
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseEnable(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.getAuto_unlock();
      assertTrue(boolean0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseTimeEvent(1447);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseUnregister();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Section section0 = new Section();
      long long0 = section0.getTimeout();
      assertEquals(500L, long0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Section section0 = new Section();
      section0.setTimerService((ITimerService) null);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseLeft();
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseEntered();
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Section section0 = new Section();
      section0.getStateConfVectorPosition();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Section section0 = new Section();
      assertFalse(section0.isActive());
      
      section0.exit();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseStateResponse(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Section section0 = new Section();
      section0.getLeft();
      assertFalse(section0.isActive());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.isFinal();
      assertFalse(section0.isActive());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_off());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.getOccupied();
      assertFalse(section0.isActive());
      assertFalse(boolean0);
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseRelaisResponse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Section section0 = new Section();
      section0.raiseLeaving();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertTrue(section0.getAuto_off());
      assertFalse(section0.isActive());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Section section0 = new Section();
      // Undeclared exception!
      try { 
        section0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.getAuto_off();
      assertTrue(boolean0);
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Section section0 = new Section();
      section0.getTryUnblock();
      assertFalse(section0.getOccupied());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.isActive());
      assertTrue(section0.getAuto_off());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Section section0 = new Section();
      section0.getEntered();
      assertFalse(section0.isActive());
      assertTrue(section0.getAuto_off());
      assertTrue(section0.getAuto_unlock());
      assertFalse(section0.getOccupied());
  }
}
