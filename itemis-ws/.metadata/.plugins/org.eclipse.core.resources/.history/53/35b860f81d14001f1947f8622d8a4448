/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 18:59:28 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart._MotorControl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _MotorControl_ESTest extends _MotorControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(0.5);
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed((-106.594111));
      _MotorControl0.raiseSetActualSpeed(300.8806775888);
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(2299.07163127);
      _MotorControl0.raiseSetActualSpeed(0.0);
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.raiseSetAcceleration(2727.0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.nextEvent();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      
      _MotorControl0.setTargetSpeed(1.0);
      double double0 = _MotorControl0.getTargetSpeed();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      
      _MotorControl0.setTargetSpeed((-1.0));
      double double0 = _MotorControl0.getTargetSpeed();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.getStateConfVectorPosition();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      long long0 = _MotorControl0.getStateConfVectorPosition();
      assertTrue(_MotorControl0.isActive());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setStateConfVectorPosition((-3885L));
      long long0 = _MotorControl0.getStateConfVectorPosition();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertEquals((-3885L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.raiseSetTargetSpeed(0.0);
      boolean boolean0 = _MotorControl0.nextEvent();
      assertTrue(boolean0);
      
      double double0 = _MotorControl0.getSetTargetSpeedValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.raiseSetTargetSpeed(1.0);
      boolean boolean0 = _MotorControl0.nextEvent();
      assertTrue(boolean0);
      
      double double0 = _MotorControl0.getSetTargetSpeedValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.raiseSetActualSpeed((-2131.778926));
      boolean boolean0 = _MotorControl0.nextEvent();
      assertTrue(boolean0);
      
      double double0 = _MotorControl0.getSetActualSpeedValue();
      assertEquals((-2131.778926), double0, 0.01);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.getIsExecuting();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      boolean boolean0 = _MotorControl0.getIsExecuting();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      // Undeclared exception!
      try { 
        _MotorControl0.isStateActive((_MotorControl.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._MotorControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      double double0 = _MotorControl0.getTargetSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(0.0);
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed((-917.98));
      _MotorControl0.raiseSetActualSpeed((-2175.50838260534));
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(569.183);
      _MotorControl0.raiseSetActualSpeed((-917.98));
      _MotorControl0.triggerWithoutEvent();
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(401.91);
      _MotorControl0.triggerWithoutEvent();
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.exit();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed((-105.594111));
      _MotorControl0.exit();
      assertFalse(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      // Undeclared exception!
      try { 
        _MotorControl0.getSetActualSpeedValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event SetActualSpeed is not raised!
         //
         verifyException("statechart._MotorControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      // Undeclared exception!
      try { 
        _MotorControl0.getSetTargetSpeedValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event SetTargetSpeed is not raised!
         //
         verifyException("statechart._MotorControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R2_DEFAULT;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertTrue(_MotorControl0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_CRUISING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertTrue(_MotorControl0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed((-917.98));
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertTrue(_MotorControl0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(2184.98);
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_BREAKING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertTrue(_MotorControl0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertTrue(_MotorControl0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.$NULLSTATE$;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertFalse(boolean0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R2_DEFAULT;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertFalse(boolean0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_CRUISING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertFalse(boolean0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl.State _MotorControl_State0 = _MotorControl.State.MOTORCONTROL_MOTORCONTROL_R1_BREAKING;
      boolean boolean0 = _MotorControl0.isStateActive(_MotorControl_State0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.raiseSetTargetSpeed(658.3742024699);
      _MotorControl0.setIsExecuting(false);
      assertFalse(_MotorControl0.isActive());
      
      _MotorControl0.raiseSetTargetSpeed((-313.2));
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.raiseSetActualSpeed(1L);
      boolean boolean0 = _MotorControl0.nextEvent();
      assertTrue(boolean0);
      
      double double0 = _MotorControl0.getSetActualSpeedValue();
      assertEquals(1.0, double0, 0.01);
      assertFalse(_MotorControl0.isActive());
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      assertFalse(_MotorControl0.isActive());
      
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(1.0);
      _MotorControl0.raiseSetActualSpeed(1.0);
      assertTrue(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      boolean boolean0 = _MotorControl0.isActive();
      assertFalse(boolean0);
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      assertFalse(_MotorControl0.isActive());
      
      _MotorControl0.enter();
      boolean boolean0 = _MotorControl0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.exit();
      assertFalse(_MotorControl0.isActive());
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.setIsExecuting(true);
      _MotorControl0.enter();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      boolean boolean0 = _MotorControl0.isFinal();
      assertFalse(_MotorControl0.isActive());
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed((-917.98));
      _MotorControl0.raiseSetTargetSpeed((-1364.5711449971));
      _MotorControl0.raiseSetActualSpeed((-1364.5711449971));
      assertEquals((-1364.5711449971), _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.getSetAcceleration();
      assertFalse(_MotorControl0.isActive());
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      _MotorControl0.raiseSetActualSpeed(401.91);
      assertTrue(_MotorControl0.isActive());
      
      _MotorControl0.exit();
      assertFalse(_MotorControl0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      _MotorControl _MotorControl0 = new _MotorControl();
      _MotorControl0.enter();
      assertTrue(_MotorControl0.isActive());
      
      _MotorControl0.exit();
      assertEquals(0.0, _MotorControl0.getTargetSpeed(), 0.01);
  }
}
