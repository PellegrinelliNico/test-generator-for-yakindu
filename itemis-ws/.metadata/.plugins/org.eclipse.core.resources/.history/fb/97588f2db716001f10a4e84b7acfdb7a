/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:18:36 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Eventdriven;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Eventdriven_ESTest extends Eventdriven_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      eventdriven0.setIsExecuting(true);
      boolean boolean0 = eventdriven0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      boolean boolean0 = eventdriven0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      // Undeclared exception!
      try { 
        eventdriven0.isStateActive((Eventdriven.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Eventdriven", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.$NULLSTATE$;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.MAIN_REGION_STATEE;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.MAIN_REGION_STATEC;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.MAIN_REGION_STATEB;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.MAIN_REGION_STATED;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      Eventdriven.State eventdriven_State0 = Eventdriven.State.MAIN_REGION_STATEA;
      boolean boolean0 = eventdriven0.isStateActive(eventdriven_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      boolean boolean0 = eventdriven0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      boolean boolean0 = eventdriven0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      // Undeclared exception!
      try { 
        eventdriven0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Eventdriven", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      eventdriven0.setTimerService((ITimerService) null);
      assertFalse(eventdriven0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      // Undeclared exception!
      try { 
        eventdriven0.raiseInput();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Eventdriven", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      ITimerService iTimerService0 = eventdriven0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      // Undeclared exception!
      try { 
        eventdriven0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Eventdriven", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      eventdriven0.setIsExecuting(true);
      eventdriven0.exit();
      assertFalse(eventdriven0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      // Undeclared exception!
      try { 
        eventdriven0.raiseTimeEvent(19);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Eventdriven", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      boolean boolean0 = eventdriven0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Eventdriven eventdriven0 = new Eventdriven();
      eventdriven0.exit();
      assertFalse(eventdriven0.isFinal());
  }
}
