/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 05:53:40 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._blink;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _blink_ESTest extends _blink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.OperationCallback _blink_OperationCallback0 = mock(_blink.OperationCallback.class, new ViolatedAssumptionAnswer());
      _blink0.setOperationCallback(_blink_OperationCallback0);
      _blink0.exit();
      assertEquals(500L, _blink0.getT_light());
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _blink _blink0 = new _blink();
      assertEquals(500L, _blink0.getT_light());
      
      _blink0.setT_light(0L);
      _blink0.getT_light();
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _blink _blink0 = new _blink();
      assertEquals(500L, _blink0.getT_light());
      
      _blink0.setT_light((-1L));
      long long0 = _blink0.getT_light();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _blink _blink0 = new _blink();
      assertEquals(500L, _blink0.getT_dark());
      
      _blink0.setT_dark(0L);
      _blink0.getT_dark();
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _blink _blink0 = new _blink();
      assertEquals(500L, _blink0.getT_dark());
      
      _blink0.setT_dark((-1L));
      long long0 = _blink0.getT_dark();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.setIsExecuting(true);
      _blink0.getIsExecuting();
      assertEquals(500L, _blink0.getT_dark());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _blink _blink0 = new _blink();
      boolean boolean0 = _blink0.getIsExecuting();
      assertEquals(500L, _blink0.getT_light());
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _blink _blink0 = new _blink();
      // Undeclared exception!
      try { 
        _blink0.isStateActive((_blink.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._blink", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.$NULLSTATE$;
      _blink0.isStateActive(_blink_State0);
      assertEquals(500L, _blink0.getT_light());
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _blink _blink0 = new _blink();
      assertFalse(_blink0.isActive());
      
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT__REGION0_ON5;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertFalse(boolean0);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT__REGION0_ON4;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_light());
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(_blink0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT__REGION0_ON3;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(boolean0);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT__REGION0_ON2;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertEquals(500L, _blink0.getT_light());
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(_blink0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_DARK;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertEquals(500L, _blink0.getT_light());
      assertFalse(_blink0.isActive());
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink.State _blink_State0 = _blink.State.MAIN_LIGHT__REGION0_ON1;
      boolean boolean0 = _blink0.isStateActive(_blink_State0);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _blink _blink0 = new _blink();
      boolean boolean0 = _blink0.nextEvent();
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_light());
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _blink _blink0 = new _blink();
      boolean boolean0 = _blink0.isActive();
      assertFalse(boolean0);
      assertEquals(500L, _blink0.getT_dark());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.setIsExecuting(true);
      _blink0.exit();
      assertEquals(500L, _blink0.getT_light());
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _blink _blink0 = new _blink();
      // Undeclared exception!
      try { 
        _blink0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._blink", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _blink _blink0 = new _blink();
      // Undeclared exception!
      try { 
        _blink0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart._blink", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _blink _blink0 = new _blink();
      long long0 = _blink0.getT_light();
      assertEquals(500L, long0);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _blink _blink0 = new _blink();
      // Undeclared exception!
      try { 
        _blink0.raiseTimeEvent(7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._blink", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.getCycleCompleted();
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _blink _blink0 = new _blink();
      boolean boolean0 = _blink0.isFinal();
      assertEquals(500L, _blink0.getT_light());
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _blink _blink0 = new _blink();
      long long0 = _blink0.getT_dark();
      assertEquals(500L, long0);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_light());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.raiseCycleCompleted();
      assertEquals(500L, _blink0.getT_light());
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _blink _blink0 = new _blink();
      // Undeclared exception!
      try { 
        _blink0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._blink", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.getTimerService();
      assertEquals(500L, _blink0.getT_dark());
      assertEquals(500L, _blink0.getT_light());
      assertFalse(_blink0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _blink _blink0 = new _blink();
      _blink0.setTimerService((ITimerService) null);
      assertFalse(_blink0.isActive());
      assertEquals(500L, _blink0.getT_dark());
      assertEquals(500L, _blink0.getT_light());
  }
}
