/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:24:03 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.PhysicalEntity_Template;
import statechart.Power_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhysicalEntity_Template_ESTest extends PhysicalEntity_Template_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator;
      physicalEntity_Template_Oscillator0.setEcho_value(1717L);
      assertEquals(1717L, physicalEntity_Template_Oscillator0.getEcho_value());
      
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator1 = physicalEntity_Template0.oscillator();
      assertFalse(physicalEntity_Template_Oscillator1.getReceiving());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setStateConfVectorPosition(3L);
      long long0 = physicalEntity_Template0.getStateConfVectorPosition();
      assertEquals(3L, long0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setStateConfVectorPosition((-1017L));
      long long0 = physicalEntity_Template0.getStateConfVectorPosition();
      assertFalse(physicalEntity_Template0.getReading());
      assertEquals((-1017L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      Power_Component power_Component0 = new Power_Component();
      physicalEntity_Template0.setPowerSupply(power_Component0);
      physicalEntity_Template0.getPowerSupply();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setIsExecuting(true);
      boolean boolean0 = physicalEntity_Template0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getIsExecuting();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setEnvironmentData(2204L);
      long long0 = physicalEntity_Template0.getEnvironmentData();
      assertEquals(2204L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setEnvironmentData((-145L));
      long long0 = physicalEntity_Template0.getEnvironmentData();
      assertEquals((-145L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Frequency physicalEntity_Template_Frequency0 = physicalEntity_Template0.frequency();
      physicalEntity_Template_Frequency0.setDoppler(1053L);
      assertEquals(1053L, physicalEntity_Template_Frequency0.getDoppler());
      
      PhysicalEntity_Template.Frequency physicalEntity_Template_Frequency1 = physicalEntity_Template0.frequency();
      assertEquals(1053L, physicalEntity_Template_Frequency1.getDoppler());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.isStateActive((PhysicalEntity_Template.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator();
      physicalEntity_Template_Oscillator0.setEcho_value(1750L);
      assertEquals(1750L, physicalEntity_Template_Oscillator0.getEcho_value());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setReading(true);
      boolean boolean0 = physicalEntity_Template0.getReading();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhysicalEntity_Template.Power physicalEntity_Template_Power0 = new PhysicalEntity_Template.Power();
      assertEquals(0L, physicalEntity_Template_Power0.getKWh());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setSensorData((-441L));
      assertEquals((-441L), physicalEntity_Template0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator();
      physicalEntity_Template_Oscillator0.setTransmit_value(2L);
      assertEquals(2L, physicalEntity_Template_Oscillator0.getTransmit_value());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      physicalEntity_Template0.setActuator(actuator_Component0);
      physicalEntity_Template0.getActuator();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Trigger physicalEntity_Template_Trigger0 = new PhysicalEntity_Template.Trigger(physicalEntity_Template0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator();
      physicalEntity_Template_Oscillator0.setTransducing(true);
      assertTrue(physicalEntity_Template_Oscillator0.getTransducing());
      
      physicalEntity_Template0.oscillator();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      Controller_Component controller_Component0 = new Controller_Component();
      physicalEntity_Template0.setController(controller_Component0);
      physicalEntity_Template0.getController();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PhysicalEntity_Template.Frequency physicalEntity_Template_Frequency0 = new PhysicalEntity_Template.Frequency();
      physicalEntity_Template_Frequency0.setDoppler(0L);
      assertEquals(0L, physicalEntity_Template_Frequency0.getDoppler());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Comparator physicalEntity_Template_Comparator0 = physicalEntity_Template0.comparator();
      physicalEntity_Template_Comparator0.setWorking(false);
      assertFalse(physicalEntity_Template_Comparator0.getWorking());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Power physicalEntity_Template_Power0 = physicalEntity_Template0.power;
      physicalEntity_Template_Power0.setKWh(0L);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator();
      physicalEntity_Template_Oscillator0.setReceiving(false);
      assertFalse(physicalEntity_Template_Oscillator0.getReceiving());
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template_Oscillator0.getTransducing());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PhysicalEntity_Template.Comparator physicalEntity_Template_Comparator0 = new PhysicalEntity_Template.Comparator();
      assertFalse(physicalEntity_Template_Comparator0.getWorking());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.$NULLSTATE$;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      assertFalse(physicalEntity_Template0.isActive());
      
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING_;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__OFF_;
      physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.State physicalEntity_Template_State0 = PhysicalEntity_Template.State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING;
      boolean boolean0 = physicalEntity_Template0.isStateActive(physicalEntity_Template_State0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      boolean boolean0 = physicalEntity_Template0.nextEvent();
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      boolean boolean0 = physicalEntity_Template0.isActive();
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setIsExecuting(true);
      physicalEntity_Template0.exit();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Trigger physicalEntity_Template_Trigger0 = physicalEntity_Template0.trigger;
      // Undeclared exception!
      try { 
        physicalEntity_Template_Trigger0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      boolean boolean0 = physicalEntity_Template0.isFinal();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      boolean boolean0 = physicalEntity_Template0.getReading();
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Power physicalEntity_Template_Power0 = physicalEntity_Template0.power();
      physicalEntity_Template_Power0.getKWh();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getActuator();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getController();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.setTimerService((ITimerService) null);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getStateConfVectorPosition();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.raiseTimeEvent(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Frequency physicalEntity_Template_Frequency0 = physicalEntity_Template0.frequency();
      physicalEntity_Template_Frequency0.getDoppler();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getPowerSupply();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getEnvironmentData();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      // Undeclared exception!
      try { 
        physicalEntity_Template0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Trigger physicalEntity_Template_Trigger0 = physicalEntity_Template0.trigger();
      // Undeclared exception!
      try { 
        physicalEntity_Template_Trigger0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getTimerService();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Status physicalEntity_Template_Status0 = physicalEntity_Template0.status();
      physicalEntity_Template_Status0.setActivity(false);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template_Status0.getActivity());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      assertFalse(physicalEntity_Template0.isActive());
      
      physicalEntity_Template0.exit();
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      physicalEntity_Template0.getSensorData();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Comparator physicalEntity_Template_Comparator0 = physicalEntity_Template0.comparator();
      boolean boolean0 = physicalEntity_Template_Comparator0.getWorking();
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator();
      boolean boolean0 = physicalEntity_Template_Oscillator0.getReceiving();
      assertFalse(physicalEntity_Template_Oscillator0.getTransducing());
      assertFalse(boolean0);
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = new PhysicalEntity_Template.Oscillator();
      boolean boolean0 = physicalEntity_Template_Oscillator0.getTransducing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = new PhysicalEntity_Template.Oscillator();
      long long0 = physicalEntity_Template_Oscillator0.getEcho_value();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Oscillator physicalEntity_Template_Oscillator0 = physicalEntity_Template0.oscillator;
      physicalEntity_Template_Oscillator0.getTransmit_value();
      assertFalse(physicalEntity_Template0.isActive());
      assertFalse(physicalEntity_Template_Oscillator0.getReceiving());
      assertFalse(physicalEntity_Template_Oscillator0.getTransducing());
      assertFalse(physicalEntity_Template0.getReading());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Status physicalEntity_Template_Status0 = physicalEntity_Template0.status;
      // Undeclared exception!
      try { 
        physicalEntity_Template_Status0.raiseActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Status physicalEntity_Template_Status0 = new PhysicalEntity_Template.Status(physicalEntity_Template0);
      physicalEntity_Template_Status0.getActivity();
      assertFalse(physicalEntity_Template0.getReading());
      assertFalse(physicalEntity_Template0.isActive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PhysicalEntity_Template physicalEntity_Template0 = new PhysicalEntity_Template();
      PhysicalEntity_Template.Status physicalEntity_Template_Status0 = new PhysicalEntity_Template.Status(physicalEntity_Template0);
      // Undeclared exception!
      try { 
        physicalEntity_Template_Status0.raiseNoActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.PhysicalEntity_Template", e);
      }
  }
}
