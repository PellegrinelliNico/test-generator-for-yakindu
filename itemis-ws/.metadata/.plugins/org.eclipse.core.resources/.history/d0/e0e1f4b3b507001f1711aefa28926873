package temp;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import com.google.inject.Injector;
import com.yakindu.sct.domain.extension.DomainRegistry;
import com.yakindu.sct.domain.extension.IDomain;
import com.yakindu.sct.model.sgraph.SGraphPackage;

import org.eclipse.emf.common.command.BasicCommandStack;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLResourceFactoryImpl;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.emf.ecore.xmi.XMIResource;
import java.io.File;

import com.yakindu.base.base.BasePackage;
import com.yakindu.base.base.NamedElement;
import com.yakindu.base.base.impl.BasePackageImpl;
import com.yakindu.base.types.AnnotatableElement;
import com.yakindu.base.types.Annotation;
import com.yakindu.base.types.Declaration;
import com.yakindu.base.types.Property;
import com.yakindu.base.types.Type;
import com.yakindu.base.types.TypeParameter;
import com.yakindu.base.types.TypeSpecifier;
import com.fasterxml.jackson.core.JsonFactory;
import com.yakindu.sctunit.coverage.JSONToMeasurement;
import com.yakindu.sctunit.coverage.Measurement;
import com.yakindu.sctunit.coverage.MeasurementExtension;
import com.yakindu.sctunit.coverage.StatechartMeasurementBuilder;
import com.yakindu.sctunit.sCTUnit.SCTUnitClass;
import com.yakindu.sctunit.sCTUnit.SCTUnitSuite;
import com.yakindu.sctunit.sCTUnit.TestPackage;
import com.yakindu.sctunit.sCTUnit.SCTUnitFactory;
import com.yakindu.sctunit.sCTUnit.impl.SCTUnitSuiteImpl;
import com.yakindu.sctunit.sCTUnit.impl.SCTUnitFactoryImpl;
import com.yakindu.sctunit.simulation.core.debugmodel.SCTUnitDebugTarget;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

public class Prova {

	public static void main(String[] args) throws IOException {

		String covPath = "models/ExamplStc-2024-04-30-101817.cov";

		String cov = new String(Files.readAllBytes(Paths.get(covPath)), StandardCharsets.UTF_8);

		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ysc", new XMIResourceFactoryImpl() {
			public Resource createResource(URI uri) {
//				System.out.println("Initial URI: " + uri.toString());
//				String platformResourcePath = uri.toPlatformString(true);
//				System.out.println("PlatformResourcePath: " + platformResourcePath);
//				int index = platformResourcePath.indexOf("/", 1);
//				System.out.println("index: " + index);
//				String rootContainerName = platformResourcePath.substring(1, index);
//				System.out.println("rootContainerName: " + rootContainerName);
//				String relativeName = platformResourcePath.substring(index + 1);
//				System.out.println("relativeName: " + relativeName);
				
				String[] args = {"-platformResource", "Temp", "file:///C:/Users/lenovo/Desktop/ProgettiGit/test-generator-for-yakindu/itemis-ws/Temp/"};
				EcorePlugin.handlePlatformResourceOptions(args);
				
				EPackage.Registry.INSTANCE.put(NotationPackage.eNS_URI, NotationPackage.eINSTANCE);
				EPackage.Registry.INSTANCE.put(SGraphPackage.eNS_URI, SGraphPackage.eINSTANCE);
				
				
//				Map<String, URI> map = EcorePlugin.getPlatformResourceMap();
//				System.out.println("map: " + map.toString());
//				
//				URI resolvedLocation = EcorePlugin.resolvePlatformResourcePath(platformResourcePath);
//				System.out.println("resolvedLocation: " + resolvedLocation);
				XMIResource xmiResource = new XMIResourceImpl(uri);
				return xmiResource;
			}
		});
		
		JSONToMeasurement j2m = new JSONToMeasurement(cov);
		Measurement measurement = j2m.generateMeasurement();

		MeasurementExtension measurementExtension = new MeasurementExtension(measurement);

		Measurement.StateTransitionCoverage coverage = measurementExtension.coverage(measurement);
		String value = (int) ((1.0F - coverage.coverage) * 100.0F) + "%";

		System.out.println("Coverage: " + value);
	}

}
