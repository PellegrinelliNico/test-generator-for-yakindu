/*
 * This file was automatically generated by EvoSuite
 * Thu May 09 19:13:19 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Alarm2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Alarm2_ESTest extends Alarm2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      assertFalse(alarm2_0.getPass());
      
      alarm2_0.setPass(true);
      boolean boolean0 = alarm2_0.getPass();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      alarm2_0.setIsExecuting(true);
      boolean boolean0 = alarm2_0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(alarm2_0.getPass());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      boolean boolean0 = alarm2_0.getIsExecuting();
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.isStateActive((Alarm2.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      Alarm2.State alarm2_State0 = Alarm2.State.$NULLSTATE$;
      boolean boolean0 = alarm2_0.isStateActive(alarm2_State0);
      assertFalse(boolean0);
      assertFalse(alarm2_0.getPass());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      Alarm2.State alarm2_State0 = Alarm2.State.MAIN_REGION_PARTIALLYARMED;
      boolean boolean0 = alarm2_0.isStateActive(alarm2_State0);
      assertFalse(boolean0);
      assertFalse(alarm2_0.getPass());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      Alarm2.State alarm2_State0 = Alarm2.State.MAIN_REGION_ARMED;
      boolean boolean0 = alarm2_0.isStateActive(alarm2_State0);
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      Alarm2.State alarm2_State0 = Alarm2.State.MAIN_REGION_LIGHTON;
      boolean boolean0 = alarm2_0.isStateActive(alarm2_State0);
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      Alarm2.State alarm2_State0 = Alarm2.State.MAIN_REGION_DISARMED;
      boolean boolean0 = alarm2_0.isStateActive(alarm2_State0);
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      boolean boolean0 = alarm2_0.nextEvent();
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      boolean boolean0 = alarm2_0.isActive();
      assertFalse(alarm2_0.getPass());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.raiseButton1();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      assertFalse(alarm2_0.isActive());
      
      alarm2_0.exit();
      assertFalse(alarm2_0.getPass());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      alarm2_0.setTimerService((ITimerService) null);
      assertFalse(alarm2_0.getPass());
      assertFalse(alarm2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.raiseButton2();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      boolean boolean0 = alarm2_0.isFinal();
      assertFalse(boolean0);
      assertFalse(alarm2_0.isActive());
      assertFalse(alarm2_0.getPass());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      boolean boolean0 = alarm2_0.getPass();
      assertFalse(alarm2_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.raiseTimeEvent(5211);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      alarm2_0.getTimerService();
      assertFalse(alarm2_0.getPass());
      assertFalse(alarm2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      alarm2_0.setIsExecuting(true);
      alarm2_0.exit();
      assertFalse(alarm2_0.getPass());
      assertFalse(alarm2_0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Alarm2 alarm2_0 = new Alarm2();
      // Undeclared exception!
      try { 
        alarm2_0.raiseButton();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Alarm2", e);
      }
  }
}
