/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:42:40 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart._05_PresenceSimulationLightSwitch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class _05_PresenceSimulationLightSwitch_ESTest extends _05_PresenceSimulationLightSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = _05_PresenceSimulationLightSwitch0.simulation;
      assertEquals(5L, _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MIN());
      
      _05_PresenceSimulationLightSwitch_Simulation0.setWAIT_MIN((-1L));
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation1 = _05_PresenceSimulationLightSwitch0.simulation();
      assertEquals((-1L), _05_PresenceSimulationLightSwitch_Simulation1.getWAIT_MIN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = _05_PresenceSimulationLightSwitch0.simulation;
      assertEquals(1200L, _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MAX());
      
      _05_PresenceSimulationLightSwitch_Simulation0.setWAIT_MAX((-1L));
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation1 = _05_PresenceSimulationLightSwitch0.simulation();
      assertEquals(5L, _05_PresenceSimulationLightSwitch_Simulation1.getWAIT_MIN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = new _05_PresenceSimulationLightSwitch.Simulation();
      _05_PresenceSimulationLightSwitch0.simulation = _05_PresenceSimulationLightSwitch_Simulation0;
      _05_PresenceSimulationLightSwitch0.simulation();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = _05_PresenceSimulationLightSwitch0.simulation;
      assertEquals(2L, _05_PresenceSimulationLightSwitch_Simulation0.getUPDATE_PERIOD());
      
      _05_PresenceSimulationLightSwitch_Simulation0.setUPDATE_PERIOD((-1L));
      _05_PresenceSimulationLightSwitch0.simulation();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setWait_time(17L);
      long long0 = _05_PresenceSimulationLightSwitch0.getWait_time();
      assertEquals(17L, long0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setStateConfVectorPosition(1L);
      long long0 = _05_PresenceSimulationLightSwitch0.getStateConfVectorPosition();
      assertEquals(1L, long0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setStateConfVectorPosition((-217L));
      long long0 = _05_PresenceSimulationLightSwitch0.getStateConfVectorPosition();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertEquals((-217L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setIsExecuting(true);
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.getIsExecuting();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.getIsExecuting();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setHour(2106L);
      long long0 = _05_PresenceSimulationLightSwitch0.getHour();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertEquals(2106L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setHour((-912L));
      long long0 = _05_PresenceSimulationLightSwitch0.getHour();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertEquals((-912L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setBrightness((-1035L));
      long long0 = _05_PresenceSimulationLightSwitch0.getBrightness();
      assertEquals((-1035L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.$NULLSTATE$;
      _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_MANUAL;
      _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_PRESENCE_ABSENT;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_PRESENCE_PRESENT;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_MANUAL_MODE_OFF;
      _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION_MODE_ACTIVE_SCHEDULE_WAITING;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertFalse(boolean0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_MANUAL_MODE_ON;
      _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.State _05_PresenceSimulationLightSwitch_State0 = _05_PresenceSimulationLightSwitch.State.MAIN_PRESENCE_SIMULATION_MODE_IDLE;
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isStateActive(_05_PresenceSimulationLightSwitch_State0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.nextEvent();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isActive();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = _05_PresenceSimulationLightSwitch0.simulation;
      long long0 = _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MAX();
      assertEquals(5L, _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MIN());
      assertEquals(1200L, long0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertEquals(2L, _05_PresenceSimulationLightSwitch_Simulation0.getUPDATE_PERIOD());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = _05_PresenceSimulationLightSwitch0.simulation;
      long long0 = _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MIN();
      assertEquals(5L, long0);
      assertEquals(1200L, _05_PresenceSimulationLightSwitch_Simulation0.getWAIT_MAX());
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertEquals(2L, _05_PresenceSimulationLightSwitch_Simulation0.getUPDATE_PERIOD());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _05_PresenceSimulationLightSwitch.Simulation _05_PresenceSimulationLightSwitch_Simulation0 = new _05_PresenceSimulationLightSwitch.Simulation();
      long long0 = _05_PresenceSimulationLightSwitch_Simulation0.getUPDATE_PERIOD();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setTimerService((ITimerService) null);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.getHour();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch0.raiseTimeEvent((-3229));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.InternalOperationCallback _05_PresenceSimulationLightSwitch_InternalOperationCallback0 = mock(_05_PresenceSimulationLightSwitch.InternalOperationCallback.class, new ViolatedAssumptionAnswer());
      _05_PresenceSimulationLightSwitch0.setInternalOperationCallback(_05_PresenceSimulationLightSwitch_InternalOperationCallback0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.raiseStopSimulation();
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.nextEvent();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      boolean boolean0 = _05_PresenceSimulationLightSwitch0.isFinal();
      assertFalse(boolean0);
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.hmi();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
      
      _05_PresenceSimulationLightSwitch0.exit();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      long long0 = _05_PresenceSimulationLightSwitch0.getBrightness();
      assertEquals(0L, long0);
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.getTimerService();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.setIsExecuting(true);
      _05_PresenceSimulationLightSwitch0.exit();
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.raiseStartSimulation();
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.raiseChangePresence();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.getWait_time();
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch0.getStateConfVectorPosition();
      assertEquals(0L, _05_PresenceSimulationLightSwitch0.getBrightness());
      assertFalse(_05_PresenceSimulationLightSwitch0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Hmi _05_PresenceSimulationLightSwitch_Hmi0 = new _05_PresenceSimulationLightSwitch.Hmi(_05_PresenceSimulationLightSwitch0);
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch_Hmi0.raiseChangeBrightness();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Hmi _05_PresenceSimulationLightSwitch_Hmi0 = _05_PresenceSimulationLightSwitch0.hmi;
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch_Hmi0.raiseSwitch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      _05_PresenceSimulationLightSwitch _05_PresenceSimulationLightSwitch0 = new _05_PresenceSimulationLightSwitch();
      _05_PresenceSimulationLightSwitch.Hmi _05_PresenceSimulationLightSwitch_Hmi0 = new _05_PresenceSimulationLightSwitch.Hmi(_05_PresenceSimulationLightSwitch0);
      // Undeclared exception!
      try { 
        _05_PresenceSimulationLightSwitch_Hmi0.raiseToggleMode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart._05_PresenceSimulationLightSwitch", e);
      }
  }
}
