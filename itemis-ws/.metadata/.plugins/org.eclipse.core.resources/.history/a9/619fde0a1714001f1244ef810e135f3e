/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 19:48:45 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.LineFollower;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineFollower_ESTest extends LineFollower_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.raiseTimeEvent(0);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setThr(0L);
      lineFollower0.getThr();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setThr((-121L));
      long long0 = lineFollower0.getThr();
      assertEquals((-121L), long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setStateConfVectorPosition(1939L);
      long long0 = lineFollower0.getStateConfVectorPosition();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(1939L, long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setRightVelocity((-790L));
      long long0 = lineFollower0.getRightVelocity();
      assertEquals((-790L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev4(2527L);
      long long0 = lineFollower0.getPrev4();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(2527L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev4((-481L));
      long long0 = lineFollower0.getPrev4();
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals((-481L), long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev3(734L);
      long long0 = lineFollower0.getPrev3();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(734L, long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev3((-1L));
      long long0 = lineFollower0.getPrev3();
      assertEquals((-1L), long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev2(30L);
      long long0 = lineFollower0.getPrev2();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(30L, long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev2((-3473L));
      long long0 = lineFollower0.getPrev2();
      assertEquals((-3473L), long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev1(2332L);
      long long0 = lineFollower0.getPrev1();
      assertEquals(2332L, long0);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev1((-2672L));
      long long0 = lineFollower0.getPrev1();
      assertEquals((-2672L), long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev0(30L);
      long long0 = lineFollower0.getPrev0();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(30L, long0);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPrev0((-1975L));
      long long0 = lineFollower0.getPrev0();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals((-1975L), long0);
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPIDleft(693L);
      long long0 = lineFollower0.getPIDleft();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(693L, long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPIDleft((-2169L));
      long long0 = lineFollower0.getPIDleft();
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals((-2169L), long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPIDforward(2815L);
      long long0 = lineFollower0.getPIDforward();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(2815L, long0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setPIDforward((-258L));
      long long0 = lineFollower0.getPIDforward();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals((-258L), long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLeftVelocity(4L);
      long long0 = lineFollower0.getLeftVelocity();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLeftVelocity((-3413L));
      long long0 = lineFollower0.getLeftVelocity();
      assertEquals((-3413L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS4(984L);
      long long0 = lineFollower0.getLS4();
      assertEquals(984L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      assertEquals(0L, lineFollower0.getLS4());
      
      lineFollower0.setLS4((-1L));
      long long0 = lineFollower0.getLS4();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS3(551L);
      long long0 = lineFollower0.getLS3();
      assertEquals(551L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS2(1415L);
      long long0 = lineFollower0.getLS2();
      assertEquals(1415L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS2((-2175L));
      long long0 = lineFollower0.getLS2();
      assertEquals((-2175L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      assertEquals(0L, lineFollower0.getLS1());
      
      lineFollower0.setLS1(1L);
      long long0 = lineFollower0.getLS1();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS1((-1942L));
      long long0 = lineFollower0.getLS1();
      assertEquals((-1942L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS0(2712L);
      long long0 = lineFollower0.getLS0();
      assertEquals(2712L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS0((-4371L));
      long long0 = lineFollower0.getLS0();
      assertEquals((-4371L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp3(0L);
      lineFollower0.getKp3();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp3((-2861L));
      long long0 = lineFollower0.getKp3();
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals((-2861L), long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp2(0L);
      lineFollower0.getKp2();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp2((-3473L));
      long long0 = lineFollower0.getKp2();
      assertEquals((-3473L), long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp1(0L);
      lineFollower0.getKp1();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKp1((-1L));
      long long0 = lineFollower0.getKp1();
      assertEquals((-1L), long0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd3(0L);
      lineFollower0.getKd3();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd3((-1L));
      long long0 = lineFollower0.getKd3();
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals((-1L), long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd2(0L);
      lineFollower0.getKd2();
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd2((-3019L));
      long long0 = lineFollower0.getKd2();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals((-3019L), long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd1(0L);
      lineFollower0.getKd1();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setKd1((-1111L));
      long long0 = lineFollower0.getKd1();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals((-1111L), long0);
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setIsExecuting(true);
      boolean boolean0 = lineFollower0.getIsExecuting();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
      assertTrue(boolean0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setDirection(726L);
      long long0 = lineFollower0.getDirection();
      assertEquals(726L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setDirection((-120L));
      long long0 = lineFollower0.getDirection();
      assertEquals((-120L), long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      // Undeclared exception!
      try { 
        lineFollower0.isStateActive((LineFollower.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.LineFollower", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setLS3((-840L));
      long long0 = lineFollower0.getLS3();
      assertEquals((-840L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setRightVelocity(1700L);
      long long0 = lineFollower0.getRightVelocity();
      assertEquals(1700L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      LineFollower.State lineFollower_State0 = LineFollower.State.$NULLSTATE$;
      boolean boolean0 = lineFollower0.isStateActive(lineFollower_State0);
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertFalse(boolean0);
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      LineFollower.State lineFollower_State0 = LineFollower.State.STATE_TRANSITIONS_FORWARD;
      boolean boolean0 = lineFollower0.isStateActive(lineFollower_State0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      LineFollower.State lineFollower_State0 = LineFollower.State.PID_CALCULATER_PID_COMPUTE;
      boolean boolean0 = lineFollower0.isStateActive(lineFollower_State0);
      assertFalse(boolean0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      LineFollower.State lineFollower_State0 = LineFollower.State.STATE_TRANSITIONS_STATIC_STATE;
      boolean boolean0 = lineFollower0.isStateActive(lineFollower_State0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      boolean boolean0 = lineFollower0.isActive();
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(boolean0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setIsExecuting(true);
      lineFollower0.exit();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      assertFalse(lineFollower0.isActive());
      
      lineFollower0.exit();
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      // Undeclared exception!
      try { 
        lineFollower0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LineFollower", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      // Undeclared exception!
      try { 
        lineFollower0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.LineFollower", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getDirection();
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      boolean boolean0 = lineFollower0.isFinal();
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertFalse(boolean0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getRightVelocity();
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getPrev3();
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLS1();
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(lineFollower0.isActive());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKd3();
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(6L, long0);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getThr();
      assertEquals(256L, long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getPrev2();
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLS2();
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKp3();
      assertEquals(60L, long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.getIsExecuting();
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS1());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.getPIDleft();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(lineFollower0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      // Undeclared exception!
      try { 
        lineFollower0.raiseTimeEvent((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("statechart.LineFollower", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLS3();
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getPrev1();
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, long0);
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getRightVelocity());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKd1();
      assertEquals(10L, long0);
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setStateConfVectorPosition((-1L));
      long long0 = lineFollower0.getStateConfVectorPosition();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals((-1L), long0);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getDirection());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKp2();
      assertEquals(0L, lineFollower0.getLS4());
      assertFalse(lineFollower0.isActive());
      assertEquals(30L, long0);
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLeftVelocity();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getPrev4();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.setTimerService((ITimerService) null);
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKp1();
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(90L, long0);
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLS0();
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.getStateConfVectorPosition();
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getPrev0();
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS4());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getKd2();
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS3());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(4L, long0);
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      long long0 = lineFollower0.getLS4();
      assertEquals(0L, lineFollower0.getLS0());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, long0);
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.getPIDforward();
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getLS4());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS1());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LineFollower lineFollower0 = new LineFollower();
      lineFollower0.getTimerService();
      assertEquals(0L, lineFollower0.getLS1());
      assertEquals(0L, lineFollower0.getLS3());
      assertEquals(0L, lineFollower0.getLS2());
      assertEquals(0L, lineFollower0.getLeftVelocity());
      assertFalse(lineFollower0.isActive());
      assertEquals(0L, lineFollower0.getRightVelocity());
      assertEquals(0L, lineFollower0.getLS0());
      assertEquals(0L, lineFollower0.getDirection());
      assertEquals(0L, lineFollower0.getLS4());
  }
}
