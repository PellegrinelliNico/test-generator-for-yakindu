/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:09:40 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TrafficLightStateMachine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightStateMachine_ESTest extends TrafficLightStateMachine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.setIsExecuting(true);
      boolean boolean0 = trafficLightStateMachine0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      boolean boolean0 = trafficLightStateMachine0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.isStateActive((TrafficLightStateMachine.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.$NULLSTATE$;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_STANDBY;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING_R_PREPARE;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_STANDBY_BLINK_OFF;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_STANDBY_BLINK_ON;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING_R_GO;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING_R_STOP;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      TrafficLightStateMachine.State trafficLightStateMachine_State0 = TrafficLightStateMachine.State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO;
      boolean boolean0 = trafficLightStateMachine0.isStateActive(trafficLightStateMachine_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      boolean boolean0 = trafficLightStateMachine0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      boolean boolean0 = trafficLightStateMachine0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.raiseStandby();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.exit();
      assertFalse(trafficLightStateMachine0.isFinal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseYellowOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getGreenOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseRedOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getGreenOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseRedOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getRedOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getYellowOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseGreenOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.setIsExecuting(true);
      trafficLightStateMachine0.exit();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseGreenOff();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      boolean boolean0 = trafficLightStateMachine0.isFinal();
      assertFalse(boolean0);
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getYellowOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getTimerService();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      // Undeclared exception!
      try { 
        trafficLightStateMachine0.raiseTimeEvent(9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachine", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.setTimerService((ITimerService) null);
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.raiseYellowOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TrafficLightStateMachine trafficLightStateMachine0 = new TrafficLightStateMachine();
      trafficLightStateMachine0.getRedOn();
      assertFalse(trafficLightStateMachine0.isActive());
  }
}
