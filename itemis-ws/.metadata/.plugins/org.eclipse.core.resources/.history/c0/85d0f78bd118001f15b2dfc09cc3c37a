/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:48:49 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.FireAlarm_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.Sensor_Component;
import statechart.SmartFireSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartFireSystem_ESTest extends SmartFireSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = new SmartFireSystem.SensorInput(smartFireSystem0);
      smartFireSystem0.sensorInput = smartFireSystem_SensorInput0;
      smartFireSystem0.sensorInput();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = new SmartFireSystem.SensorInput(smartFireSystem0);
      smartFireSystem0.sensorInput = smartFireSystem_SensorInput0;
      smartFireSystem_SensorInput0.setHeat_detection_time((-684L));
      assertEquals((-684L), smartFireSystem_SensorInput0.getHeat_detection_time());
      
      smartFireSystem0.sensorInput();
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.heatSensorOutput = null;
      smartFireSystem0.heatSensorOutput();
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = smartFireSystem0.heatSensorOutput();
      smartFireSystem_HeatSensorOutput0.setCounter((-27L));
      assertEquals((-27L), smartFireSystem_HeatSensorOutput0.getCounter());
      
      smartFireSystem0.heatSensorOutput();
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = smartFireSystem0.heatSensorOutput();
      smartFireSystem_HeatSensorOutput0.setActivity(true);
      assertTrue(smartFireSystem_HeatSensorOutput0.getActivity());
      
      smartFireSystem0.heatSensorOutput();
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getIsExecuting();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = new SmartFireSystem.System(smartFireSystem0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartFireSystem0.setTemp(deviceTemp_Component0);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = new SmartFireSystem.HeatSensorOutput();
      assertFalse(smartFireSystem_HeatSensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.CarbonSensorOutput smartFireSystem_CarbonSensorOutput0 = smartFireSystem0.carbonSensorOutput;
      smartFireSystem_CarbonSensorOutput0.setCounter(2127L);
      assertEquals(2127L, smartFireSystem_CarbonSensorOutput0.getCounter());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setPower_total((-19L));
      long long0 = smartFireSystem0.getPower_total();
      assertEquals((-19L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SmokeSensorOutput smartFireSystem_SmokeSensorOutput0 = smartFireSystem0.smokeSensorOutput;
      smartFireSystem_SmokeSensorOutput0.setActivity(true);
      assertTrue(smartFireSystem_SmokeSensorOutput0.getActivity());
      
      smartFireSystem0.smokeSensorOutput();
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setPower_input(9L);
      assertEquals(9L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Sensor_Component sensor_Component0 = new Sensor_Component();
      smartFireSystem0.setHeatSensor(sensor_Component0);
      smartFireSystem0.getHeatSensor();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Sensor_Component sensor_Component0 = new Sensor_Component();
      smartFireSystem0.setSmokeSensor(sensor_Component0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setTemp_value(9L);
      assertEquals(9L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.system.setIsOn(false);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Power_Component power_Component0 = new Power_Component();
      smartFireSystem0.setPower(power_Component0);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorOutput smartFireSystem_SensorOutput0 = smartFireSystem0.sensorOutput;
      smartFireSystem_SensorOutput0.setDetected("7ho?<q(L");
      assertFalse(smartFireSystem_SensorOutput0.getActivity());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setWiFi_connection(false);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = smartFireSystem0.heatSensorOutput();
      smartFireSystem_HeatSensorOutput0.setCounter(2259L);
      assertEquals(2259L, smartFireSystem_HeatSensorOutput0.getCounter());
      
      smartFireSystem0.heatSensorOutput();
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartFireSystem.CarbonSensorOutput smartFireSystem_CarbonSensorOutput0 = new SmartFireSystem.CarbonSensorOutput();
      assertFalse(smartFireSystem_CarbonSensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorOutput smartFireSystem_SensorOutput0 = smartFireSystem0.sensorOutput;
      smartFireSystem_SensorOutput0.setActivity(true);
      assertTrue(smartFireSystem_SensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      assertEquals(10L, smartFireSystem0.getPower_required());
      
      smartFireSystem0.setPower_required(0L);
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.sensorInput.setCarbon_detection_time((-1221L));
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = smartFireSystem0.sensorInput();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals((-1221L), smartFireSystem_SensorInput0.getCarbon_detection_time());
      assertEquals(10L, smartFireSystem_SensorInput0.getHeat_detection_time());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(9L, smartFireSystem_SensorInput0.getSmoke_detection_time());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = new SmartFireSystem.SensorInput(smartFireSystem0);
      smartFireSystem_SensorInput0.setSmoke_detection_time((-344L));
      assertEquals((-344L), smartFireSystem_SensorInput0.getSmoke_detection_time());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setCarbonSensor((Sensor_Component) null);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartFireSystem.SmokeSensorOutput smartFireSystem_SmokeSensorOutput0 = new SmartFireSystem.SmokeSensorOutput();
      assertEquals(0L, smartFireSystem_SmokeSensorOutput0.getCounter());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system;
      smartFireSystem_System0.setAlarm_status(false);
      assertFalse(smartFireSystem_System0.getAlarm_status());
      assertFalse(smartFireSystem_System0.getIsOn());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      FireAlarm_Unit fireAlarm_Unit0 = new FireAlarm_Unit();
      smartFireSystem0.setFireAlarm(fireAlarm_Unit0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Network_Component network_Component0 = new Network_Component();
      smartFireSystem0.setWiFi(network_Component0);
      smartFireSystem0.getWiFi();
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setMessage("");
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.CarbonSensorOutput smartFireSystem_CarbonSensorOutput0 = smartFireSystem0.carbonSensorOutput();
      smartFireSystem_CarbonSensorOutput0.setActivity(true);
      assertTrue(smartFireSystem_CarbonSensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Controller_Component controller_Component0 = new Controller_Component();
      smartFireSystem0.setController(controller_Component0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartFireSystem0.setActuator(actuator_Component0);
      smartFireSystem0.getActuator();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State.$NULLSTATE$;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
      boolean boolean0 = smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_;
      boolean boolean0 = smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(boolean0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_;
      boolean boolean0 = smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF;
      smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.State smartFireSystem_State0 = SmartFireSystem.State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF;
      boolean boolean0 = smartFireSystem0.isStateActive(smartFireSystem_State0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      boolean boolean0 = smartFireSystem0.nextEvent();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      boolean boolean0 = smartFireSystem0.isActive();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      // Undeclared exception!
      try { 
        smartFireSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SmokeSensorOutput smartFireSystem_SmokeSensorOutput0 = smartFireSystem0.smokeSensorOutput;
      smartFireSystem_SmokeSensorOutput0.getCounter();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem_SmokeSensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SmokeSensorOutput smartFireSystem_SmokeSensorOutput0 = smartFireSystem0.smokeSensorOutput;
      boolean boolean0 = smartFireSystem_SmokeSensorOutput0.getActivity();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = smartFireSystem0.heatSensorOutput();
      smartFireSystem_HeatSensorOutput0.getCounter();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem_HeatSensorOutput0.getActivity());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = smartFireSystem0.sensorInput();
      long long0 = smartFireSystem_SensorInput0.getHeat_detection_time();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, long0);
      assertEquals(12L, smartFireSystem_SensorInput0.getCarbon_detection_time());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(9L, smartFireSystem_SensorInput0.getSmoke_detection_time());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = smartFireSystem0.sensorInput;
      long long0 = smartFireSystem_SensorInput0.getSmoke_detection_time();
      assertEquals(10L, smartFireSystem_SensorInput0.getHeat_detection_time());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(9L, long0);
      assertEquals(12L, smartFireSystem_SensorInput0.getCarbon_detection_time());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = smartFireSystem0.sensorInput();
      long long0 = smartFireSystem_SensorInput0.getCarbon_detection_time();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(12L, long0);
      assertEquals(9L, smartFireSystem_SensorInput0.getSmoke_detection_time());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem_SensorInput0.getHeat_detection_time());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getWiFi();
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getFireAlarm();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setTimerService((ITimerService) null);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setStateConfVectorPosition(500L);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      assertFalse(smartFireSystem0.isActive());
      
      smartFireSystem0.exit();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.setIsExecuting(true);
      smartFireSystem0.exit();
      assertFalse(smartFireSystem0.isActive());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getStateConfVectorPosition();
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getActuator();
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      // Undeclared exception!
      try { 
        smartFireSystem0.raiseTimeEvent(323);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getPower();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getTimerService();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      long long0 = smartFireSystem0.getPower_input();
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, long0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getPower_total();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      long long0 = smartFireSystem0.getTemp_value();
      assertEquals(50L, long0);
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getCarbonSensor();
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      long long0 = smartFireSystem0.getPower_required();
      assertEquals(10L, long0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getSmokeSensor();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      boolean boolean0 = smartFireSystem0.getWiFi_connection();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorInput smartFireSystem_SensorInput0 = smartFireSystem0.sensorInput();
      // Undeclared exception!
      try { 
        smartFireSystem_SensorInput0.raiseReset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      // Undeclared exception!
      try { 
        smartFireSystem0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getHeatSensor();
      assertFalse(smartFireSystem0.isActive());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.isFinal();
      assertFalse(smartFireSystem0.isActive());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getMessage();
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getController();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.HeatSensorOutput smartFireSystem_HeatSensorOutput0 = smartFireSystem0.heatSensorOutput();
      boolean boolean0 = smartFireSystem_HeatSensorOutput0.getActivity();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(boolean0);
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      smartFireSystem0.getTemp();
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SmokeSensorOutput smartFireSystem_SmokeSensorOutput0 = smartFireSystem0.smokeSensorOutput();
      smartFireSystem_SmokeSensorOutput0.setCounter(0L);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertFalse(smartFireSystem_SmokeSensorOutput0.getActivity());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(20L, smartFireSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.CarbonSensorOutput smartFireSystem_CarbonSensorOutput0 = smartFireSystem0.carbonSensorOutput;
      smartFireSystem_CarbonSensorOutput0.getCounter();
      assertFalse(smartFireSystem_CarbonSensorOutput0.getActivity());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.CarbonSensorOutput smartFireSystem_CarbonSensorOutput0 = smartFireSystem0.carbonSensorOutput();
      boolean boolean0 = smartFireSystem_CarbonSensorOutput0.getActivity();
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.SensorOutput smartFireSystem_SensorOutput0 = smartFireSystem0.sensorOutput();
      smartFireSystem_SensorOutput0.getDetected();
      assertFalse(smartFireSystem_SensorOutput0.getActivity());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertFalse(smartFireSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SmartFireSystem.SensorOutput smartFireSystem_SensorOutput0 = new SmartFireSystem.SensorOutput();
      boolean boolean0 = smartFireSystem_SensorOutput0.getActivity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system();
      boolean boolean0 = smartFireSystem_System0.getAlarm_status();
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
      assertFalse(smartFireSystem_System0.getIsOn());
      assertFalse(smartFireSystem0.isActive());
      assertFalse(boolean0);
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(10L, smartFireSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system;
      boolean boolean0 = smartFireSystem_System0.getIsOn();
      assertEquals(10L, smartFireSystem0.getPower_required());
      assertFalse(boolean0);
      assertFalse(smartFireSystem0.isActive());
      assertFalse(smartFireSystem_System0.getAlarm_status());
      assertFalse(smartFireSystem0.getWiFi_connection());
      assertEquals(20L, smartFireSystem0.getPower_input());
      assertEquals(50L, smartFireSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system;
      // Undeclared exception!
      try { 
        smartFireSystem_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system();
      // Undeclared exception!
      try { 
        smartFireSystem_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system();
      // Undeclared exception!
      try { 
        smartFireSystem_System0.raiseDisconnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SmartFireSystem smartFireSystem0 = new SmartFireSystem();
      SmartFireSystem.System smartFireSystem_System0 = smartFireSystem0.system;
      // Undeclared exception!
      try { 
        smartFireSystem_System0.raiseConnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartFireSystem", e);
      }
  }
}
