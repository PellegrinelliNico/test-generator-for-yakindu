/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 20 08:16:21 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.RgbSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RgbSimplified_ESTest extends RgbSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(511L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      // Undeclared exception!
      try { 
        rgbSimplified0.isStateActive((RgbSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.RgbSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      rgbSimplified0.raiseEnd();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      rgbSimplified0.exit();
      assertFalse(rgbSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1720L, 0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.enter();
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
      
      rgbSimplified0.exit();
      assertFalse(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-913L)).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      assertTrue(rgbSimplified0.isActive());
      
      rgbSimplified0.exit();
      assertFalse(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_IDLE;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertTrue(rgbSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertTrue(rgbSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION__FINAL_;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_RED;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_BLUE;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_GREEN;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_IDLE;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.$NULLSTATE$;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.State rgbSimplified_State0 = RgbSimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = rgbSimplified0.isStateActive(rgbSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      boolean boolean0 = rgbSimplified0.isFinal();
      //  // Unstable assertion: assertTrue(rgbSimplified0.isActive());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      boolean boolean0 = rgbSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      boolean boolean0 = rgbSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      boolean boolean0 = rgbSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      // Undeclared exception!
      try { 
        rgbSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.RgbSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      // Undeclared exception!
      try { 
        rgbSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.RgbSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
      
      rgbSimplified0.exit();
      assertFalse(rgbSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      rgbSimplified0.raiseGreen();
      assertFalse(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      rgbSimplified0.raiseBlue();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      rgbSimplified0.raiseRed();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn((-913L)).when(rgbSimplified_OperationCallback0).init();
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.enter();
      rgbSimplified0.runCycle();
      assertTrue(rgbSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RgbSimplified rgbSimplified0 = new RgbSimplified();
      RgbSimplified.OperationCallback rgbSimplified_OperationCallback0 = mock(RgbSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      rgbSimplified0.setOperationCallback(rgbSimplified_OperationCallback0);
      rgbSimplified0.runCycle();
      assertFalse(rgbSimplified0.isFinal());
  }
}
