testclass FireAlarm_UnitTest for statechart FireAlarm_Unit {
	@Test
	operation test00 () {
	    raise Timer.reset
	}

	@Test
	operation test02 () {
	    enter
	    raise Timer.enable
	    raise Timer.disable
	}

	@Test
	operation test03 () {
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Status.Warning.Level.final_warning)
	}

	@Test
	operation test04 () {
	}

	@Test
	operation test05 () {
	}

	@Test
	operation test06 () {
	}

	@Test
	operation test07 () {
	}

	@Test
	operation test09 () {
	}

	@Test
	operation test10 () {
	    enter
	    raise Mode.danger
	    raise Mode.safe
	}

	@Test
	operation test11 () {
	    enter
	    raise Mode.danger
	    enter
	    triggerWithoutEvent
	    assert is_active
	}

	@Test
	operation test12 () {
	    enter
	    raise Timer.enable
	    exit
	    assert !is_active
	}

	@Test
	operation test13 () {
	    enter
	    raise Mode.danger
	    exit
	    assert !is_active
	}

	@Test
	operation test14 () {
	    enter
	    raise Mode.warning
	    assert active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Timer_Status._timer_running_)
	}

	@Test
	operation test15 () {
	    enter
	    assert is_active
	}

	@Test
	operation test16 () {
	    enter
	    assert is_active
	    assert active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Timer_Status._disabled_)
	}

	@Test
	operation test17 () {
	    enter
	    assert is_active
	    assert active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Status.Safe)
	}

	@Test
	operation test18 () {
	}

	@Test
	operation test19 () {
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Timer_Status._timer_running_)
	}

	@Test
	operation test20 () {
	    assert !is_active
	}

	@Test
	operation test21 () {
	    assert !is_active
	}

	@Test
	operation test22 () {
	    assert !is_active
	}

	@Test
	operation test23 () {
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Status.Warning)
	    assert !is_active
	}

	@Test
	operation test24 () {
	    assert !is_active
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_)
	}

	@Test
	operation test25 () {
	    assert !is_active
	}

	@Test
	operation test26 () {
	    assert !is_active
	}

	@Test
	operation test27 () {
	    assert !is_active
	}

	@Test
	operation test28 () {
	    assert !is_active
	}

	@Test
	operation test29 () {
	    assert !is_active
	}

	@Test
	operation test30 () {
	    assert !is_active
	}

	@Test
	operation test31 () {
	    assert !is_active
	}

	@Test
	operation test32 () {
	    assert !is_active
	}

	@Test
	operation test33 () {
	    assert !is_active
	}

	@Test
	operation test34 () {
	    assert !is_active
	}

	@Test
	operation test35 () {
	    assert !is_active
	}

	@Test
	operation test36 () {
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Status.Warning.Level.initial_warning)
	    assert !is_active
	}

	@Test
	operation test37 () {
	    assert !is_active
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Status.Safe)
	}

	@Test
	operation test38 () {
	    assert !is_active
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Alarm_Switch.Alarm_On)
	}

	@Test
	operation test39 () {
	    assert !is_active
	    assert !active (FireAlarm_Unit._FireAlarm_Unit_._Fire_Alarm_Running_.Alarm_Switch.Alarm_Off)
	}

	@Test
	operation test40 () {
	    assert !is_active
	}

	@Test
	operation test41 () {
	    assert !is_active
	    enter
	    assert is_active
	}

	@Test
	operation test42 () {
	    exit
	    assert !is_active
	}

	@Test
	operation test44 () {
	    enter
	    raise Mode.danger
	    proceed 1s
	    assert is_active
	}

	@Test
	operation test45 () {
	    assert !is_active
	}

	@Test
	operation test46 () {
	    assert !is_active
	}

	@Test
	operation test49 () {
	    assert !is_active
	    assert !is_final
	}

	@Test
	operation test50 () {
	    enter
	    raise Alarm.on
	    raise Alarm.off
	}

}