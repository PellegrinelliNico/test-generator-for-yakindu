/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 20 13:27:09 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.___TrafficLightSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ___TrafficLightSimplified_ESTest extends ___TrafficLightSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      // Undeclared exception!
      try { 
        ___TrafficLightSimplified0.raiseTimeEvent(2010);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2010
         //
         verifyException("statechart.___TrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      // Undeclared exception!
      try { 
        ___TrafficLightSimplified0.isStateActive((___TrafficLightSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.___TrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ___TrafficLightSimplified.Config ___TrafficLightSimplified_Config0 = new ___TrafficLightSimplified.Config();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ___TrafficLightSimplified.Lights ___TrafficLightSimplified_Lights0 = new ___TrafficLightSimplified.Lights();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseBlock();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseSwitchOff();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
      
      ___TrafficLightSimplified0.exit();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseBlock();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
      
      ___TrafficLightSimplified0.exit();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      assertTrue(___TrafficLightSimplified0.isActive());
      
      ___TrafficLightSimplified0.exit();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_ATTENTION;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertTrue(___TrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_BLOCKED;
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseBlock();
      ___TrafficLightSimplified0.runCycle();
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertTrue(___TrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON;
      ___TrafficLightSimplified0.runCycle();
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertTrue(___TrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertTrue(___TrafficLightSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_OFF;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertTrue(___TrafficLightSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.$NULLSTATE$;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_ATTENTION;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_RELEASED;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_BLOCKED;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_ON_MAIN_PREPAREBLOCK;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.State ___TrafficLightSimplified_State0 = ___TrafficLightSimplified.State.MAIN_OFF;
      boolean boolean0 = ___TrafficLightSimplified0.isStateActive(___TrafficLightSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      boolean boolean0 = ___TrafficLightSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      boolean boolean0 = ___TrafficLightSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified0.exit();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      // Undeclared exception!
      try { 
        ___TrafficLightSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.___TrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      // Undeclared exception!
      try { 
        ___TrafficLightSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.___TrafficLightSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      boolean boolean0 = ___TrafficLightSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified0.raiseRelease();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseSwitchOff();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.Lights ___TrafficLightSimplified_Lights0 = ___TrafficLightSimplified0.lights();
      assertNotNull(___TrafficLightSimplified_Lights0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified.Config ___TrafficLightSimplified_Config0 = ___TrafficLightSimplified0.config();
      assertNotNull(___TrafficLightSimplified_Config0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.enter();
      ___TrafficLightSimplified0.raiseSwitchOn();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseBlock();
      ___TrafficLightSimplified0.runCycle();
      ___TrafficLightSimplified0.raiseAttention();
      ___TrafficLightSimplified0.runCycle();
      assertTrue(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ___TrafficLightSimplified0.setTimerService(iTimerService0);
      ___TrafficLightSimplified0.runCycle();
      assertFalse(___TrafficLightSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ___TrafficLightSimplified ___TrafficLightSimplified0 = new ___TrafficLightSimplified();
      ___TrafficLightSimplified0.raiseTimeEvent(0);
      assertFalse(___TrafficLightSimplified0.isActive());
  }
}
