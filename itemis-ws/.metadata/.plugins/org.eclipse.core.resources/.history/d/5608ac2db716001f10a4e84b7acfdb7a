/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:51:25 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.StreetCrossingSystemSimplified;
import statechart._TwoWayTrafficControl2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreetCrossingSystemSimplified_ESTest extends StreetCrossingSystemSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.raiseTimeEvent(0);
      assertFalse(streetCrossingSystemSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      // Undeclared exception!
      try { 
        streetCrossingSystemSimplified0.isStateActive((StreetCrossingSystemSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.StreetCrossingSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      _TwoWayTrafficControl2 _TwoWayTrafficControl2_0 = new _TwoWayTrafficControl2();
      streetCrossingSystemSimplified0.setController(_TwoWayTrafficControl2_0);
      assertFalse(_TwoWayTrafficControl2_0.isFinal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      StreetCrossingSystemSimplified.State streetCrossingSystemSimplified_State0 = StreetCrossingSystemSimplified.State.$NULLSTATE$;
      boolean boolean0 = streetCrossingSystemSimplified0.isStateActive(streetCrossingSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      StreetCrossingSystemSimplified.State streetCrossingSystemSimplified_State0 = StreetCrossingSystemSimplified.State.SYSTEM_TEMPORARY_OUTAGE_B;
      boolean boolean0 = streetCrossingSystemSimplified0.isStateActive(streetCrossingSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      StreetCrossingSystemSimplified.State streetCrossingSystemSimplified_State0 = StreetCrossingSystemSimplified.State.SYSTEM_TEMPORARY_OUTAGE_A;
      boolean boolean0 = streetCrossingSystemSimplified0.isStateActive(streetCrossingSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      StreetCrossingSystemSimplified.State streetCrossingSystemSimplified_State0 = StreetCrossingSystemSimplified.State.SYSTEM_OFF;
      boolean boolean0 = streetCrossingSystemSimplified0.isStateActive(streetCrossingSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      StreetCrossingSystemSimplified.State streetCrossingSystemSimplified_State0 = StreetCrossingSystemSimplified.State.SYSTEM_ON;
      boolean boolean0 = streetCrossingSystemSimplified0.isStateActive(streetCrossingSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      boolean boolean0 = streetCrossingSystemSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      // Undeclared exception!
      try { 
        streetCrossingSystemSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.StreetCrossingSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      // Undeclared exception!
      try { 
        streetCrossingSystemSimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.StreetCrossingSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      // Undeclared exception!
      try { 
        streetCrossingSystemSimplified0.raiseTimeEvent(788);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 788
         //
         verifyException("statechart.StreetCrossingSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      boolean boolean0 = streetCrossingSystemSimplified0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.raiseStartAll();
      assertFalse(streetCrossingSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.exit();
      assertFalse(streetCrossingSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.raiseOutageA();
      assertFalse(streetCrossingSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.raiseOutageB();
      assertFalse(streetCrossingSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreetCrossingSystemSimplified streetCrossingSystemSimplified0 = new StreetCrossingSystemSimplified();
      streetCrossingSystemSimplified0.setTimerService((ITimerService) null);
      assertFalse(streetCrossingSystemSimplified0.isActive());
  }
}
