/*
 * This file was automatically generated by EvoSuite
 * Thu May 09 20:14:43 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart14Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart14Simplified_ESTest extends Statechart14Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.raiseButtonReleased();
      assertFalse(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      // Undeclared exception!
      try { 
        statechart14Simplified0.raiseTimeEvent((-1442));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        statechart14Simplified0.raiseTimeEvent((-604));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -604
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      // Undeclared exception!
      try { 
        statechart14Simplified0.raiseButtonPressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      // Undeclared exception!
      try { 
        statechart14Simplified0.isStateActive((Statechart14Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        statechart14Simplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseTimeEvent(1);
      // Undeclared exception!
      try { 
        statechart14Simplified0.raiseCarDetected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Local_setLED is not raised!
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      statechart14Simplified0.exit();
      assertFalse(statechart14Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseButtonPressed();
      // Undeclared exception!
      try { 
        statechart14Simplified0.raiseButtonReleased();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Local_setLED is not raised!
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED;
      statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertTrue(statechart14Simplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.$NULLSTATE$;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW;
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      Statechart14Simplified.State statechart14Simplified_State0 = Statechart14Simplified.State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED;
      boolean boolean0 = statechart14Simplified0.isStateActive(statechart14Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseTimeEvent(1);
      statechart14Simplified0.raiseButtonPressed();
      assertTrue(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseButtonPressed();
      statechart14Simplified0.raiseCarDetected();
      assertTrue(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.triggerWithoutEvent();
      assertFalse(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      boolean boolean0 = statechart14Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart14Simplified0.isActive());
      
      statechart14Simplified0.enter();
      boolean boolean0 = statechart14Simplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      // Undeclared exception!
      try { 
        statechart14Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      boolean boolean0 = statechart14Simplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      // Undeclared exception!
      try { 
        statechart14Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart14Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseButtonPressed();
      assertTrue(statechart14Simplified0.isActive());
      
      statechart14Simplified0.exit();
      assertFalse(statechart14Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart14Simplified statechart14Simplified0 = new Statechart14Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart14Simplified0.setTimerService(iTimerService0);
      statechart14Simplified0.enter();
      statechart14Simplified0.raiseTimeEvent(1);
      assertTrue(statechart14Simplified0.isActive());
      
      statechart14Simplified0.exit();
      assertFalse(statechart14Simplified0.isActive());
  }
}
