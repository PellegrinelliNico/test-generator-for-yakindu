/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:54:22 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.LEDLight_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.SmartLightSystemSimplified;
import statechart.Ultrasonic_MotionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartLightSystemSimplified_ESTest extends SmartLightSystemSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      Controller_Component controller_Component0 = new Controller_Component();
      smartLightSystemSimplified0.setController(controller_Component0);
      assertFalse(controller_Component0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartLightSystemSimplified0.setActuator(actuator_Component0);
      assertFalse(smartLightSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      Network_Component network_Component0 = new Network_Component();
      smartLightSystemSimplified0.setWiFi(network_Component0);
      assertFalse(network_Component0.getConnection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartLightSystemSimplified.SensorInput smartLightSystemSimplified_SensorInput0 = new SmartLightSystemSimplified.SensorInput();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      LEDLight_Unit lEDLight_Unit0 = new LEDLight_Unit();
      smartLightSystemSimplified0.setLights(lEDLight_Unit0);
      assertFalse(lEDLight_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartLightSystemSimplified.SensorOutput smartLightSystemSimplified_SensorOutput0 = new SmartLightSystemSimplified.SensorOutput();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      Power_Component power_Component0 = new Power_Component();
      smartLightSystemSimplified0.setPower(power_Component0);
      assertEquals(0L, power_Component0.getTotalPower());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartLightSystemSimplified0.setTemp(deviceTemp_Component0);
      assertEquals("", deviceTemp_Component0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      smartLightSystemSimplified0.setMotionDetector((Ultrasonic_MotionDetector) null);
      assertFalse(smartLightSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State.$NULLSTATE$;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY__INITIALIZE_SENSOR_COMPONENT_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_PHYSICALENTITY__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.State smartLightSystemSimplified_State0 = SmartLightSystemSimplified.State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF;
      boolean boolean0 = smartLightSystemSimplified0.isStateActive(smartLightSystemSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      boolean boolean0 = smartLightSystemSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      // Undeclared exception!
      try { 
        smartLightSystemSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.System smartLightSystemSimplified_System0 = new SmartLightSystemSimplified.System(smartLightSystemSimplified0);
      // Undeclared exception!
      try { 
        smartLightSystemSimplified_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.System smartLightSystemSimplified_System0 = smartLightSystemSimplified0.system();
      // Undeclared exception!
      try { 
        smartLightSystemSimplified_System0.raiseConnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.System smartLightSystemSimplified_System0 = new SmartLightSystemSimplified.System(smartLightSystemSimplified0);
      // Undeclared exception!
      try { 
        smartLightSystemSimplified_System0.raiseDisconnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.System smartLightSystemSimplified_System0 = smartLightSystemSimplified0.system();
      // Undeclared exception!
      try { 
        smartLightSystemSimplified_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      // Undeclared exception!
      try { 
        smartLightSystemSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      SmartLightSystemSimplified.SensorOutput smartLightSystemSimplified_SensorOutput0 = smartLightSystemSimplified0.sensorOutput();
      assertNotNull(smartLightSystemSimplified_SensorOutput0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      // Undeclared exception!
      try { 
        smartLightSystemSimplified0.raiseTimeEvent((-4032));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartLightSystemSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      smartLightSystemSimplified0.exit();
      assertFalse(smartLightSystemSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      boolean boolean0 = smartLightSystemSimplified0.isFinal();
      assertFalse(smartLightSystemSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      smartLightSystemSimplified0.setTimerService((ITimerService) null);
      assertFalse(smartLightSystemSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartLightSystemSimplified smartLightSystemSimplified0 = new SmartLightSystemSimplified();
      smartLightSystemSimplified0.sensorInput();
      assertFalse(smartLightSystemSimplified0.isActive());
  }
}
