/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 08:11:24 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.TrafficLightStateMachineSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLightStateMachineSimplified_ESTest extends TrafficLightStateMachineSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.raiseTimeEvent(1611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1611
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.raiseStandby();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.raiseOperate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.isStateActive((TrafficLightStateMachineSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.setTimerService((ITimerService) null);
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.exit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseStandby();
      trafficLightStateMachineSimplified0.raiseStandby();
      assertTrue(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseTimeEvent(2);
      trafficLightStateMachineSimplified0.raiseStandby();
      assertTrue(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseStandby();
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      
      trafficLightStateMachineSimplified0.exit();
      assertFalse(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      
      trafficLightStateMachineSimplified0.exit();
      assertFalse(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      trafficLightStateMachineSimplified0.exit();
      assertFalse(trafficLightStateMachineSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseStandby();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY_BLINK_ON;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseStandby();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY;
      trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_STOP;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO;
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseTimeEvent(2);
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.$NULLSTATE$;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_PREPARE;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY_BLINK_OFF;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY_BLINK_ON;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_GO;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_STOP;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_STANDBY;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      TrafficLightStateMachineSimplified.State trafficLightStateMachineSimplified_State0 = TrafficLightStateMachineSimplified.State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO;
      boolean boolean0 = trafficLightStateMachineSimplified0.isStateActive(trafficLightStateMachineSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.raiseOperate();
      assertFalse(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      assertFalse(trafficLightStateMachineSimplified0.isActive());
      
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseTimeEvent(2);
      trafficLightStateMachineSimplified0.triggerWithoutEvent();
      assertTrue(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      assertFalse(trafficLightStateMachineSimplified0.isActive());
      
      trafficLightStateMachineSimplified0.enter();
      boolean boolean0 = trafficLightStateMachineSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      boolean boolean0 = trafficLightStateMachineSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      // Undeclared exception!
      try { 
        trafficLightStateMachineSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TrafficLightStateMachineSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseTimeEvent(2);
      assertTrue(trafficLightStateMachineSimplified0.isActive());
      
      trafficLightStateMachineSimplified0.exit();
      assertFalse(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      boolean boolean0 = trafficLightStateMachineSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(trafficLightStateMachineSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TrafficLightStateMachineSimplified trafficLightStateMachineSimplified0 = new TrafficLightStateMachineSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      trafficLightStateMachineSimplified0.setTimerService(iTimerService0);
      trafficLightStateMachineSimplified0.enter();
      trafficLightStateMachineSimplified0.raiseStandby();
      trafficLightStateMachineSimplified0.raiseOperate();
      assertFalse(trafficLightStateMachineSimplified0.isFinal());
  }
}
