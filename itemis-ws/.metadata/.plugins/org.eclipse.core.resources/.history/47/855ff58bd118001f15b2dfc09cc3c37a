/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:52:09 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Elevator_UnitSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_UnitSimplified_ESTest extends Elevator_UnitSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      Elevator_UnitSimplified.Direction elevator_UnitSimplified_Direction0 = new Elevator_UnitSimplified.Direction(elevator_UnitSimplified0);
      elevator_UnitSimplified_Direction0.raiseUp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      Elevator_UnitSimplified.Direction elevator_UnitSimplified_Direction0 = elevator_UnitSimplified0.direction();
      elevator_UnitSimplified_Direction0.raiseDown();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.raiseTimeEvent(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.raiseTimeEvent(951);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 951
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.raiseStopped();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.raiseInUse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.raiseStopped();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Elevator_UnitSimplified.Level elevator_UnitSimplified_Level0 = new Elevator_UnitSimplified.Level();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      Elevator_UnitSimplified.Input elevator_UnitSimplified_Input0 = elevator_UnitSimplified0.input();
      elevator_UnitSimplified_Input0.raiseDown();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      Elevator_UnitSimplified.Input elevator_UnitSimplified_Input0 = elevator_UnitSimplified0.input();
      elevator_UnitSimplified0.raiseInUse();
      elevator_UnitSimplified_Input0.raiseSubmit();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      elevator_UnitSimplified0.raiseStopped();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      elevator_UnitSimplified0.exit();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.exit();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.$NULLSTATE$;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_AVAILABLE_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.State elevator_UnitSimplified_State0 = Elevator_UnitSimplified.State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
      elevator_UnitSimplified0.isStateActive(elevator_UnitSimplified_State0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.triggerWithoutEvent();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      elevator_UnitSimplified0.isActive();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.isActive();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      elevator_UnitSimplified0.exit();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      elevator_UnitSimplified0.level();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      elevator_UnitSimplified0.raiseInUse();
      elevator_UnitSimplified0.raiseStopped();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      // Undeclared exception!
      try { 
        elevator_UnitSimplified0.raiseTimeEvent((-3201));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      elevator_UnitSimplified0.isFinal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      Elevator_UnitSimplified.Input elevator_UnitSimplified_Input0 = elevator_UnitSimplified0.input();
      elevator_UnitSimplified_Input0.raiseUp();
      elevator_UnitSimplified_Input0.raiseSubmit();
      elevator_UnitSimplified0.raiseStopped();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      elevator_UnitSimplified0.setTimerService(iTimerService0);
      elevator_UnitSimplified0.enter();
      elevator_UnitSimplified0.raiseToggle();
      Elevator_UnitSimplified.Input elevator_UnitSimplified_Input0 = elevator_UnitSimplified0.input();
      elevator_UnitSimplified_Input0.raiseUp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elevator_UnitSimplified elevator_UnitSimplified0 = new Elevator_UnitSimplified();
      Elevator_UnitSimplified.Input elevator_UnitSimplified_Input0 = new Elevator_UnitSimplified.Input(elevator_UnitSimplified0);
      // Undeclared exception!
      try { 
        elevator_UnitSimplified_Input0.raiseDown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_UnitSimplified", e);
      }
  }
}
