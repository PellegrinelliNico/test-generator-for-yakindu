/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:54:43 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.BouncingBall;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BouncingBall_ESTest extends BouncingBall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setH((-757.1246546872));
      bouncingBall0.setE(9.999985);
      bouncingBall0.enter();
      bouncingBall0.enter();
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      assertEquals(9.999985, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      bouncingBall0.setH(0.0);
      bouncingBall0.runCycle();
      assertTrue(bouncingBall0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setV(4.9999999999999996E-6);
      double double0 = bouncingBall0.getV();
      assertEquals(4.9999999999999996E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setV((-372.61186042621));
      double double0 = bouncingBall0.getV();
      assertEquals((-372.61186042621), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setIsExecuting(true);
      boolean boolean0 = bouncingBall0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      boolean boolean0 = bouncingBall0.getIsExecuting();
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      
      bouncingBall0.setH(0.0);
      double double0 = bouncingBall0.getH();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setH((-1549.71));
      double double0 = bouncingBall0.getH();
      assertEquals((-1549.71), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      
      bouncingBall0.setE(0.0);
      double double0 = bouncingBall0.getE();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setE((-61.458489272));
      double double0 = bouncingBall0.getE();
      assertEquals((-61.458489272), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      // Undeclared exception!
      try { 
        bouncingBall0.isStateActive((BouncingBall.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.BouncingBall", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getH();
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getV_min();
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(0.1, double0, 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getV();
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setH((-728.6609629602683));
      bouncingBall0.setE(10.0);
      bouncingBall0.enter();
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      assertEquals(10.0, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.exit();
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setV((-5022.32));
      bouncingBall0.enter();
      bouncingBall0.runCycle();
      bouncingBall0.exit();
      assertEquals(0.0, bouncingBall0.getH(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      bouncingBall0.exit();
      assertEquals((-0.01), bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setH((-757.1246546872));
      bouncingBall0.enter();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_REST;
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertTrue(bouncingBall0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setH((-728.6609629602683));
      bouncingBall0.enter();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_BOUNCE;
      bouncingBall0.runCycle();
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertTrue(bouncingBall0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_IN_THE_AIR;
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertEquals((-0.01), bouncingBall0.getV(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_REST;
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertFalse(boolean0);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_BOUNCE;
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.$NULLSTATE$;
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      BouncingBall.State bouncingBall_State0 = BouncingBall.State.MAIN_REGION_IN_THE_AIR;
      boolean boolean0 = bouncingBall0.isStateActive(bouncingBall_State0);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      assertFalse(bouncingBall0.isActive());
      
      bouncingBall0.runCycle();
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      boolean boolean0 = bouncingBall0.isActive();
      assertEquals((-0.01), bouncingBall0.getV(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      boolean boolean0 = bouncingBall0.isActive();
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setIsExecuting(true);
      bouncingBall0.exit();
      assertFalse(bouncingBall0.isActive());
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setIsExecuting(true);
      bouncingBall0.enter();
      assertFalse(bouncingBall0.isActive());
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      boolean boolean0 = bouncingBall0.isFinal();
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertFalse(bouncingBall0.isActive());
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getG();
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(10.0, double0, 0.01);
      assertFalse(bouncingBall0.isActive());
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getE();
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(0.7, double0, 0.01);
      assertFalse(bouncingBall0.isActive());
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      bouncingBall0.setH((-0.8059839020304298));
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      assertEquals(0.0, bouncingBall0.getH(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.setIsExecuting(true);
      bouncingBall0.runCycle();
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertFalse(bouncingBall0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      double double0 = bouncingBall0.getDt();
      assertEquals(1.0, bouncingBall0.getH(), 0.01);
      assertEquals(0.0, bouncingBall0.getV(), 0.01);
      assertFalse(bouncingBall0.isActive());
      assertEquals(0.001, double0, 0.01);
      assertEquals(0.7, bouncingBall0.getE(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      bouncingBall0.setH((-0.8059839020304298));
      bouncingBall0.runCycle();
      bouncingBall0.runCycle();
      bouncingBall0.exit();
      assertFalse(bouncingBall0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BouncingBall bouncingBall0 = new BouncingBall();
      bouncingBall0.enter();
      bouncingBall0.runCycle();
      assertEquals(0.99996, bouncingBall0.getH(), 0.01);
  }
}
