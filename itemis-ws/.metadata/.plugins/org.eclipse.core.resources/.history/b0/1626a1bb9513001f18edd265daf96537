/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 12:53:12 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Actuator_Component_ESTest extends Actuator_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.power = null;
      actuator_Component0.power();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power;
      assertEquals(50L, actuator_Component_Power0.getRequired());
      
      actuator_Component_Power0.setRequired(0L);
      actuator_Component0.power();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power;
      actuator_Component_Power0.setRequired((-2522L));
      assertEquals((-2522L), actuator_Component_Power0.getRequired());
      
      actuator_Component0.power();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power;
      actuator_Component_Power0.setDeviceInput(50L);
      assertEquals(50L, actuator_Component_Power0.getDeviceInput());
      
      Actuator_Component.Power actuator_Component_Power1 = actuator_Component0.power();
      assertEquals(50L, actuator_Component_Power1.getRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power();
      actuator_Component_Power0.setDeviceInput((-1008L));
      assertEquals((-1008L), actuator_Component_Power0.getDeviceInput());
      
      actuator_Component0.power();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.setIsExecuting(true);
      boolean boolean0 = actuator_Component0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      boolean boolean0 = actuator_Component0.getIsExecuting();
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Device actuator_Component_Device0 = new Actuator_Component.Device();
      actuator_Component_Device0.setActuated(true);
      actuator_Component0.device = actuator_Component_Device0;
      assertTrue(actuator_Component_Device0.getActuated());
      
      Actuator_Component.Device actuator_Component_Device1 = actuator_Component0.device();
      assertTrue(actuator_Component_Device1.getActuated());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.isStateActive((Actuator_Component.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      assertFalse(actuator_Component0.getIsTriggered());
      
      actuator_Component0.setIsTriggered(true);
      boolean boolean0 = actuator_Component0.getIsTriggered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State.$NULLSTATE$;
      actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___OFF_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(actuator_Component0.getIsTriggered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.State actuator_Component_State0 = Actuator_Component.State._ACTUATOR_COMPONENT___STANDBY_;
      boolean boolean0 = actuator_Component0.isStateActive(actuator_Component_State0);
      assertFalse(actuator_Component0.getIsTriggered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      boolean boolean0 = actuator_Component0.nextEvent();
      assertFalse(actuator_Component0.getIsTriggered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      boolean boolean0 = actuator_Component0.isActive();
      assertFalse(boolean0);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.setIsExecuting(true);
      actuator_Component0.exit();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Actuator_Component.Power actuator_Component_Power0 = new Actuator_Component.Power();
      long long0 = actuator_Component_Power0.getDeviceInput();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Device actuator_Component_Device0 = actuator_Component0.device();
      boolean boolean0 = actuator_Component_Device0.getActuated();
      assertFalse(actuator_Component0.getIsTriggered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.raiseTimeEvent((-25));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      boolean boolean0 = actuator_Component0.isFinal();
      assertFalse(actuator_Component0.getIsTriggered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.getTimerService();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      actuator_Component0.setTimerService((ITimerService) null);
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      assertFalse(actuator_Component0.isActive());
      
      actuator_Component0.exit();
      assertFalse(actuator_Component0.getIsTriggered());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      boolean boolean0 = actuator_Component0.getIsTriggered();
      assertFalse(actuator_Component0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      Actuator_Component.Power actuator_Component_Power0 = actuator_Component0.power();
      long long0 = actuator_Component_Power0.getRequired();
      assertEquals(50L, long0);
      assertFalse(actuator_Component0.isActive());
      assertFalse(actuator_Component0.getIsTriggered());
      assertEquals(0L, actuator_Component_Power0.getDeviceInput());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Actuator_Component actuator_Component0 = new Actuator_Component();
      // Undeclared exception!
      try { 
        actuator_Component0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Actuator_Component", e);
      }
  }
}
