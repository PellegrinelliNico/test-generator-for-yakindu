/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:38:51 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TV_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TV_Unit_ESTest extends TV_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      tV_Unit0.setIsExecuting(true);
      boolean boolean0 = tV_Unit0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      boolean boolean0 = tV_Unit0.getIsExecuting();
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      assertEquals(0L, tV_Unit0.getChannel());
      
      tV_Unit0.setChannel(1L);
      long long0 = tV_Unit0.getChannel();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      tV_Unit0.device = null;
      tV_Unit0.device();
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      // Undeclared exception!
      try { 
        tV_Unit0.isStateActive((TV_Unit.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Device tV_Unit_Device0 = new TV_Unit.Device(tV_Unit0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Device tV_Unit_Device0 = tV_Unit0.device();
      assertFalse(tV_Unit_Device0.getIsOn());
      
      tV_Unit_Device0.setIsOn(true);
      tV_Unit0.device();
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = tV_Unit0.input;
      tV_Unit_Input0.setSource((String) null);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State.$NULLSTATE$;
      tV_Unit0.isStateActive(tV_Unit_State0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ON___TV_WORKING__SATELLITETV;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ON_;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ONSLEEP_;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ON___TV_WORKING__CABLE;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ON___TV_WORKING__HDMI;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.State tV_Unit_State0 = TV_Unit.State._TV_UNIT___TV_ON___TV_WORKING__SATELLITETV__CHANGING_CHANNEL__CHANGECHANNEL;
      boolean boolean0 = tV_Unit0.isStateActive(tV_Unit_State0);
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      boolean boolean0 = tV_Unit0.nextEvent();
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      boolean boolean0 = tV_Unit0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      // Undeclared exception!
      try { 
        tV_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      tV_Unit0.setIsExecuting(true);
      tV_Unit0.exit();
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      // Undeclared exception!
      try { 
        tV_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      tV_Unit0.setTimerService((ITimerService) null);
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      long long0 = tV_Unit0.getChannel();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      assertFalse(tV_Unit0.isActive());
      
      tV_Unit0.exit();
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      // Undeclared exception!
      try { 
        tV_Unit0.raiseChange();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      // Undeclared exception!
      try { 
        tV_Unit0.raiseTimeEvent((-235));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      boolean boolean0 = tV_Unit0.isFinal();
      assertFalse(tV_Unit0.isActive());
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      tV_Unit0.getTimerService();
      assertFalse(tV_Unit0.isActive());
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = new TV_Unit.Input(tV_Unit0);
      // Undeclared exception!
      try { 
        tV_Unit_Input0.raiseCable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = new TV_Unit.Input(tV_Unit0);
      // Undeclared exception!
      try { 
        tV_Unit_Input0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = tV_Unit0.input();
      // Undeclared exception!
      try { 
        tV_Unit_Input0.raiseSatellite();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = tV_Unit0.input();
      tV_Unit_Input0.getSource();
      assertFalse(tV_Unit0.isActive());
      assertEquals(0L, tV_Unit0.getChannel());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Input tV_Unit_Input0 = tV_Unit0.input();
      // Undeclared exception!
      try { 
        tV_Unit_Input0.raiseHdmi();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Device tV_Unit_Device0 = tV_Unit0.device();
      boolean boolean0 = tV_Unit_Device0.getIsOn();
      assertFalse(boolean0);
      assertEquals(0L, tV_Unit0.getChannel());
      assertFalse(tV_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Device tV_Unit_Device0 = tV_Unit0.device();
      // Undeclared exception!
      try { 
        tV_Unit_Device0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TV_Unit tV_Unit0 = new TV_Unit();
      TV_Unit.Device tV_Unit_Device0 = tV_Unit0.device();
      // Undeclared exception!
      try { 
        tV_Unit_Device0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.TV_Unit", e);
      }
  }
}
