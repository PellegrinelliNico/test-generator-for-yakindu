/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:09:00 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Elevator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.raiseTimeEvent(0);
      assertEquals(0L, elevator0.getCurrentFloor());
      assertEquals(0L, elevator0.getDestination());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setIsExecuting(true);
      boolean boolean0 = elevator0.getIsExecuting();
      assertTrue(boolean0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      boolean boolean0 = elevator0.getIsExecuting();
      assertEquals(0L, elevator0.getDestination());
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.raiseFloor(0L);
      elevator0.getFloorValue();
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.raiseFloor((-372L));
      long long0 = elevator0.getFloorValue();
      assertEquals((-372L), long0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setDestination(25L);
      long long0 = elevator0.getDestination();
      assertEquals(25L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      assertEquals(0L, elevator0.getDestination());
      
      elevator0.setDestination((-1L));
      long long0 = elevator0.getDestination();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setCurrentFloor(1465L);
      long long0 = elevator0.getCurrentFloor();
      assertEquals(1465L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setCurrentFloor((-1882L));
      long long0 = elevator0.getCurrentFloor();
      assertEquals((-1882L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      // Undeclared exception!
      try { 
        elevator0.isStateActive((Elevator.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      // Undeclared exception!
      try { 
        elevator0.getFloorValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal event value access. Event Floor is not raised!
         //
         verifyException("statechart.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.raiseFloor(1239L);
      long long0 = elevator0.getFloorValue();
      assertEquals(0L, elevator0.getDestination());
      assertEquals(1239L, long0);
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      Elevator.State elevator_State0 = Elevator.State.MAIN_MOVING;
      boolean boolean0 = elevator0.isStateActive(elevator_State0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      Elevator.State elevator_State0 = Elevator.State.MAIN_MOVING_R1_MOVINGDOWN;
      boolean boolean0 = elevator0.isStateActive(elevator_State0);
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      Elevator.State elevator_State0 = Elevator.State.MAIN_MOVING_R1_MOVINGUP;
      boolean boolean0 = elevator0.isStateActive(elevator_State0);
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      Elevator.State elevator_State0 = Elevator.State.$NULLSTATE$;
      boolean boolean0 = elevator0.isStateActive(elevator_State0);
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      Elevator.State elevator_State0 = Elevator.State.MAIN_IDLE;
      boolean boolean0 = elevator0.isStateActive(elevator_State0);
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getCurrentFloor());
      assertEquals(0L, elevator0.getDestination());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      boolean boolean0 = elevator0.isActive();
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getCurrentFloor());
      assertEquals(0L, elevator0.getDestination());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      // Undeclared exception!
      try { 
        elevator0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      // Undeclared exception!
      try { 
        elevator0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      assertFalse(elevator0.isActive());
      
      elevator0.exit();
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setIsExecuting(true);
      elevator0.exit();
      assertEquals(0L, elevator0.getCurrentFloor());
      assertEquals(0L, elevator0.getDestination());
      assertFalse(elevator0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      long long0 = elevator0.getCurrentFloor();
      assertFalse(elevator0.isActive());
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.getTimerService();
      assertEquals(0L, elevator0.getCurrentFloor());
      assertEquals(0L, elevator0.getDestination());
      assertFalse(elevator0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      boolean boolean0 = elevator0.isFinal();
      assertFalse(boolean0);
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
      assertFalse(elevator0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      // Undeclared exception!
      try { 
        elevator0.raiseTimeEvent(186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 186
         //
         verifyException("statechart.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      long long0 = elevator0.getDestination();
      assertEquals(0L, elevator0.getCurrentFloor());
      assertFalse(elevator0.isActive());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elevator elevator0 = new Elevator();
      elevator0.setTimerService((ITimerService) null);
      assertFalse(elevator0.isActive());
      assertEquals(0L, elevator0.getDestination());
      assertEquals(0L, elevator0.getCurrentFloor());
  }
}
