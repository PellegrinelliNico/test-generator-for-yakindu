/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 06:47:38 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.ArduinoHMISimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArduinoHMISimplified_ESTest extends ArduinoHMISimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      arduinoHMISimplified0.raiseTimeEvent(0);
      assertFalse(arduinoHMISimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.isStateActive((ArduinoHMISimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseLeft();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.raiseSelect();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      arduinoHMISimplified0.exit();
      assertFalse(arduinoHMISimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
      
      arduinoHMISimplified0.exit();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.raiseSelect();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
      
      arduinoHMISimplified0.exit();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      assertTrue(arduinoHMISimplified0.isActive());
      
      arduinoHMISimplified0.exit();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_STOPWATCH_ACTIVE_STOPWATCH_RESET_TIMER;
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseSelect();
      arduinoHMISimplified0.runCycle();
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertTrue(arduinoHMISimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_SELECTING;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertTrue(arduinoHMISimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH;
      arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertTrue(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.enter();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertTrue(arduinoHMISimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES;
      arduinoHMISimplified0.enter();
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertTrue(arduinoHMISimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.$NULLSTATE$;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_COUNTER_R1_COUNTER_ACTIVE;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_COUNTER;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_COUNTER_R1_COUNTER_ACTIVE_COUNTER_COUNT;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_COUNTER_R1_COUNTER_ACTIVE_COUNTER_RESET_COUNTER;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_COUNTER_R1_SELECTING;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_STOPWATCH_ACTIVE_STOPWATCH_STOP_TIMER;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_STOPWATCH_ACTIVE_STOPWATCH_START_TIMER;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_STOPWATCH_ACTIVE_STOPWATCH_RESET_TIMER;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_SELECTING;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE_HANDLE_STATES_RIGHT;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE_HANDLE_STATES_BOTTOM;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE_HANDLE_STATES_LEFT;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE_HANDLE_STATES_MIDDLE;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_HANDLE_STATES_ACTIVE_HANDLE_STATES_TOP;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_STOPWATCH_R1_STOPWATCH_ACTIVE;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.State arduinoHMISimplified_State0 = ArduinoHMISimplified.State.HMI_HANDLE_STATES_R1_SELECTING;
      boolean boolean0 = arduinoHMISimplified0.isStateActive(arduinoHMISimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.runCycle();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      assertFalse(arduinoHMISimplified0.isActive());
      
      arduinoHMISimplified0.enter();
      boolean boolean0 = arduinoHMISimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      boolean boolean0 = arduinoHMISimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      boolean boolean0 = arduinoHMISimplified0.isFinal();
      assertFalse(arduinoHMISimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      arduinoHMISimplified0.raiseUp();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      // Undeclared exception!
      try { 
        arduinoHMISimplified0.raiseTimeEvent(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("statechart.ArduinoHMISimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseSelect();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseLeft();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.exit();
      assertFalse(arduinoHMISimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      arduinoHMISimplified0.setTimerService(iTimerService0);
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseRight();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseLeft();
      arduinoHMISimplified0.runCycle();
      assertFalse(arduinoHMISimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArduinoHMISimplified arduinoHMISimplified0 = new ArduinoHMISimplified();
      ArduinoHMISimplified.OperationCallback arduinoHMISimplified_OperationCallback0 = mock(ArduinoHMISimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setOperationCallback(arduinoHMISimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      arduinoHMISimplified0.setTimerService(iTimerService0);
      assertFalse(arduinoHMISimplified0.isActive());
      
      arduinoHMISimplified0.enter();
      arduinoHMISimplified0.raiseSelect();
      arduinoHMISimplified0.runCycle();
      arduinoHMISimplified0.raiseDown();
      arduinoHMISimplified0.runCycle();
      assertTrue(arduinoHMISimplified0.isActive());
  }
}
