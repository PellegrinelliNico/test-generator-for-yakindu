/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 07:56:19 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.Microwave_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.Sensor_Component;
import statechart.SmartMicrowaveSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartMicrowaveSystem_ESTest extends SmartMicrowaveSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.sensorOutput = null;
      smartMicrowaveSystem0.sensorOutput();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.sensorInput = null;
      smartMicrowaveSystem0.sensorInput();
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setPower_required((-1923L));
      long long0 = smartMicrowaveSystem0.getPower_required();
      assertEquals((-1923L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setIsExecuting(true);
      boolean boolean0 = smartMicrowaveSystem0.getIsExecuting();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertTrue(boolean0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getIsExecuting();
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      Actuator_Component actuator_Component0 = new Actuator_Component();
      smartMicrowaveSystem0.setActuator(actuator_Component0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setPower_total(1023L);
      long long0 = smartMicrowaveSystem0.getPower_total();
      assertEquals(1023L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartMicrowaveSystem.SensorInput smartMicrowaveSystem_SensorInput0 = new SmartMicrowaveSystem.SensorInput();
      assertEquals(0L, smartMicrowaveSystem_SensorInput0.getDetection_time());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setMessage("");
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartMicrowaveSystem.SensorOutput smartMicrowaveSystem_SensorOutput0 = new SmartMicrowaveSystem.SensorOutput();
      smartMicrowaveSystem_SensorOutput0.setActivity(false);
      assertFalse(smartMicrowaveSystem_SensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      DeviceTemp_Component deviceTemp_Component0 = new DeviceTemp_Component();
      smartMicrowaveSystem0.setTemp(deviceTemp_Component0);
      smartMicrowaveSystem0.getTemp();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = smartMicrowaveSystem0.system();
      smartMicrowaveSystem_System0.setIsOn(false);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem_System0.getIsOn());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.SensorInput smartMicrowaveSystem_SensorInput0 = smartMicrowaveSystem0.sensorInput;
      smartMicrowaveSystem_SensorInput0.setDetection_time(3L);
      assertEquals(3L, smartMicrowaveSystem_SensorInput0.getDetection_time());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      
      smartMicrowaveSystem0.setPower_required(0L);
      smartMicrowaveSystem0.getPower_required();
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      Controller_Component controller_Component0 = new Controller_Component();
      smartMicrowaveSystem0.setController(controller_Component0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      Power_Component power_Component0 = new Power_Component();
      smartMicrowaveSystem0.setPower(power_Component0);
      smartMicrowaveSystem0.getPower();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      
      smartMicrowaveSystem0.setWiFi_connection(true);
      boolean boolean0 = smartMicrowaveSystem0.getWiFi_connection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartMicrowaveSystem.SensorOutput smartMicrowaveSystem_SensorOutput0 = new SmartMicrowaveSystem.SensorOutput();
      smartMicrowaveSystem_SensorOutput0.setCounter((-3231L));
      assertEquals((-3231L), smartMicrowaveSystem_SensorOutput0.getCounter());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      Network_Component network_Component0 = new Network_Component();
      smartMicrowaveSystem0.setWiFi(network_Component0);
      smartMicrowaveSystem0.getWiFi();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setMW((Microwave_Unit) null);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      Sensor_Component sensor_Component0 = new Sensor_Component();
      smartMicrowaveSystem0.setSensor(sensor_Component0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      
      smartMicrowaveSystem0.setTemp_value(0L);
      smartMicrowaveSystem0.getTemp_value();
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setPower_input((-3745L));
      assertEquals((-3745L), smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State.$NULLSTATE$;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM;
      boolean boolean0 = smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(boolean0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT_OFF;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT_OFF;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_CONTROLLERCOMPONENT_OFF;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
      smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_ACTUATORCOMPONENT_OFF;
      boolean boolean0 = smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
      boolean boolean0 = smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_SYSTEMSTATUS_ON;
      boolean boolean0 = smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(boolean0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.State smartMicrowaveSystem_State0 = SmartMicrowaveSystem.State._SMARTMICROWAVESYSTEM__SMARTMICROWAVESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
      boolean boolean0 = smartMicrowaveSystem0.isStateActive(smartMicrowaveSystem_State0);
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      boolean boolean0 = smartMicrowaveSystem0.nextEvent();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      boolean boolean0 = smartMicrowaveSystem0.isActive();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(boolean0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setIsExecuting(true);
      smartMicrowaveSystem0.exit();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      // Undeclared exception!
      try { 
        smartMicrowaveSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      long long0 = smartMicrowaveSystem0.sensorInput.getDetection_time();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, long0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = smartMicrowaveSystem0.system();
      boolean boolean0 = smartMicrowaveSystem_System0.getIsOn();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = new SmartMicrowaveSystem.System(smartMicrowaveSystem0);
      // Undeclared exception!
      try { 
        smartMicrowaveSystem_System0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = new SmartMicrowaveSystem.System(smartMicrowaveSystem0);
      // Undeclared exception!
      try { 
        smartMicrowaveSystem_System0.raiseConnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = new SmartMicrowaveSystem.System(smartMicrowaveSystem0);
      // Undeclared exception!
      try { 
        smartMicrowaveSystem_System0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getMessage();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getPower_total();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getStateConfVectorPosition();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getMW();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setTimerService((ITimerService) null);
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.setStateConfVectorPosition(1073L);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.SensorOutput smartMicrowaveSystem_SensorOutput0 = smartMicrowaveSystem0.sensorOutput();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem_SensorOutput0.getActivity());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.System smartMicrowaveSystem_System0 = smartMicrowaveSystem0.system();
      // Undeclared exception!
      try { 
        smartMicrowaveSystem_System0.raiseDisconnect_network();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getTemp();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.SensorInput smartMicrowaveSystem_SensorInput0 = smartMicrowaveSystem0.sensorInput();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem_SensorInput0.getDetection_time());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      // Undeclared exception!
      try { 
        smartMicrowaveSystem0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getPower();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getActuator();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getWiFi();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      boolean boolean0 = smartMicrowaveSystem0.getWiFi_connection();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      // Undeclared exception!
      try { 
        smartMicrowaveSystem0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SmartMicrowaveSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getTimerService();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      assertFalse(smartMicrowaveSystem0.isActive());
      
      smartMicrowaveSystem0.exit();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      long long0 = smartMicrowaveSystem0.getPower_required();
      assertFalse(smartMicrowaveSystem0.isActive());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, long0);
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      boolean boolean0 = smartMicrowaveSystem0.isFinal();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertFalse(smartMicrowaveSystem0.isActive());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(boolean0);
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getSensor();
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      long long0 = smartMicrowaveSystem0.getPower_input();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, long0);
      assertFalse(smartMicrowaveSystem0.isActive());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      smartMicrowaveSystem0.getController();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.isActive());
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      long long0 = smartMicrowaveSystem0.getTemp_value();
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.isActive());
      assertEquals(50L, long0);
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SmartMicrowaveSystem.SensorOutput smartMicrowaveSystem_SensorOutput0 = new SmartMicrowaveSystem.SensorOutput();
      boolean boolean0 = smartMicrowaveSystem_SensorOutput0.getActivity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SmartMicrowaveSystem smartMicrowaveSystem0 = new SmartMicrowaveSystem();
      SmartMicrowaveSystem.SensorOutput smartMicrowaveSystem_SensorOutput0 = smartMicrowaveSystem0.sensorOutput;
      smartMicrowaveSystem_SensorOutput0.getCounter();
      assertEquals(50L, smartMicrowaveSystem0.getTemp_value());
      assertEquals(10L, smartMicrowaveSystem0.getPower_input());
      assertFalse(smartMicrowaveSystem0.getWiFi_connection());
      assertEquals(10L, smartMicrowaveSystem0.getPower_required());
      assertFalse(smartMicrowaveSystem0.isActive());
      assertFalse(smartMicrowaveSystem_SensorOutput0.getActivity());
  }
}
