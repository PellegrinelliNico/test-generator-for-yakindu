/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 06:28:19 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Sensor_Component;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sensor_Component_ESTest extends Sensor_Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      
      sensor_Component0.setSimulate_detection_timer(1L);
      long long0 = sensor_Component0.getSimulate_detection_timer();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setSimulate_detection_timer((-3741L));
      long long0 = sensor_Component0.getSimulate_detection_timer();
      assertEquals((-3741L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      assertFalse(sensor_Component0.getSignalSentToController());
      
      sensor_Component0.setSignalSentToController(true);
      boolean boolean0 = sensor_Component0.getSignalSentToController();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setSensorData((-594L));
      long long0 = sensor_Component0.getSensorData();
      assertEquals((-594L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      assertFalse(sensor_Component0.getReading());
      
      sensor_Component0.setReading(true);
      boolean boolean0 = sensor_Component0.getReading();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setIsExecuting(true);
      boolean boolean0 = sensor_Component0.getIsExecuting();
      assertTrue(boolean0);
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.getIsExecuting();
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setEnvironmentData(2480L);
      long long0 = sensor_Component0.getEnvironmentData();
      assertEquals(2480L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setEnvironmentData((-594L));
      long long0 = sensor_Component0.getEnvironmentData();
      assertEquals((-594L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setCounter((-1L));
      long long0 = sensor_Component0.getCounter();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setActivity_sensed("$NULLSTATE$");
      sensor_Component0.getActivity_sensed();
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(sensor_Component0.getReading());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      assertFalse(sensor_Component0.getActivity());
      
      sensor_Component0.setActivity(true);
      boolean boolean0 = sensor_Component0.getActivity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.isStateActive((Sensor_Component.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setSensorData(561L);
      long long0 = sensor_Component0.getSensorData();
      assertEquals(561L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setCounter(3572L);
      long long0 = sensor_Component0.getCounter();
      assertEquals(3572L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      Sensor_Component.State sensor_Component_State0 = Sensor_Component.State.$NULLSTATE$;
      boolean boolean0 = sensor_Component0.isStateActive(sensor_Component_State0);
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(boolean0);
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      Sensor_Component.State sensor_Component_State0 = Sensor_Component.State._SENSOR_COMPONENT___OFF_;
      boolean boolean0 = sensor_Component0.isStateActive(sensor_Component_State0);
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(boolean0);
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      Sensor_Component.State sensor_Component_State0 = Sensor_Component.State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED;
      boolean boolean0 = sensor_Component0.isStateActive(sensor_Component_State0);
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(boolean0);
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      Sensor_Component.State sensor_Component_State0 = Sensor_Component.State._SENSOR_COMPONENT___SENSOR_MONITORING_;
      boolean boolean0 = sensor_Component0.isStateActive(sensor_Component_State0);
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      Sensor_Component.State sensor_Component_State0 = Sensor_Component.State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD;
      boolean boolean0 = sensor_Component0.isStateActive(sensor_Component_State0);
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.nextEvent();
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getReading());
      assertFalse(boolean0);
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.isActive();
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertFalse(boolean0);
      assertEquals(0L, sensor_Component0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.getTimerService();
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.isFinal();
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(boolean0);
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getReading());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.getSignalSentToController();
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(boolean0);
      assertEquals(0L, sensor_Component0.getEnvironmentData());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.raiseOn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.raiseOff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      long long0 = sensor_Component0.getSimulate_detection_timer();
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, long0);
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setTimerService((ITimerService) null);
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.setIsExecuting(true);
      sensor_Component0.exit();
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.getReading();
      assertFalse(boolean0);
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.getCounter();
      assertEquals(0L, sensor_Component0.getSensorData());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getReading());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      assertFalse(sensor_Component0.isActive());
      
      sensor_Component0.exit();
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.raiseNoActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.raiseActivitySensed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      long long0 = sensor_Component0.getSensorData();
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertFalse(sensor_Component0.isActive());
      assertEquals(0L, long0);
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.getSignalSentToController());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      sensor_Component0.getActivity_sensed();
      assertFalse(sensor_Component0.getReading());
      assertFalse(sensor_Component0.isActive());
      assertFalse(sensor_Component0.getActivity());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(sensor_Component0.getSignalSentToController());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
      assertEquals(0L, sensor_Component0.getEnvironmentData());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      boolean boolean0 = sensor_Component0.getActivity();
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.isActive());
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(boolean0);
      assertEquals(0L, sensor_Component0.getEnvironmentData());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      // Undeclared exception!
      try { 
        sensor_Component0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Sensor_Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Sensor_Component sensor_Component0 = new Sensor_Component();
      long long0 = sensor_Component0.getEnvironmentData();
      assertFalse(sensor_Component0.getSignalSentToController());
      assertFalse(sensor_Component0.getActivity());
      assertFalse(sensor_Component0.isActive());
      assertEquals(0L, long0);
      assertEquals(0L, sensor_Component0.getSensorData());
      assertFalse(sensor_Component0.getReading());
      assertEquals(0L, sensor_Component0.getSimulate_detection_timer());
  }
}
