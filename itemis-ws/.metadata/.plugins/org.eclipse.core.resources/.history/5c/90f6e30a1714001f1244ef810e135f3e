/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:44:32 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart2Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart2Simplified_ESTest extends Statechart2Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      statechart2Simplified_Computer0.raiseX_press();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      statechart2Simplified_Computer0.raiseW_press();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      statechart2Simplified_Computer0.raiseS_press();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      statechart2Simplified_Computer0.raiseM_press();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = new Statechart2Simplified.Computer(statechart2Simplified0);
      statechart2Simplified_Computer0.raiseD_press();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      statechart2Simplified_Computer0.raiseA_press();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      statechart2Simplified0.raiseTimeEvent(1);
      assertFalse(statechart2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart2Simplified.Odom statechart2Simplified_Odom0 = new Statechart2Simplified.Odom();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart2Simplified.BaseValues statechart2Simplified_BaseValues0 = new Statechart2Simplified.BaseValues();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart2Simplified.Grid statechart2Simplified_Grid0 = new Statechart2Simplified.Grid();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart2Simplified.Output statechart2Simplified_Output0 = new Statechart2Simplified.Output();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart2Simplified.LaserDistance statechart2Simplified_LaserDistance0 = new Statechart2Simplified.LaserDistance();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart2Simplified.Imu statechart2Simplified_Imu0 = new Statechart2Simplified.Imu();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart2Simplified.UserVar statechart2Simplified_UserVar0 = new Statechart2Simplified.UserVar();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart2Simplified.StartPos statechart2Simplified_StartPos0 = new Statechart2Simplified.StartPos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart2Simplified.LaserIntensity statechart2Simplified_LaserIntensity0 = new Statechart2Simplified.LaserIntensity();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.exit();
      assertFalse(statechart2Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.$NULLSTATE$;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S__FINAL_;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_FINISH;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_NORTH;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_SOUTH;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_EAST;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_WEST;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST;
      statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      Statechart2Simplified.State statechart2Simplified_State0 = Statechart2Simplified.State.S_MANUAL_MODE_MANUAL_MODE_STOPPED;
      boolean boolean0 = statechart2Simplified0.isStateActive(statechart2Simplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      // Undeclared exception!
      try { 
        statechart2Simplified0.raiseTimeEvent((-2037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2037
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.Computer statechart2Simplified_Computer0 = statechart2Simplified0.computer();
      // Undeclared exception!
      try { 
        statechart2Simplified_Computer0.raiseA_press();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      statechart2Simplified0.triggerWithoutEvent();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      boolean boolean0 = statechart2Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        statechart2Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      // Undeclared exception!
      try { 
        statechart2Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      // Undeclared exception!
      try { 
        statechart2Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.userVar();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      // Undeclared exception!
      try { 
        statechart2Simplified0.raiseTimeEvent((-2037));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart2Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.startPos();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.laserDistance();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.baseValues();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setTimerService(iTimerService0);
      Statechart2Simplified.OperationCallback statechart2Simplified_OperationCallback0 = mock(Statechart2Simplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      statechart2Simplified0.setOperationCallback(statechart2Simplified_OperationCallback0);
      statechart2Simplified0.enter();
      assertTrue(statechart2Simplified0.isActive());
      
      statechart2Simplified0.exit();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.odom();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.isFinal();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.imu();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.output();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.grid();
      assertFalse(statechart2Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Statechart2Simplified statechart2Simplified0 = new Statechart2Simplified();
      statechart2Simplified0.laserIntensity();
      assertFalse(statechart2Simplified0.isActive());
  }
}
