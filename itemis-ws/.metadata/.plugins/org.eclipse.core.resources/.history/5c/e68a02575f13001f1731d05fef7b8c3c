/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 20:10:30 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.MusicPlayerSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MusicPlayerSimplified_ESTest extends MusicPlayerSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Radio musicPlayerSimplified_Radio0 = musicPlayerSimplified0.radio();
      musicPlayerSimplified_Radio0.raiseRaiseFreq();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Radio musicPlayerSimplified_Radio0 = musicPlayerSimplified0.radio();
      musicPlayerSimplified_Radio0.raiseLowerFreq();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Power musicPlayerSimplified_Power0 = musicPlayerSimplified0.power();
      musicPlayerSimplified_Power0.raisePowerOn();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Power musicPlayerSimplified_Power0 = new MusicPlayerSimplified.Power(musicPlayerSimplified0);
      musicPlayerSimplified_Power0.raisePowerOff();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Network musicPlayerSimplified_Network0 = new MusicPlayerSimplified.Network(musicPlayerSimplified0);
      musicPlayerSimplified_Network0.raiseConnectionMade();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = new MusicPlayerSimplified.ModePlay(musicPlayerSimplified0);
      musicPlayerSimplified_ModePlay0.raiseVolumeUp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = new MusicPlayerSimplified.ModePlay(musicPlayerSimplified0);
      musicPlayerSimplified_ModePlay0.raiseStop();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = new MusicPlayerSimplified.ModePlay(musicPlayerSimplified0);
      musicPlayerSimplified_ModePlay0.raiseSkipForward();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = musicPlayerSimplified0.modePlay();
      musicPlayerSimplified_ModePlay0.raisePlay();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = new MusicPlayerSimplified.ModePlay(musicPlayerSimplified0);
      musicPlayerSimplified_ModePlay0.raisePause();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = musicPlayerSimplified0.modePlay();
      musicPlayerSimplified_ModePlay0.raiseNext();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = new MusicPlayerSimplified.ModePlay(musicPlayerSimplified0);
      musicPlayerSimplified_ModePlay0.raiseBack();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Internet musicPlayerSimplified_Internet0 = musicPlayerSimplified0.internet();
      musicPlayerSimplified_Internet0.raiseLogout();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Internet musicPlayerSimplified_Internet0 = new MusicPlayerSimplified.Internet(musicPlayerSimplified0);
      musicPlayerSimplified_Internet0.raiseDisconnectWifi();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = musicPlayerSimplified0.clock();
      musicPlayerSimplified_Clock0.raiseStopAlarmClock();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = new MusicPlayerSimplified.Clock(musicPlayerSimplified0);
      musicPlayerSimplified_Clock0.raiseResetTimer();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = musicPlayerSimplified0.clock();
      musicPlayerSimplified_Clock0.raiseClockDSP();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = new MusicPlayerSimplified.Clock(musicPlayerSimplified0);
      musicPlayerSimplified_Clock0.raiseChooseSW();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.raiseTimeEvent(2);
      assertFalse(musicPlayerSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.raiseMyEvent();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.raiseTimeEvent((-2424));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2424
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.isStateActive((MusicPlayerSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.Radio musicPlayerSimplified_Radio0 = new MusicPlayerSimplified.Radio(musicPlayerSimplified0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MusicPlayerSimplified.Timer musicPlayerSimplified_Timer0 = new MusicPlayerSimplified.Timer();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.Modes musicPlayerSimplified_Modes0 = new MusicPlayerSimplified.Modes(musicPlayerSimplified0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MusicPlayerSimplified.USB musicPlayerSimplified_USB0 = new MusicPlayerSimplified.USB();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      musicPlayerSimplified0.exit();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.enter();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.enter();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK;
      musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertTrue(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER;
      musicPlayerSimplified0.enter();
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertTrue(musicPlayerSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.$NULLSTATE$;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_AUX;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_USB;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_POWEROFFSTATE;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_USB_R1_STOP;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_NETWORK;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.State musicPlayerSimplified_State0 = MusicPlayerSimplified.State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT;
      boolean boolean0 = musicPlayerSimplified0.isStateActive(musicPlayerSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Internet musicPlayerSimplified_Internet0 = musicPlayerSimplified0.internet();
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = musicPlayerSimplified0.clock();
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_Clock0.raiseClockSet();
      musicPlayerSimplified_Internet0.raiseConnectWifi();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.triggerWithoutEvent();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      boolean boolean0 = musicPlayerSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      assertFalse(musicPlayerSimplified0.isActive());
      
      musicPlayerSimplified0.enter();
      boolean boolean0 = musicPlayerSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.Radio musicPlayerSimplified_Radio0 = musicPlayerSimplified0.radio();
      // Undeclared exception!
      try { 
        musicPlayerSimplified_Radio0.raiseLowerFreq();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = musicPlayerSimplified0.modePlay();
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_ModePlay0.raiseVolumeDown();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.Network musicPlayerSimplified_Network0 = musicPlayerSimplified0.network();
      // Undeclared exception!
      try { 
        musicPlayerSimplified_Network0.raiseConnectionMade();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.raiseMyEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      musicPlayerSimplified0.timer();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.enter();
      MusicPlayerSimplified.Modes musicPlayerSimplified_Modes0 = musicPlayerSimplified0.modes();
      musicPlayerSimplified_Modes0.raiseChangeMode();
      musicPlayerSimplified_Modes0.raiseChangeMode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      boolean boolean0 = musicPlayerSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      // Undeclared exception!
      try { 
        musicPlayerSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.MusicPlayerSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Internet musicPlayerSimplified_Internet0 = musicPlayerSimplified0.internet();
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_Internet0.raiseConnectWifi();
      assertTrue(musicPlayerSimplified0.isActive());
      
      musicPlayerSimplified0.exit();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      musicPlayerSimplified0.uSB();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = musicPlayerSimplified0.clock();
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_Clock0.raiseClockSet();
      musicPlayerSimplified0.exit();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      MusicPlayerSimplified.Clock musicPlayerSimplified_Clock0 = musicPlayerSimplified0.clock();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_Clock0.raiseChooseTM();
      musicPlayerSimplified0.exit();
      assertFalse(musicPlayerSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      MusicPlayerSimplified.Internet musicPlayerSimplified_Internet0 = musicPlayerSimplified0.internet();
      musicPlayerSimplified0.enter();
      musicPlayerSimplified_Internet0.raiseLogin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MusicPlayerSimplified musicPlayerSimplified0 = new MusicPlayerSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      musicPlayerSimplified0.setTimerService(iTimerService0);
      musicPlayerSimplified0.enter();
      MusicPlayerSimplified.ModePlay musicPlayerSimplified_ModePlay0 = musicPlayerSimplified0.modePlay();
      musicPlayerSimplified_ModePlay0.raiseSkipBackwards();
  }
}
