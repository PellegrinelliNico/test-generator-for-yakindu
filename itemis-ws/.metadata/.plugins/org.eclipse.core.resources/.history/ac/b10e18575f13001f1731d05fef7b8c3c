/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 21:44:51 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.UpdateSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdateSimplified_ESTest extends UpdateSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      // Undeclared exception!
      try { 
        updateSimplified0.raiseTimeEvent((-3940));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3940
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.raiseComplete();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.isStateActive((UpdateSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      updateSimplified0.raiseFailed();
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseFailed();
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      updateSimplified0.raiseComplete();
      updateSimplified0.raiseFailed();
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseTimeEvent(0);
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      updateSimplified0.raiseFailed();
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.triggerWithoutEvent();
      assertTrue(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      assertTrue(updateSimplified0.isActive());
      
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      assertTrue(updateSimplified0.isActive());
      
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      assertTrue(updateSimplified0.isActive());
      
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_WAIT_FOR_CONNECT;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertTrue(updateSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.$NULLSTATE$;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_WAIT_FOR_CONNECT;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_BOOTED;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_FAILED;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_WAIT_BOOTLOADER;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_FLASH_REST;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_FLASH_COMPLETE_PAGE;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_FLASH_REQUEST;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_RESET;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_FLASH_CHECK;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.State updateSimplified_State0 = UpdateSimplified.State.MAIN_REGION_PING;
      boolean boolean0 = updateSimplified0.isStateActive(updateSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        updateSimplified0.raiseConnected();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.triggerWithoutEvent();
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      assertFalse(updateSimplified0.isActive());
      
      updateSimplified0.enter();
      boolean boolean0 = updateSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      boolean boolean0 = updateSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        updateSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      assertTrue(updateSimplified0.isActive());
      
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      // Undeclared exception!
      try { 
        updateSimplified0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.UpdateSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      boolean boolean0 = updateSimplified0.isFinal();
      assertFalse(boolean0);
      assertFalse(updateSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UpdateSimplified updateSimplified0 = new UpdateSimplified();
      UpdateSimplified.OperationCallback updateSimplified_OperationCallback0 = mock(UpdateSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(updateSimplified_OperationCallback0).hasController();
      updateSimplified0.setOperationCallback(updateSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      updateSimplified0.setTimerService(iTimerService0);
      updateSimplified0.enter();
      updateSimplified0.raiseConnected();
      updateSimplified0.raiseTimeEvent(0);
      updateSimplified0.raiseComplete();
      assertTrue(updateSimplified0.isActive());
      
      updateSimplified0.exit();
      assertFalse(updateSimplified0.isActive());
  }
}
