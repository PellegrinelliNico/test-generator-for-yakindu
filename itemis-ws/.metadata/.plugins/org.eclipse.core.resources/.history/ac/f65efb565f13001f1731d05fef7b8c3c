/*
 * This file was automatically generated by EvoSuite
 * Wed May 15 21:00:44 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Statechart5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart5_ESTest extends Statechart5_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.ledGreen = null;
      Statechart5.LedGreen statechart5_LedGreen0 = statechart5_0.ledGreen();
      assertNull(statechart5_LedGreen0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.setIsExecuting(true);
      boolean boolean0 = statechart5_0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      boolean boolean0 = statechart5_0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      // Undeclared exception!
      try { 
        statechart5_0.isStateActive((Statechart5.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.ButtonCancel statechart5_ButtonCancel0 = new Statechart5.ButtonCancel(statechart5_0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.$NULLSTATE$;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.MAIN_REGION_STATE2PREPAREACTUATION;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.MAIN_REGION_STATEMOTORON;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.MAIN_REGION_STATE1PREPAREACTUATION;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.MAIN_REGION_STATECANCELACTUATION;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.State statechart5_State0 = Statechart5.State.MAIN_REGION_DECISIONACTIVATE;
      boolean boolean0 = statechart5_0.isStateActive(statechart5_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      boolean boolean0 = statechart5_0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      boolean boolean0 = statechart5_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      // Undeclared exception!
      try { 
        statechart5_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Observable<Void> observable0 = statechart5_0.ledGreen.getON();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.LedGreen statechart5_LedGreen0 = statechart5_0.ledGreen();
      statechart5_LedGreen0.raiseON();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart5.LedGreen statechart5_LedGreen0 = new Statechart5.LedGreen();
      statechart5_LedGreen0.raiseOFF();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart5.LedRed statechart5_LedRed0 = new Statechart5.LedRed();
      statechart5_LedRed0.raiseOFF();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart5.LedRed statechart5_LedRed0 = new Statechart5.LedRed();
      Observable<Void> observable0 = statechart5_LedRed0.getON();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart5.LedRed statechart5_LedRed0 = new Statechart5.LedRed();
      statechart5_LedRed0.raiseON();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      boolean boolean0 = statechart5_0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.LedRed statechart5_LedRed0 = statechart5_0.ledRed();
      Observable<Void> observable0 = statechart5_LedRed0.getOFF();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.setIsExecuting(true);
      statechart5_0.exit();
      assertFalse(statechart5_0.isFinal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.LedGreen statechart5_LedGreen0 = statechart5_0.ledGreen();
      Observable<Void> observable0 = statechart5_LedGreen0.getOFF();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      ITimerService iTimerService0 = statechart5_0.getTimerService();
      assertNull(iTimerService0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.exit();
      assertFalse(statechart5_0.isActive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      // Undeclared exception!
      try { 
        statechart5_0.raiseTimeEvent(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.setTimerService((ITimerService) null);
      assertFalse(statechart5_0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      // Undeclared exception!
      try { 
        statechart5_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.ButtonActuation statechart5_ButtonActuation0 = new Statechart5.ButtonActuation(statechart5_0);
      // Undeclared exception!
      try { 
        statechart5_ButtonActuation0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.ButtonActuation statechart5_ButtonActuation0 = statechart5_0.buttonActuation();
      // Undeclared exception!
      try { 
        statechart5_ButtonActuation0.raiseON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.ButtonCancel statechart5_ButtonCancel0 = statechart5_0.buttonCancel();
      // Undeclared exception!
      try { 
        statechart5_ButtonCancel0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.ButtonCancel statechart5_ButtonCancel0 = statechart5_0.buttonCancel();
      // Undeclared exception!
      try { 
        statechart5_ButtonCancel0.raiseON();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.Motor statechart5_Motor0 = statechart5_0.motor();
      statechart5_Motor0.raiseON();
      assertFalse(statechart5_0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      statechart5_0.motor.getON();
      assertFalse(statechart5_0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statechart5.Motor statechart5_Motor0 = new Statechart5.Motor();
      Observable<Void> observable0 = statechart5_Motor0.getOFF();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Statechart5 statechart5_0 = new Statechart5();
      Statechart5.Motor statechart5_Motor0 = statechart5_0.motor();
      statechart5_Motor0.raiseOFF();
      assertFalse(statechart5_0.isActive());
  }
}
