/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 21:26:18 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Test32;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Test32_ESTest extends Test32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.panel = null;
      Test32.Panel test32_Panel0 = test32_0.panel();
      assertNull(test32_Panel0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setZ(1447L);
      long long0 = test32_0.getZ();
      assertEquals(1447L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setZ((-221L));
      long long0 = test32_0.getZ();
      assertEquals((-221L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setPau(2L);
      long long0 = test32_0.getPau();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setPau((-1241L));
      long long0 = test32_0.getPau();
      assertEquals((-1241L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setIsExecuting(true);
      boolean boolean0 = test32_0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Test32 test32_0 = new Test32();
      boolean boolean0 = test32_0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.error = null;
      Test32.Error test32_Error0 = test32_0.error();
      assertNull(test32_Error0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Test32 test32_0 = new Test32();
      // Undeclared exception!
      try { 
        test32_0.isStateActive((Test32.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Test32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Test32 test32_0 = new Test32();
      Test32.Panel test32_Panel0 = new Test32.Panel(test32_0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Test32 test32_0 = new Test32();
      Test32.State test32_State0 = Test32.State.MAIN_REGION_PAUSE;
      boolean boolean0 = test32_0.isStateActive(test32_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Test32 test32_0 = new Test32();
      Test32.State test32_State0 = Test32.State.$NULLSTATE$;
      boolean boolean0 = test32_0.isStateActive(test32_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Test32 test32_0 = new Test32();
      Test32.State test32_State0 = Test32.State.MAIN_REGION_STANDARD;
      boolean boolean0 = test32_0.isStateActive(test32_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Test32 test32_0 = new Test32();
      boolean boolean0 = test32_0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Test32 test32_0 = new Test32();
      boolean boolean0 = test32_0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Test32 test32_0 = new Test32();
      // Undeclared exception!
      try { 
        test32_0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test32", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Test32.Error test32_Error0 = new Test32.Error();
      Observable<Void> observable0 = test32_Error0.getMotor_error();
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Test32.Error test32_Error0 = new Test32.Error();
      test32_Error0.raiseMotor_error();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Test32 test32_0 = new Test32();
      // Undeclared exception!
      try { 
        test32_0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Test32 test32_0 = new Test32();
      long long0 = test32_0.getZ();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setIsExecuting(true);
      test32_0.exit();
      assertFalse(test32_0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Test32 test32_0 = new Test32();
      long long0 = test32_0.getPau();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.raiseVier();
      boolean boolean0 = test32_0.nextEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.exit();
      assertFalse(test32_0.isFinal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.getTimerService();
      assertFalse(test32_0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Test32 test32_0 = new Test32();
      // Undeclared exception!
      try { 
        test32_0.raiseTimeEvent(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Test32 test32_0 = new Test32();
      boolean boolean0 = test32_0.isFinal();
      assertFalse(test32_0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.error();
      assertFalse(test32_0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.panel();
      assertFalse(test32_0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Test32 test32_0 = new Test32();
      test32_0.setTimerService((ITimerService) null);
      assertFalse(test32_0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Test32 test32_0 = new Test32();
      Test32.Panel test32_Panel0 = test32_0.panel;
      // Undeclared exception!
      try { 
        test32_Panel0.raiseBtn_pressed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Test32", e);
      }
  }
}
