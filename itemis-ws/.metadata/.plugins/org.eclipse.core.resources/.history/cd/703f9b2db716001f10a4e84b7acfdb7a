/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 07:50:11 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.StreetCrossingSystem;
import statechart._TwoWayTrafficControl2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreetCrossingSystem_ESTest extends StreetCrossingSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.setIsExecuting(true);
      boolean boolean0 = streetCrossingSystem0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      boolean boolean0 = streetCrossingSystem0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      // Undeclared exception!
      try { 
        streetCrossingSystem0.raiseTimeEvent(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("statechart.StreetCrossingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      // Undeclared exception!
      try { 
        streetCrossingSystem0.isStateActive((StreetCrossingSystem.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.StreetCrossingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      _TwoWayTrafficControl2 _TwoWayTrafficControl2_0 = new _TwoWayTrafficControl2();
      streetCrossingSystem0.setController(_TwoWayTrafficControl2_0);
      _TwoWayTrafficControl2 _TwoWayTrafficControl2_1 = streetCrossingSystem0.getController();
      assertSame(_TwoWayTrafficControl2_1, _TwoWayTrafficControl2_0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      StreetCrossingSystem.State streetCrossingSystem_State0 = StreetCrossingSystem.State.SYSTEM_TEMPORARY_OUTAGE_B;
      boolean boolean0 = streetCrossingSystem0.isStateActive(streetCrossingSystem_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      StreetCrossingSystem.State streetCrossingSystem_State0 = StreetCrossingSystem.State.SYSTEM_TEMPORARY_OUTAGE_A;
      boolean boolean0 = streetCrossingSystem0.isStateActive(streetCrossingSystem_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      StreetCrossingSystem.State streetCrossingSystem_State0 = StreetCrossingSystem.State.SYSTEM_OFF;
      boolean boolean0 = streetCrossingSystem0.isStateActive(streetCrossingSystem_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      StreetCrossingSystem.State streetCrossingSystem_State0 = StreetCrossingSystem.State.$NULLSTATE$;
      boolean boolean0 = streetCrossingSystem0.isStateActive(streetCrossingSystem_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      StreetCrossingSystem.State streetCrossingSystem_State0 = StreetCrossingSystem.State.SYSTEM_ON;
      boolean boolean0 = streetCrossingSystem0.isStateActive(streetCrossingSystem_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      boolean boolean0 = streetCrossingSystem0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      // Undeclared exception!
      try { 
        streetCrossingSystem0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.StreetCrossingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      // Undeclared exception!
      try { 
        streetCrossingSystem0.runCycle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.StreetCrossingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.raiseStartAll();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      boolean boolean0 = streetCrossingSystem0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.raiseTimeEvent(0);
      assertFalse(streetCrossingSystem0.isFinal());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.raiseOutageB();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.exit();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.setTimerService((ITimerService) null);
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.setIsExecuting(true);
      streetCrossingSystem0.exit();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.raiseOutageA();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.getTimerService();
      assertFalse(streetCrossingSystem0.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StreetCrossingSystem streetCrossingSystem0 = new StreetCrossingSystem();
      streetCrossingSystem0.getController();
      assertFalse(streetCrossingSystem0.isActive());
  }
}
