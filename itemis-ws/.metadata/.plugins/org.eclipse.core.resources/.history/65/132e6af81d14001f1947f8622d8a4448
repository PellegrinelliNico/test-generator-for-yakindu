/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:16:55 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.SectionSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SectionSimplified_ESTest extends SectionSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.triggerWithoutEvent();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.raiseTimeEvent(0);
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.raiseNext();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      sectionSimplified0.raiseFailed();
      assertFalse(sectionSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      sectionSimplified0.raiseEnable(false);
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.raiseDisable();
      assertFalse(sectionSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.raiseClear();
      assertFalse(sectionSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseTimeEvent(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseStart();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.enter();
      assertTrue(sectionSimplified0.isActive());
      
      sectionSimplified0.exit();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      sectionSimplified0.exit();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.enter();
      sectionSimplified0.raiseStart();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
      sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertTrue(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.$NULLSTATE$;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_FAILED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.State sectionSimplified_State0 = SectionSimplified.State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY;
      boolean boolean0 = sectionSimplified0.isStateActive(sectionSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseStateResponse(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.raiseRelaisResponse();
      assertFalse(sectionSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      boolean boolean0 = sectionSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      assertFalse(sectionSimplified0.isActive());
      
      sectionSimplified0.enter();
      boolean boolean0 = sectionSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        sectionSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Operation callback must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.enter();
      sectionSimplified0.raiseStart();
      sectionSimplified0.raiseStateResponse(false);
      sectionSimplified0.exit();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseClear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseFailed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      boolean boolean0 = sectionSimplified0.isFinal();
      assertFalse(sectionSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseEnable(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      SectionSimplified.OperationCallback sectionSimplified_OperationCallback0 = mock(SectionSimplified.OperationCallback.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setOperationCallback(sectionSimplified_OperationCallback0);
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      sectionSimplified0.setTimerService(iTimerService0);
      sectionSimplified0.enter();
      sectionSimplified0.raiseStart();
      sectionSimplified0.exit();
      assertFalse(sectionSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseDisable();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SectionSimplified sectionSimplified0 = new SectionSimplified();
      // Undeclared exception!
      try { 
        sectionSimplified0.raiseRelaisResponse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.SectionSimplified", e);
      }
  }
}
