/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 13:22:33 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.Elevator_Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_Unit_ESTest extends Elevator_Unit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      elevator_Unit_Level0.setUserLocation(1331L);
      assertEquals(1331L, elevator_Unit_Level0.getUserLocation());
      
      Elevator_Unit.Level elevator_Unit_Level1 = elevator_Unit0.level();
      assertEquals(0L, elevator_Unit_Level1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      elevator_Unit_Level0.setUserLocation((-407L));
      assertEquals((-407L), elevator_Unit_Level0.getUserLocation());
      
      Elevator_Unit.Level elevator_Unit_Level1 = elevator_Unit0.level();
      assertEquals((-407L), elevator_Unit_Level1.getUserLocation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      elevator_Unit_Level0.setUserInput(150L);
      assertEquals(150L, elevator_Unit_Level0.getUserInput());
      
      Elevator_Unit.Level elevator_Unit_Level1 = elevator_Unit0.level();
      assertEquals(150L, elevator_Unit_Level1.getUserInput());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      assertEquals(0L, elevator_Unit_Level0.getCurrent());
      
      elevator_Unit_Level0.setCurrent((-1L));
      Elevator_Unit.Level elevator_Unit_Level1 = elevator_Unit0.level();
      assertEquals(0L, elevator_Unit_Level1.getUserInput());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setStateConfVectorPosition(2556L);
      long long0 = elevator_Unit0.getStateConfVectorPosition();
      assertEquals(2556L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setStateConfVectorPosition((-1L));
      long long0 = elevator_Unit0.getStateConfVectorPosition();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setIsExecuting(true);
      boolean boolean0 = elevator_Unit0.getIsExecuting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      boolean boolean0 = elevator_Unit0.getIsExecuting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.isStateActive((Elevator_Unit.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Input elevator_Unit_Input0 = elevator_Unit0.input();
      elevator_Unit_Input0.setValue(660L);
      assertEquals(660L, elevator_Unit_Input0.getValue());
      
      Elevator_Unit.Input elevator_Unit_Input1 = elevator_Unit0.input();
      assertEquals(660L, elevator_Unit_Input1.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elevator_Unit.Level elevator_Unit_Level0 = new Elevator_Unit.Level();
      elevator_Unit_Level0.setUserLocation((-1L));
      assertEquals((-1L), elevator_Unit_Level0.getUserLocation());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Direction elevator_Unit_Direction0 = new Elevator_Unit.Direction(elevator_Unit0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      elevator_Unit_Level0.setCurrent(1331L);
      assertEquals(1331L, elevator_Unit_Level0.getCurrent());
      
      Elevator_Unit.Level elevator_Unit_Level1 = elevator_Unit0.level();
      assertEquals(0L, elevator_Unit_Level1.getUserInput());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.$NULLSTATE$;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.State elevator_Unit_State0 = Elevator_Unit.State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
      boolean boolean0 = elevator_Unit0.isStateActive(elevator_Unit_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      boolean boolean0 = elevator_Unit0.nextEvent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      boolean boolean0 = elevator_Unit0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      long long0 = elevator_Unit_Level0.getCurrent();
      assertEquals(0L, elevator_Unit_Level0.getUserLocation());
      assertEquals(0L, elevator_Unit_Level0.getUserInput());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      long long0 = elevator_Unit_Level0.getUserLocation();
      assertEquals(0L, elevator_Unit_Level0.getUserInput());
      assertEquals(0L, long0);
      assertEquals(0L, elevator_Unit_Level0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Direction elevator_Unit_Direction0 = elevator_Unit0.direction;
      // Undeclared exception!
      try { 
        elevator_Unit_Direction0.raiseUp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Input elevator_Unit_Input0 = elevator_Unit0.input();
      // Undeclared exception!
      try { 
        elevator_Unit_Input0.raiseSubmit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Input elevator_Unit_Input0 = new Elevator_Unit.Input(elevator_Unit0);
      long long0 = elevator_Unit_Input0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Input elevator_Unit_Input0 = elevator_Unit0.input();
      // Undeclared exception!
      try { 
        elevator_Unit_Input0.raiseDown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setCompleted(true);
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.raiseTimeEvent((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.exit();
      assertFalse(elevator_Unit0.isFinal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      boolean boolean0 = elevator_Unit0.isFinal();
      assertFalse(boolean0);
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Level elevator_Unit_Level0 = elevator_Unit0.level();
      long long0 = elevator_Unit_Level0.getUserInput();
      assertEquals(0L, long0);
      assertFalse(elevator_Unit0.isActive());
      assertEquals(0L, elevator_Unit_Level0.getCurrent());
      assertEquals(0L, elevator_Unit_Level0.getUserLocation());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setTimerService((ITimerService) null);
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setDoCompletion(true);
      boolean boolean0 = elevator_Unit0.getDoCompletion();
      assertFalse(elevator_Unit0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.raiseStopped();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.setIsExecuting(true);
      elevator_Unit0.exit();
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.raiseToggle();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Input elevator_Unit_Input0 = elevator_Unit0.input();
      // Undeclared exception!
      try { 
        elevator_Unit_Input0.raiseUp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.getCompleted();
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      // Undeclared exception!
      try { 
        elevator_Unit0.raiseInUse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.getTimerService();
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.getDoCompletion();
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      elevator_Unit0.getStateConfVectorPosition();
      assertFalse(elevator_Unit0.isActive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elevator_Unit elevator_Unit0 = new Elevator_Unit();
      Elevator_Unit.Direction elevator_Unit_Direction0 = elevator_Unit0.direction();
      // Undeclared exception!
      try { 
        elevator_Unit_Direction0.raiseDown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Elevator_Unit", e);
      }
  }
}
