/*
 * This file was automatically generated by EvoSuite
 * Thu May 16 20:53:34 GMT 2024
 */

package statechart2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yakindu.core.ITimerService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import statechart.Statechart5Simplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statechart5Simplified_ESTest extends Statechart5Simplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      Statechart5Simplified.ButtonCancel statechart5Simplified_ButtonCancel0 = statechart5Simplified0.buttonCancel();
      statechart5Simplified_ButtonCancel0.raiseON();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      Statechart5Simplified.ButtonCancel statechart5Simplified_ButtonCancel0 = statechart5Simplified0.buttonCancel();
      statechart5Simplified_ButtonCancel0.raiseOFF();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      // Undeclared exception!
      try { 
        statechart5Simplified0.raiseTimeEvent(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      // Undeclared exception!
      try { 
        statechart5Simplified0.raiseTimeEvent(503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 503
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      // Undeclared exception!
      try { 
        statechart5Simplified0.isStateActive((Statechart5Simplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = statechart5Simplified0.buttonActuation();
      statechart5Simplified_ButtonActuation0.raiseON();
      statechart5Simplified_ButtonActuation0.raiseON();
      assertTrue(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = statechart5Simplified0.buttonActuation();
      statechart5Simplified_ButtonActuation0.raiseON();
      statechart5Simplified0.raiseTimeEvent(0);
      statechart5Simplified_ButtonActuation0.raiseON();
      assertTrue(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Statechart5Simplified.LedGreen statechart5Simplified_LedGreen0 = new Statechart5Simplified.LedGreen();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = new Statechart5Simplified.ButtonActuation(statechart5Simplified0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statechart5Simplified.LedRed statechart5Simplified_LedRed0 = new Statechart5Simplified.LedRed();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statechart5Simplified.Motor statechart5Simplified_Motor0 = new Statechart5Simplified.Motor();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      statechart5Simplified0.triggerWithoutEvent();
      assertTrue(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      statechart5Simplified0.exit();
      assertFalse(statechart5Simplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = statechart5Simplified0.buttonActuation();
      statechart5Simplified_ButtonActuation0.raiseON();
      assertTrue(statechart5Simplified0.isActive());
      
      statechart5Simplified0.exit();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      assertTrue(statechart5Simplified0.isActive());
      
      statechart5Simplified0.exit();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart5Simplified0.isActive());
      
      statechart5Simplified0.enter();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_DECISIONACTIVATE;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.$NULLSTATE$;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_STATE2PREPAREACTUATION;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_STATECANCELACTUATION;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_STATE1PREPAREACTUATION;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(boolean0);
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_STATEMOTORON;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(statechart5Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.State statechart5Simplified_State0 = Statechart5Simplified.State.MAIN_REGION_DECISIONACTIVATE;
      boolean boolean0 = statechart5Simplified0.isStateActive(statechart5Simplified_State0);
      assertFalse(statechart5Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart5Simplified0.isActive());
      
      statechart5Simplified0.enter();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = statechart5Simplified0.buttonActuation();
      statechart5Simplified_ButtonActuation0.raiseON();
      statechart5Simplified0.raiseTimeEvent(0);
      statechart5Simplified_ButtonActuation0.raiseOFF();
      assertTrue(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      boolean boolean0 = statechart5Simplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      // Undeclared exception!
      try { 
        statechart5Simplified0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      Statechart5Simplified.ButtonCancel statechart5Simplified_ButtonCancel0 = new Statechart5Simplified.ButtonCancel(statechart5Simplified0);
      // Undeclared exception!
      try { 
        statechart5Simplified_ButtonCancel0.raiseOFF();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      // Undeclared exception!
      try { 
        statechart5Simplified0.triggerWithoutEvent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timer service must be set.
         //
         verifyException("statechart.Statechart5Simplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      boolean boolean0 = statechart5Simplified0.isFinal();
      assertFalse(statechart5Simplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      statechart5Simplified0.ledRed();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      statechart5Simplified0.ledGreen();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      statechart5Simplified0.motor();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      statechart5Simplified0.enter();
      Statechart5Simplified.ButtonActuation statechart5Simplified_ButtonActuation0 = statechart5Simplified0.buttonActuation();
      statechart5Simplified_ButtonActuation0.raiseON();
      statechart5Simplified0.raiseTimeEvent(0);
      statechart5Simplified0.exit();
      assertFalse(statechart5Simplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statechart5Simplified statechart5Simplified0 = new Statechart5Simplified();
      ITimerService iTimerService0 = mock(ITimerService.class, new ViolatedAssumptionAnswer());
      statechart5Simplified0.setTimerService(iTimerService0);
      assertFalse(statechart5Simplified0.isActive());
      
      statechart5Simplified0.enter();
      boolean boolean0 = statechart5Simplified0.isActive();
      assertTrue(boolean0);
  }
}
